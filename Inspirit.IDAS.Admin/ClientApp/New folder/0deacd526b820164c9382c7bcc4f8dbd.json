{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\toolbar-renderer.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\toolbar-renderer.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { addClass, Browser, removeClass, EventHandler, formatUnit, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { getInstance, closest, selectAll } from '@syncfusion/ej2-base';\r\nimport { Toolbar } from '@syncfusion/ej2-navigations';\r\nimport { DropDownButton } from '@syncfusion/ej2-splitbuttons';\r\nimport { Popup } from '@syncfusion/ej2-popups';\r\nimport * as classes from '../base/classes';\r\nimport * as events from '../base/constant';\r\nimport { CLS_TOOLBAR, CLS_DROPDOWN_BTN, CLS_RTE_ELEMENTS, CLS_TB_BTN, CLS_INLINE_DROPDOWN, CLS_COLOR_CONTENT, CLS_FONT_COLOR_DROPDOWN, CLS_BACKGROUND_COLOR_DROPDOWN, CLS_COLOR_PALETTE, CLS_FONT_COLOR_PICKER, CLS_BACKGROUND_COLOR_PICKER } from '../base/classes';\r\nimport { isIDevice } from '../base/util';\r\nimport { ColorPicker } from '@syncfusion/ej2-inputs';\r\n/**\r\n * `Toolbar renderer` module is used to render toolbar in RichTextEditor.\r\n * @hidden\r\n */\r\nvar ToolbarRenderer = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for toolbar renderer module\r\n     */\r\n    function ToolbarRenderer(parent) {\r\n        this.parent = parent;\r\n        this.wireEvent();\r\n    }\r\n    ToolbarRenderer.prototype.wireEvent = function () {\r\n        this.parent.on(events.destroy, this.unWireEvent, this);\r\n    };\r\n    ToolbarRenderer.prototype.unWireEvent = function () {\r\n        this.parent.off(events.destroy, this.unWireEvent);\r\n        if (this.popupOverlay) {\r\n            EventHandler.remove(this.popupOverlay, 'click touchmove', this.onPopupOverlay);\r\n        }\r\n    };\r\n    ToolbarRenderer.prototype.toolbarBeforeCreate = function (e) {\r\n        if (this.mode === 'Extended') {\r\n            e.enableCollision = false;\r\n        }\r\n    };\r\n    ToolbarRenderer.prototype.toolbarCreated = function () {\r\n        this.parent.notify(events.toolbarCreated, this);\r\n    };\r\n    ToolbarRenderer.prototype.toolbarClicked = function (args) {\r\n        if (this.parent.readonly || !this.parent.enabled) {\r\n            return;\r\n        }\r\n        this.parent.notify(events.toolbarClick, args);\r\n        this.parent.trigger('toolbarClick', args);\r\n    };\r\n    ToolbarRenderer.prototype.dropDownSelected = function (args) {\r\n        this.parent.notify(events.dropDownSelect, args);\r\n        this.onPopupOverlay();\r\n    };\r\n    ToolbarRenderer.prototype.beforeDropDownItemRender = function (args) {\r\n        if (this.parent.readonly || !this.parent.enabled) {\r\n            return;\r\n        }\r\n        this.parent.notify(events.beforeDropDownItemRender, args);\r\n    };\r\n    ToolbarRenderer.prototype.dropDownOpen = function (args) {\r\n        if (Browser.isDevice && !args.element.parentElement.classList.contains(classes.CLS_QUICK_DROPDOWN)) {\r\n            this.popupModal(args.element.parentElement);\r\n        }\r\n        this.parent.notify(events.selectionSave, args);\r\n    };\r\n    ToolbarRenderer.prototype.dropDownClose = function (args) {\r\n        this.parent.notify(events.selectionRestore, args);\r\n    };\r\n    ToolbarRenderer.prototype.renderToolbar = function (args) {\r\n        this.setPanel(args.target);\r\n        this.renderPanel();\r\n        this.mode = args.overflowMode;\r\n        args.rteToolbarObj.toolbarObj = new Toolbar({\r\n            items: args.items,\r\n            width: '100%',\r\n            overflowMode: args.overflowMode,\r\n            beforeCreate: this.toolbarBeforeCreate.bind(this),\r\n            created: this.toolbarCreated.bind(this),\r\n            clicked: this.toolbarClicked.bind(this),\r\n            enablePersistence: args.enablePersistence,\r\n            enableRtl: args.enableRtl\r\n        });\r\n        args.rteToolbarObj.toolbarObj.createElement = this.parent.createElement;\r\n        args.rteToolbarObj.toolbarObj.appendTo(args.target);\r\n    };\r\n    ToolbarRenderer.prototype.renderDropDownButton = function (args) {\r\n        var _this = this;\r\n        var css;\r\n        args.element.classList.add(CLS_DROPDOWN_BTN);\r\n        css = args.cssClass + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_TB_BTN;\r\n        if (this.parent.inlineMode.enable && Browser.isDevice) {\r\n            css = css + ' ' + CLS_INLINE_DROPDOWN;\r\n        }\r\n        var proxy = this;\r\n        var dropDown = new DropDownButton({\r\n            items: args.items,\r\n            iconCss: args.iconCss,\r\n            cssClass: css,\r\n            content: args.content,\r\n            enablePersistence: this.parent.enablePersistence,\r\n            enableRtl: this.parent.enableRtl,\r\n            select: this.dropDownSelected.bind(this),\r\n            beforeOpen: function (args) {\r\n                if (proxy.parent.readonly || !proxy.parent.enabled) {\r\n                    args.cancel = true;\r\n                    return;\r\n                }\r\n                for (var index = 0; index < args.element.childNodes.length; index++) {\r\n                    var divNode = _this.parent.createElement('div');\r\n                    divNode.innerHTML = dropDown.content.trim();\r\n                    if (divNode.textContent.trim() !== ''\r\n                        && args.element.childNodes[index].textContent.trim() === divNode.textContent.trim()) {\r\n                        if (!args.element.childNodes[index].classList.contains('e-active')) {\r\n                            addClass([args.element.childNodes[index]], 'e-active');\r\n                        }\r\n                    }\r\n                    else {\r\n                        removeClass([args.element.childNodes[index]], 'e-active');\r\n                    }\r\n                }\r\n                proxy.parent.notify(events.beforeDropDownOpen, args);\r\n            },\r\n            close: this.dropDownClose.bind(this),\r\n            open: this.dropDownOpen.bind(this),\r\n            beforeItemRender: this.beforeDropDownItemRender.bind(this)\r\n        });\r\n        dropDown.createElement = proxy.parent.createElement;\r\n        dropDown.appendTo(args.element);\r\n        args.element.tabIndex = -1;\r\n        var popupElement = document.getElementById(dropDown.element.id + '-popup');\r\n        popupElement.setAttribute('aria-owns', this.parent.getID());\r\n        return dropDown;\r\n    };\r\n    ToolbarRenderer.prototype.onPopupOverlay = function (args) {\r\n        if (!isNullOrUndefined(this.popupOverlay)) {\r\n            closest(this.popupOverlay, '.e-popup-container').style.display = 'none';\r\n            this.popupOverlay.style.display = 'none';\r\n            removeClass([this.popupOverlay], 'e-popup-overlay');\r\n        }\r\n    };\r\n    ToolbarRenderer.prototype.setIsModel = function (element) {\r\n        if (!closest(element, '.e-popup-container')) {\r\n            var popupContainer = this.parent.createElement('div', {\r\n                className: 'e-rte-modal-popup e-popup-container e-center'\r\n            });\r\n            element.parentNode.insertBefore(popupContainer, element);\r\n            popupContainer.appendChild(element);\r\n            popupContainer.style.zIndex = element.style.zIndex;\r\n            popupContainer.style.display = 'flex';\r\n            element.style.position = 'relative';\r\n            addClass([element], 'e-popup-modal');\r\n            this.popupOverlay = this.parent.createElement('div', { className: 'e-popup-overlay' });\r\n            this.popupOverlay.style.zIndex = (parseInt(element.style.zIndex, null) - 1).toString();\r\n            this.popupOverlay.style.display = 'block';\r\n            popupContainer.appendChild(this.popupOverlay);\r\n            EventHandler.add(this.popupOverlay, 'click touchmove', this.onPopupOverlay, this);\r\n        }\r\n        else {\r\n            element.parentElement.style.display = 'flex';\r\n            this.popupOverlay = element.nextElementSibling;\r\n            this.popupOverlay.style.display = 'block';\r\n            addClass([this.popupOverlay], 'e-popup-overlay');\r\n        }\r\n    };\r\n    ToolbarRenderer.prototype.paletteSelection = function (dropDownArgs, currentElement) {\r\n        var ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');\r\n        var colorbox = [].slice.call(selectAll('.e-tile', ele.parentElement));\r\n        removeClass(colorbox, 'e-selected');\r\n        var style = currentElement.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;\r\n        (colorbox.filter(function (colorbox) {\r\n            if (colorbox.style.backgroundColor === style) {\r\n                addClass([colorbox], 'e-selected');\r\n            }\r\n        }));\r\n    };\r\n    ToolbarRenderer.prototype.renderColorPickerDropDown = function (args, item, colorPicker) {\r\n        var _this = this;\r\n        var proxy = this;\r\n        var css = CLS_RTE_ELEMENTS + ' ' + CLS_TB_BTN + ((this.parent.inlineMode) ? (' ' + CLS_INLINE_DROPDOWN) : '');\r\n        css += (' ' + ((item === 'backgroundcolor') ? CLS_BACKGROUND_COLOR_DROPDOWN : CLS_FONT_COLOR_DROPDOWN));\r\n        var content = proxy.parent.createElement('span', { className: CLS_COLOR_CONTENT });\r\n        var inlineEle = proxy.parent.createElement('span', { className: args.cssClass });\r\n        var range;\r\n        inlineEle.style.borderBottomColor = (item === 'backgroundcolor') ?\r\n            proxy.parent.backgroundColor.default : proxy.parent.fontColor.default;\r\n        content.appendChild(inlineEle);\r\n        var dropDown = new DropDownButton({\r\n            target: colorPicker.element.parentElement,\r\n            cssClass: css,\r\n            enablePersistence: this.parent.enablePersistence,\r\n            enableRtl: this.parent.enableRtl,\r\n            beforeOpen: function (dropDownArgs) {\r\n                if (proxy.parent.readonly || !proxy.parent.enabled) {\r\n                    dropDownArgs.cancel = true;\r\n                    return;\r\n                }\r\n                var element = (dropDownArgs.event) ? dropDownArgs.event.target : null;\r\n                proxy.currentElement = dropDown.element;\r\n                proxy.currentDropdown = dropDown;\r\n                proxy.paletteSelection(dropDownArgs, proxy.currentElement);\r\n                if (dropDownArgs.event && dropDownArgs.event.type === 'click' && (element.classList.contains(CLS_COLOR_CONTENT)\r\n                    || element.parentElement.classList.contains(CLS_COLOR_CONTENT))) {\r\n                    dropDownArgs.cancel = true;\r\n                    var colorpickerValue = element.classList.contains(CLS_RTE_ELEMENTS) ? element.style.borderBottomColor :\r\n                        element.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;\r\n                    range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());\r\n                    if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' ||\r\n                        closest(range.startContainer.parentNode, 'td,th')) && range.collapsed) {\r\n                        proxy.parent.notify(events.tableColorPickerChanged, { item: { command: args.command, subCommand: args.subCommand,\r\n                                value: colorpickerValue }\r\n                        });\r\n                    }\r\n                    else {\r\n                        proxy.parent.notify(events.colorPickerChanged, { item: { command: args.command, subCommand: args.subCommand,\r\n                                value: colorpickerValue }\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n                else {\r\n                    var ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');\r\n                    var inst = getInstance(ele, ColorPicker);\r\n                    inst.showButtons = (dropDownArgs.element.querySelector('.e-color-palette')) ? false : true;\r\n                    inst.dataBind();\r\n                }\r\n                dropDownArgs.element.onclick = function (args) {\r\n                    if (args.target.classList.contains('e-cancel')) {\r\n                        dropDown.toggle();\r\n                    }\r\n                };\r\n            },\r\n            open: function (dropDownArgs) {\r\n                _this.setColorPickerContentWidth(colorPicker);\r\n                var ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');\r\n                var focusEle;\r\n                if (dropDownArgs.element.querySelector('.e-color-palette')) {\r\n                    focusEle = ele.parentElement.querySelector('.e-palette');\r\n                }\r\n                else {\r\n                    focusEle = ele.parentElement.querySelector('e-handler');\r\n                }\r\n                if (focusEle) {\r\n                    focusEle.focus();\r\n                }\r\n                if (Browser.isDevice) {\r\n                    _this.popupModal(dropDownArgs.element.parentElement);\r\n                }\r\n            },\r\n            beforeClose: function (dropDownArgs) {\r\n                var element = (dropDownArgs.event) ? dropDownArgs.event.target : null;\r\n                if (dropDownArgs.event && dropDownArgs.event.type === 'click' && (element.classList.contains(CLS_COLOR_CONTENT)\r\n                    || element.parentElement.classList.contains(CLS_COLOR_CONTENT))) {\r\n                    var colorpickerValue = element.classList.contains(CLS_RTE_ELEMENTS) ? element.style.borderBottomColor :\r\n                        element.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;\r\n                    /* tslint:enable */\r\n                    range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());\r\n                    if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' ||\r\n                        closest(range.startContainer.parentNode, 'td,th')) && range.collapsed) {\r\n                        proxy.parent.notify(events.tableColorPickerChanged, { item: { command: args.command, subCommand: args.subCommand,\r\n                                value: colorpickerValue }\r\n                        });\r\n                    }\r\n                    else {\r\n                        proxy.parent.notify(events.colorPickerChanged, { item: { command: args.command, subCommand: args.subCommand,\r\n                                value: colorpickerValue }\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n            },\r\n            close: function (dropDownArgs) {\r\n                proxy.parent.notify(events.selectionRestore, {});\r\n                var dropElement = closest(dropDownArgs.element.parentElement, '.e-popup-container');\r\n                if (dropElement) {\r\n                    dropElement.style.display = 'none';\r\n                    dropElement.lastElementChild.style.display = 'none';\r\n                    removeClass([dropElement.lastElementChild], 'e-popup-overlay');\r\n                }\r\n            }\r\n        });\r\n        dropDown.createElement = proxy.parent.createElement;\r\n        dropDown.appendTo(args.element);\r\n        var popupElement = document.getElementById(dropDown.element.id + '-popup');\r\n        popupElement.setAttribute('aria-owns', this.parent.getID());\r\n        dropDown.element.insertBefore(content, dropDown.element.querySelector('.e-caret'));\r\n        args.element.tabIndex = -1;\r\n        dropDown.element.removeAttribute('type');\r\n        dropDown.element.onmousedown = function () { proxy.parent.notify(events.selectionSave, {}); };\r\n        return dropDown;\r\n    };\r\n    ToolbarRenderer.prototype.popupModal = function (element) {\r\n        var popupInst = getInstance(element, Popup);\r\n        popupInst.relateTo = document.body;\r\n        popupInst.position = { X: 0, Y: 0 };\r\n        popupInst.targetType = 'container';\r\n        popupInst.collision = { X: 'fit', Y: 'fit' };\r\n        popupInst.offsetY = 4;\r\n        popupInst.dataBind();\r\n        this.setIsModel(element);\r\n    };\r\n    ToolbarRenderer.prototype.setColorPickerContentWidth = function (colorPicker) {\r\n        var colorPickerContent = colorPicker.element.nextSibling;\r\n        if (colorPickerContent.style.width === '0px') {\r\n            colorPickerContent.style.width = '';\r\n            var borderWidth = parseInt(getComputedStyle(colorPickerContent).borderBottomWidth, 10);\r\n            colorPickerContent.style.width = formatUnit(colorPickerContent.children[0].offsetWidth\r\n                + borderWidth + borderWidth);\r\n        }\r\n    };\r\n    ToolbarRenderer.prototype.renderColorPicker = function (args, item) {\r\n        var _this = this;\r\n        var proxy = this;\r\n        this.colorPicker = new ColorPicker({\r\n            enablePersistence: this.parent.enablePersistence,\r\n            enableRtl: this.parent.enableRtl,\r\n            inline: true,\r\n            created: function () {\r\n                var value = (item === 'backgroundcolor') ? proxy.parent.backgroundColor.default : proxy.parent.fontColor.default;\r\n                _this.colorPicker.setProperties({ value: value });\r\n            },\r\n            mode: ((item === 'backgroundcolor') ? proxy.parent.backgroundColor.mode : proxy.parent.fontColor.mode),\r\n            modeSwitcher: ((item === 'backgroundcolor') ? proxy.parent.backgroundColor.modeSwitcher : proxy.parent.fontColor.modeSwitcher),\r\n            beforeTileRender: function (args) {\r\n                args.element.classList.add(CLS_COLOR_PALETTE);\r\n            },\r\n            change: function (colorPickerArgs) {\r\n                /* tslint:disable */\r\n                var colorpickerValue = Browser.info.name === 'msie' || Browser.info.name === 'edge' || isIDevice() ? colorPickerArgs.currentValue.rgba : colorPickerArgs.currentValue.hex;\r\n                /* tslint:enable */\r\n                colorPickerArgs.item = {\r\n                    command: args.command,\r\n                    subCommand: args.subCommand,\r\n                    value: colorpickerValue\r\n                };\r\n                proxy.currentElement.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor = colorpickerValue;\r\n                var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());\r\n                if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' ||\r\n                    closest(range.startContainer.parentNode, 'td,th')) && range.collapsed) {\r\n                    proxy.parent.notify(events.tableColorPickerChanged, colorPickerArgs);\r\n                }\r\n                else {\r\n                    proxy.parent.notify(events.colorPickerChanged, colorPickerArgs);\r\n                }\r\n                proxy.currentDropdown.toggle();\r\n            },\r\n            beforeModeSwitch: function (args) {\r\n                _this.colorPicker.showButtons = args.mode === 'Palette' ? false : true;\r\n            }\r\n        });\r\n        this.colorPicker.columns = (item === 'backgroundcolor') ? this.parent.backgroundColor.columns : this.parent.fontColor.columns;\r\n        this.colorPicker.presetColors = (item === 'backgroundcolor') ? this.parent.backgroundColor.colorCode :\r\n            this.parent.fontColor.colorCode;\r\n        this.colorPicker.cssClass = (item === 'backgroundcolor') ? CLS_BACKGROUND_COLOR_PICKER : CLS_FONT_COLOR_PICKER;\r\n        this.colorPicker.createElement = this.parent.createElement;\r\n        this.colorPicker.appendTo(document.body.querySelector(args.target));\r\n        return this.colorPicker;\r\n    };\r\n    /**\r\n     * The function is used to render RichTextEditor toolbar\r\n     */\r\n    ToolbarRenderer.prototype.renderPanel = function () {\r\n        this.getPanel().classList.add(CLS_TOOLBAR);\r\n    };\r\n    /**\r\n     * Get the toolbar element of RichTextEditor\r\n     * @return {Element}\r\n     */\r\n    ToolbarRenderer.prototype.getPanel = function () {\r\n        return this.toolbarPanel;\r\n    };\r\n    /**\r\n     * Set the toolbar element of RichTextEditor\r\n     * @param  {Element} panel\r\n     */\r\n    ToolbarRenderer.prototype.setPanel = function (panel) {\r\n        this.toolbarPanel = panel;\r\n    };\r\n    return ToolbarRenderer;\r\n}());\r\nexport { ToolbarRenderer };\r\n",null]}