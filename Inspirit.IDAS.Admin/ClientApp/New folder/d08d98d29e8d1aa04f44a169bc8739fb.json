{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\lists.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\lists.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import * as CONSTANT from './../base/constant';\r\nimport { createElement, detach, prepend, append, attributes } from '@syncfusion/ej2-base';\r\nimport { markerClassName } from './dom-node';\r\nimport * as EVENTS from './../../common/constant';\r\nimport { setStyleAttribute } from '@syncfusion/ej2-base';\r\n/**\r\n * Lists internal component\r\n * @hidden\r\n */\r\nvar Lists = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the Lists plugin\r\n     * @hidden\r\n     */\r\n    function Lists(parent) {\r\n        this.parent = parent;\r\n        this.domNode = this.parent.domNode;\r\n        this.addEventListener();\r\n    }\r\n    Lists.prototype.addEventListener = function () {\r\n        this.parent.observer.on(EVENTS.LIST_TYPE, this.applyListsHandler, this);\r\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.keyDownHandler, this);\r\n    };\r\n    Lists.prototype.keyDownHandler = function (e) {\r\n        if (e.event.which === 9) {\r\n            var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\r\n            this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);\r\n            var blockNodes = void 0;\r\n            var startOffset = range.startOffset;\r\n            var endOffset = range.endOffset;\r\n            var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);\r\n            var endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);\r\n            if ((startNode === endNode && (startNode.nodeName === 'BR' || startNode.nodeName === '#text') &&\r\n                CONSTANT.IGNORE_BLOCK_TAGS.indexOf(startNode.parentNode.tagName.toLocaleLowerCase()) >= 0)) {\r\n                return;\r\n            }\r\n            else {\r\n                if (!(e.event.action && e.event.action === 'indent')) {\r\n                    this.domNode.setMarker(this.saveSelection);\r\n                }\r\n                blockNodes = this.domNode.blockNodes();\r\n            }\r\n            var nodes = [];\r\n            var isNested = true;\r\n            for (var i = 0; i < blockNodes.length; i++) {\r\n                if (blockNodes[i].parentNode.tagName === 'LI') {\r\n                    nodes.push(blockNodes[i].parentNode);\r\n                }\r\n                else if (blockNodes[i].tagName === 'LI' && blockNodes[i].childNodes[0].tagName !== 'P' &&\r\n                    (blockNodes[i].childNodes[0].tagName !== 'OL' &&\r\n                        blockNodes[i].childNodes[0].tagName !== 'UL')) {\r\n                    nodes.push(blockNodes[i]);\r\n                }\r\n            }\r\n            if (nodes.length > 1 || nodes.length && ((startOffset === 0 && endOffset === 0) || e.ignoreDefault)) {\r\n                e.event.preventDefault();\r\n                e.event.stopPropagation();\r\n                this.currentAction = this.getAction(nodes[0]);\r\n                if (e.event.shiftKey) {\r\n                    this.revertList(nodes);\r\n                    this.revertClean();\r\n                }\r\n                else {\r\n                    isNested = this.nestedList(nodes);\r\n                }\r\n                if (isNested) {\r\n                    this.cleanNode();\r\n                    this.parent.editableElement.focus();\r\n                }\r\n                if (!(e.event.action && e.event.action === 'indent')) {\r\n                    this.saveSelection = this.domNode.saveMarker(this.saveSelection);\r\n                    this.saveSelection.restore();\r\n                    if (e.callBack) {\r\n                        e.callBack({\r\n                            requestType: this.currentAction,\r\n                            editorMode: 'HTML',\r\n                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                            elements: this.parent.domNode.blockNodes(),\r\n                            event: e.event\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            switch (e.event.action) {\r\n                case 'ordered-list':\r\n                    this.applyListsHandler({ subCommand: 'OL', callBack: e.callBack });\r\n                    e.event.preventDefault();\r\n                    break;\r\n                case 'unordered-list':\r\n                    this.applyListsHandler({ subCommand: 'UL', callBack: e.callBack });\r\n                    e.event.preventDefault();\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    Lists.prototype.getAction = function (element) {\r\n        var parentNode = element.parentNode;\r\n        return (parentNode.nodeName === 'OL' ? 'OL' : 'UL');\r\n    };\r\n    Lists.prototype.revertClean = function () {\r\n        var collectionNodes = this.parent.editableElement.querySelectorAll('ul, ol');\r\n        for (var i = 0; i < collectionNodes.length; i++) {\r\n            var listNodes = collectionNodes[i].querySelectorAll('ul, ol');\r\n            if (listNodes.length > 0) {\r\n                for (var j = 0; j < listNodes.length; j++) {\r\n                    var prevSibling = listNodes[j].previousSibling;\r\n                    if (prevSibling && prevSibling.tagName === 'LI') {\r\n                        prevSibling.appendChild(listNodes[j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Lists.prototype.noPreviousElement = function (elements) {\r\n        var firstNode;\r\n        var firstNodeOL;\r\n        var siblingListOL = elements.querySelectorAll('ol, ul');\r\n        var siblingListLI = elements\r\n            .querySelectorAll('li');\r\n        var siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];\r\n        if (siblingListLI.length > 0 && (siblingListLIFirst.nodeName === 'OL' || siblingListLIFirst.nodeName === 'UL')) {\r\n            firstNode = siblingListLI[0];\r\n        }\r\n        else {\r\n            firstNodeOL = siblingListOL[0];\r\n        }\r\n        if (firstNode) {\r\n            for (var h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h); null) {\r\n                var nextSibling = h.nextSibling;\r\n                prepend([h], firstNode);\r\n                setStyleAttribute(elements, { 'list-style-type': 'none' });\r\n                setStyleAttribute(firstNode, { 'list-style-type': '' });\r\n                h = nextSibling;\r\n            }\r\n        }\r\n        else if (firstNodeOL) {\r\n            var nestedElement = createElement('li');\r\n            prepend([nestedElement], firstNodeOL);\r\n            for (var h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h); null) {\r\n                var nextSibling = h.nextSibling;\r\n                nestedElement.appendChild(h);\r\n                h = nextSibling;\r\n            }\r\n            prepend([firstNodeOL], elements.parentNode);\r\n            detach(elements);\r\n            var nestedElementLI = createElement('li', { styles: 'list-style-type: none;' });\r\n            prepend([nestedElementLI], firstNodeOL.parentNode);\r\n            append([firstNodeOL], nestedElementLI);\r\n        }\r\n        else {\r\n            var nestedElementLI = createElement('li', { styles: 'list-style-type: none;' });\r\n            prepend([nestedElementLI], elements.parentNode);\r\n            var nestedElement = createElement(elements.parentNode.tagName);\r\n            prepend([nestedElement], nestedElementLI);\r\n            append([elements], nestedElement);\r\n        }\r\n    };\r\n    Lists.prototype.nestedList = function (elements) {\r\n        var isNested = false;\r\n        for (var i = 0; i < elements.length; i++) {\r\n            var prevSibling = this.domNode.getPreviousNode(elements[i]);\r\n            if (prevSibling) {\r\n                isNested = true;\r\n                var firstNode = void 0;\r\n                var firstNodeLI = void 0;\r\n                var siblingListOL = elements[i].querySelectorAll('ol, ul');\r\n                var siblingListLI = elements[i]\r\n                    .querySelectorAll('li');\r\n                var siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];\r\n                if (siblingListLI.length > 0 && (siblingListLIFirst.nodeName === 'OL' || siblingListLIFirst.nodeName === 'UL')) {\r\n                    firstNodeLI = siblingListLI[0];\r\n                }\r\n                else {\r\n                    firstNode = siblingListOL[0];\r\n                }\r\n                if (firstNode) {\r\n                    var nestedElement = createElement('li');\r\n                    prepend([nestedElement], firstNode);\r\n                    for (var h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h); null) {\r\n                        var nextSibling = h.nextSibling;\r\n                        nestedElement.appendChild(h);\r\n                        h = nextSibling;\r\n                    }\r\n                    append([firstNode], prevSibling);\r\n                    detach(elements[i]);\r\n                }\r\n                else if (firstNodeLI) {\r\n                    if (prevSibling.tagName === 'LI') {\r\n                        for (var h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h); null) {\r\n                            var nextSibling = h.nextSibling;\r\n                            prepend([h], firstNodeLI);\r\n                            setStyleAttribute(elements[i], { 'list-style-type': 'none' });\r\n                            setStyleAttribute(firstNodeLI, { 'list-style-type': '' });\r\n                            h = nextSibling;\r\n                        }\r\n                        append([firstNodeLI.parentNode], prevSibling);\r\n                        detach(elements[i]);\r\n                    }\r\n                }\r\n                else {\r\n                    if (prevSibling.tagName === 'LI') {\r\n                        var nestedElement = createElement(elements[i].parentNode.tagName);\r\n                        append([nestedElement], prevSibling);\r\n                        append([elements[i]], nestedElement);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                var element = elements[i];\r\n                isNested = true;\r\n                this.noPreviousElement(element);\r\n            }\r\n        }\r\n        return isNested;\r\n    };\r\n    Lists.prototype.applyListsHandler = function (e) {\r\n        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\r\n        this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);\r\n        this.currentAction = e.subCommand;\r\n        this.domNode.setMarker(this.saveSelection);\r\n        var listsNodes = this.domNode.blockNodes();\r\n        for (var i = 0; i < listsNodes.length; i++) {\r\n            if (listsNodes[i].tagName !== 'LI' && 'LI' === listsNodes[i].parentNode.tagName) {\r\n                listsNodes[i] = listsNodes[i].parentNode;\r\n            }\r\n        }\r\n        this.applyLists(listsNodes, this.currentAction);\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: this.currentAction,\r\n                event: e.event,\r\n                editorMode: 'HTML',\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.domNode.blockNodes()\r\n            });\r\n        }\r\n    };\r\n    Lists.prototype.applyLists = function (elements, type) {\r\n        var isReverse = true;\r\n        if (this.isRevert(elements, type)) {\r\n            this.revertList(elements);\r\n        }\r\n        else {\r\n            this.checkLists(elements, type);\r\n            for (var i = 0; i < elements.length; i++) {\r\n                if ('LI' !== elements[i].tagName) {\r\n                    isReverse = false;\r\n                    var openTag = '<' + type + this.domNode.attributes(elements[i]) + '>';\r\n                    var closeTag = '</' + type + '>';\r\n                    var newTag = 'li class=\"e-rte-replace-tag\"';\r\n                    var replaceHTML = (elements[i].tagName.toLowerCase() === CONSTANT.DEFAULT_TAG ? elements[i].innerHTML :\r\n                        elements[i].outerHTML);\r\n                    var innerHTML = this.domNode.createTagString(newTag, null, replaceHTML);\r\n                    var collectionString = openTag + innerHTML + closeTag;\r\n                    this.domNode.replaceWith(elements[i], collectionString);\r\n                    var element = this.parent.editableElement.querySelector('.e-rte-replace-tag');\r\n                    element.removeAttribute('class');\r\n                }\r\n            }\r\n        }\r\n        this.cleanNode();\r\n        this.parent.editableElement.focus();\r\n        this.saveSelection = this.domNode.saveMarker(this.saveSelection);\r\n        this.saveSelection.restore();\r\n    };\r\n    Lists.prototype.isRevert = function (nodes, tagName) {\r\n        var isRevert = true;\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (nodes[i].tagName !== 'LI') {\r\n                return false;\r\n            }\r\n            if (nodes[i].parentNode.tagName !== tagName) {\r\n                isRevert = false;\r\n            }\r\n        }\r\n        return isRevert;\r\n    };\r\n    Lists.prototype.checkLists = function (nodes, tagName) {\r\n        var nodesTemp = [];\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            var node = nodes[i].parentNode;\r\n            if (nodes[i].tagName === 'LI' && node.tagName !== tagName && nodesTemp.indexOf(node) < 0) {\r\n                nodesTemp.push(node);\r\n            }\r\n        }\r\n        for (var j = nodesTemp.length - 1; j >= 0; j--) {\r\n            var h = nodesTemp[j];\r\n            var replace = '<' + tagName.toLowerCase() + ' '\r\n                + this.domNode.attributes(h) + '>' + h.innerHTML + '</' + tagName.toLowerCase() + '>';\r\n            this.domNode.replaceWith(nodesTemp[j], replace);\r\n        }\r\n    };\r\n    Lists.prototype.cleanNode = function () {\r\n        var liParents = this.parent.editableElement.querySelectorAll('ol + ol, ul + ul');\r\n        for (var c = 0; c < liParents.length; c++) {\r\n            var node = liParents[c];\r\n            if (this.domNode.isList(node.previousSibling) &&\r\n                this.domNode.openTagString(node) === this.domNode.openTagString(node.previousSibling)) {\r\n                var contentNodes = this.domNode.contents(node);\r\n                for (var f = 0; f < contentNodes.length; f++) {\r\n                    node.previousSibling.appendChild(contentNodes[f]);\r\n                }\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        }\r\n    };\r\n    Lists.prototype.findUnSelected = function (temp, elements) {\r\n        temp = temp.slice().reverse();\r\n        if (temp.length > 0) {\r\n            var rightIndent = [];\r\n            var indentElements = [];\r\n            var lastElement = elements[elements.length - 1];\r\n            var lastElementChild = [];\r\n            var childElements = [];\r\n            lastElementChild = (lastElement.childNodes);\r\n            for (var z = 0; z < lastElementChild.length; z++) {\r\n                if (lastElementChild[z].tagName === 'OL' || lastElementChild[z].tagName === 'UL') {\r\n                    var childLI = lastElementChild[z]\r\n                        .querySelectorAll('li');\r\n                    if (childLI.length > 0) {\r\n                        for (var y = 0; y < childLI.length; y++) {\r\n                            childElements.push(childLI[y]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (var i = 0; i < childElements.length; i++) {\r\n                var count = 0;\r\n                for (var j = 0; j < temp.length; j++) {\r\n                    if (!childElements[i].contains((temp[j]))) {\r\n                        count = count + 1;\r\n                    }\r\n                }\r\n                if (count === temp.length) {\r\n                    indentElements.push(childElements[i]);\r\n                }\r\n            }\r\n            if (indentElements.length > 0) {\r\n                for (var x = 0; x < indentElements.length; x++) {\r\n                    if (this.domNode.contents(indentElements[x])[0].nodeName !== 'OL' &&\r\n                        this.domNode.contents(indentElements[x])[0].nodeName !== 'UL') {\r\n                        rightIndent.push(indentElements[x]);\r\n                    }\r\n                }\r\n            }\r\n            if (rightIndent.length > 0) {\r\n                this.nestedList(rightIndent);\r\n            }\r\n        }\r\n    };\r\n    Lists.prototype.revertList = function (elements) {\r\n        var temp = [];\r\n        for (var i = elements.length - 1; i >= 0; i--) {\r\n            for (var j = i - 1; j >= 0; j--) {\r\n                if (elements[j].contains((elements[i])) || elements[j] === elements[i]) {\r\n                    temp.push(elements[i]);\r\n                    elements.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.findUnSelected(temp, elements);\r\n        var viewNode = [];\r\n        for (var i = 0; i < elements.length; i++) {\r\n            var element = elements[i];\r\n            var parentNode = elements[i].parentNode;\r\n            var className = element.getAttribute('class');\r\n            if (temp.length === 0) {\r\n                var siblingList = elements[i].querySelectorAll('ul, ol');\r\n                var firstNode = siblingList[0];\r\n                if (firstNode) {\r\n                    var child = firstNode\r\n                        .querySelectorAll('li');\r\n                    if (child) {\r\n                        var nestedElement = createElement(firstNode.tagName);\r\n                        append([nestedElement], firstNode.parentNode);\r\n                        var nestedElementLI = createElement('li', { styles: 'list-style-type: none;' });\r\n                        append([nestedElementLI], nestedElement);\r\n                        append([firstNode], nestedElementLI);\r\n                    }\r\n                }\r\n            }\r\n            if (element.parentNode.insertBefore(this.closeTag(parentNode.tagName), element),\r\n                'LI' === parentNode.parentNode.tagName) {\r\n                element.parentNode.insertBefore(this.closeTag('LI'), element);\r\n            }\r\n            else {\r\n                var classAttr = '';\r\n                if (className) {\r\n                    classAttr += ' class=\"' + className + '\"';\r\n                }\r\n                if (CONSTANT.DEFAULT_TAG && 0 === element.querySelectorAll(CONSTANT.BLOCK_TAGS.join(', ')).length) {\r\n                    var wrapper = '<' + CONSTANT.DEFAULT_TAG + classAttr + ' class=\"e-rte-wrap-inner\"' +\r\n                        this.domNode.attributes(parentNode) + '></' + CONSTANT.DEFAULT_TAG + '>';\r\n                    this.domNode.wrapInner(element, this.domNode.parseHTMLFragment(wrapper));\r\n                }\r\n                else if (this.domNode.contents(element)[0].nodeType === 3) {\r\n                    var replace = this.domNode.createTagString(CONSTANT.DEFAULT_TAG, parentNode, this.parent.domNode.encode(this.domNode.contents(element)[0].textContent));\r\n                    this.domNode.replaceWith(this.domNode.contents(element)[0], replace);\r\n                }\r\n                else if (this.domNode.contents(element)[0].classList.contains(markerClassName.startSelection) ||\r\n                    this.domNode.contents(element)[0].classList.contains(markerClassName.endSelection)) {\r\n                    var replace = this.domNode.createTagString(CONSTANT.DEFAULT_TAG, parentNode, this.domNode.contents(element)[0].outerHTML);\r\n                    this.domNode.replaceWith(this.domNode.contents(element)[0], replace);\r\n                }\r\n                else {\r\n                    var childNode = element.firstChild;\r\n                    className = childNode.getAttribute('class');\r\n                    attributes(childNode, this.domNode.rawAttributes(parentNode));\r\n                    if (className && childNode.getAttribute('class')) {\r\n                        attributes(childNode, { 'class': className + ' ' + childNode.getAttribute('class') });\r\n                    }\r\n                }\r\n                append([this.openTag('LI')], element);\r\n                prepend([this.closeTag('LI')], element);\r\n            }\r\n            this.domNode.insertAfter(this.openTag(parentNode.tagName), element);\r\n            if (parentNode.parentNode.tagName === 'LI') {\r\n                parentNode = parentNode.parentNode.parentNode;\r\n            }\r\n            if (viewNode.indexOf(parentNode) < 0) {\r\n                viewNode.push(parentNode);\r\n            }\r\n        }\r\n        for (var i = 0; i < viewNode.length; i++) {\r\n            var node = viewNode[i];\r\n            var nodeInnerHtml = node.innerHTML;\r\n            var closeTag = /<span class=\"e-rte-list-close-([a-z]*)\"><\\/span>/g;\r\n            var openTag = /<span class=\"e-rte-list-open-([a-z]*)\"><\\/span>/g;\r\n            nodeInnerHtml = nodeInnerHtml.replace(closeTag, '</$1>');\r\n            nodeInnerHtml = nodeInnerHtml.replace(openTag, '<$1 ' + this.domNode.attributes(node) + '>');\r\n            this.domNode.replaceWith(node, this.domNode.openTagString(node) + nodeInnerHtml.trim() + this.domNode.closeTagString(node));\r\n        }\r\n        var emptyUl = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty');\r\n        for (var i = 0; i < emptyUl.length; i++) {\r\n            detach(emptyUl[i]);\r\n        }\r\n        var emptyLi = this.parent.editableElement.querySelectorAll('li:empty');\r\n        for (var i = 0; i < emptyLi.length; i++) {\r\n            detach(emptyLi[i]);\r\n        }\r\n    };\r\n    Lists.prototype.openTag = function (type) {\r\n        return this.domNode.parseHTMLFragment('<span class=\"e-rte-list-open-' + type.toLowerCase() + '\"></span>');\r\n    };\r\n    Lists.prototype.closeTag = function (type) {\r\n        return this.domNode.parseHTMLFragment('<span class=\"e-rte-list-close-' + type.toLowerCase() + '\"></span>');\r\n    };\r\n    return Lists;\r\n}());\r\nexport { Lists };\r\n",null]}