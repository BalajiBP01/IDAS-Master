{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\table.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\table.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import * as CONSTANT from './../base/constant';\r\n/**\r\n * Link internal component\r\n * @hidden\r\n */\r\nvar MDTable = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the Formats plugin\r\n     * @hidden\r\n     */\r\n    function MDTable(parent) {\r\n        this.parent = parent;\r\n        this.selection = this.parent.markdownSelection;\r\n        this.addEventListener();\r\n    }\r\n    MDTable.prototype.addEventListener = function () {\r\n        this.parent.observer.on(CONSTANT.MD_TABLE, this.createTable, this);\r\n    };\r\n    MDTable.prototype.removeEventListener = function () {\r\n        this.parent.observer.off(CONSTANT.MD_TABLE, this.createTable);\r\n    };\r\n    MDTable.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    MDTable.prototype.createTable = function (e) {\r\n        var dummy = document;\r\n        var textArea = this.parent.element;\r\n        textArea.focus();\r\n        var start = textArea.selectionStart;\r\n        var end = textArea.selectionEnd;\r\n        var end3;\r\n        var text = this.selection.getSelectedText(textArea);\r\n        var end1;\r\n        var textEmpty;\r\n        var textAreaInitial;\r\n        if (start !== end) {\r\n            textEmpty = text.replace(text, '');\r\n            end1 = end;\r\n            end3 = start;\r\n            text = textEmpty;\r\n        }\r\n        else {\r\n            end3 = end;\r\n        }\r\n        text += this.textUnEmpty(start, end3, dummy, text, end1, textArea);\r\n        for (var i = 1; i <= 2; i++) {\r\n            text += '|';\r\n            for (var j = 1; j <= 2; j++) {\r\n                if (i === 1) {\r\n                    text += e.item.headingText + ' ' + j + '|';\r\n                }\r\n                else {\r\n                    text += '---------|';\r\n                }\r\n            }\r\n            var dummyElement = dummy.createElement('div');\r\n            dummyElement.innerHTML = '\\n';\r\n            var text1 = dummyElement.textContent;\r\n            text += text1;\r\n        }\r\n        for (var i = 1; i <= 2; i++) {\r\n            text += '|';\r\n            for (var j = 1; j <= 2; j++) {\r\n                text += e.item.colText + ' ' + this.convertToLetters(i) + j + '|';\r\n            }\r\n            var dummyElement = dummy.createElement('div');\r\n            dummyElement.innerHTML = '\\n';\r\n            var text1 = dummyElement.textContent;\r\n            text += text1;\r\n        }\r\n        text = this.textUnEmpty(start, end3, dummy, text, end1, textArea);\r\n        textAreaInitial = textArea.value;\r\n        if (start !== end) {\r\n            this.startNotEqualEnd(start, end, text, textArea, textAreaInitial, e);\r\n        }\r\n        else if (start === 0 && end === 0) {\r\n            textArea.value = textArea.value.substr(0, start)\r\n                + text + textArea.value.substr(end, textArea.value.length);\r\n            if (textAreaInitial.length) {\r\n                this.restore(textArea, start + 3, end + 12, e);\r\n            }\r\n            else {\r\n                this.restore(textArea, start + 1, end + 10, e);\r\n            }\r\n        }\r\n        else {\r\n            this.startEqualEnd(start, end, text, textArea, textAreaInitial, e);\r\n        }\r\n    };\r\n    MDTable.prototype.startEqualEnd = function (start, end, text, textArea, textAreaInitial, e) {\r\n        var parentText = this.selection.getSelectedParentPoints(textArea);\r\n        var selectedLine = parentText.length - 1;\r\n        var formatSplit;\r\n        formatSplit = parentText[selectedLine].text.split(' ', 2);\r\n        var textApplyFormat;\r\n        var parentTextLength;\r\n        if (formatSplit.length > 1) {\r\n            parentTextLength = formatSplit[0].length + formatSplit[1].length + 1;\r\n        }\r\n        textApplyFormat = textArea.value.substring(end, textArea.value.length);\r\n        if (start === parentTextLength) {\r\n            textArea.value = textArea.value.substr(0, start)\r\n                + text + textArea.value.substr(end, textArea.value.length);\r\n            this.callRestore(textArea, start, end, e, textAreaInitial);\r\n        }\r\n        else if (textArea.value[start] === '2' && textArea.value[start + 1] === '.') {\r\n            text = '';\r\n            textArea.value = textArea.value.substr(0, start)\r\n                + text + textArea.value.substr(end, textArea.value.length);\r\n        }\r\n        else if (!(textArea.value[start] === '#' || textArea.value[start - 1] === '#' ||\r\n            textArea.value[start - 2] === '#' || textArea.value[start] === '2.' ||\r\n            textArea.value[start - 1] === '2.' || textArea.value[start - 2] === '2.' || (textArea.value[start - 1] === '2' &&\r\n            textArea.value[start] === '.') || (textArea.value[start - 1] === '.' && textArea.value[start] === ' ') ||\r\n            (textArea.value[start - 1] === ' ' &&\r\n                textArea.value[start - 2] === '.' && textArea.value[start - 3] === '2') ||\r\n            textArea.value[start] === '>' || textArea.value[start - 1] === '>' || textArea.value[start - 2] === '>' ||\r\n            textArea.value[start] === '+' || textArea.value[start - 1] === '+' || textArea.value[start - 2] === '+')) {\r\n            if (!(parentText[0].text.match('#') || parentText[0].text.match('>') ||\r\n                parentText[0].text.match('2.'))) {\r\n                formatSplit[0] = '';\r\n            }\r\n            text += textApplyFormat.replace(textApplyFormat, (formatSplit[0] + ' ' + textApplyFormat));\r\n            textArea.value = textArea.value.substr(0, start)\r\n                + text;\r\n            this.callRestore(textArea, start, end, e, textAreaInitial);\r\n        }\r\n        else {\r\n            text = '';\r\n            textArea.value = textArea.value.substr(0, start)\r\n                + text + textArea.value.substr(end, textArea.value.length);\r\n        }\r\n    };\r\n    MDTable.prototype.startNotEqualEnd = function (start, end, text, textArea, textAreaInitial, e) {\r\n        var parentText = this.selection.getSelectedParentPoints(textArea);\r\n        var textApplyFormat;\r\n        textApplyFormat = textArea.value.substring(end, textArea.value.length);\r\n        if (parentText.length < 2) {\r\n            this.singleLine(start, end, text, textArea, parentText, textApplyFormat, textAreaInitial, e);\r\n        }\r\n        else {\r\n            this.multipleLines(start, end, text, textArea, parentText, textApplyFormat, textAreaInitial, e);\r\n        }\r\n    };\r\n    MDTable.prototype.singleLine = function (start, end, text, textArea, parentText, textApplyFormat, textAreaInitial, e) {\r\n        var formatSplit;\r\n        formatSplit = parentText[0].text.split(' ', 2);\r\n        var selectedText;\r\n        selectedText = this.selection.getSelectedText(textArea);\r\n        var selectedTextSplit;\r\n        selectedTextSplit = selectedText.split(' ', 2);\r\n        if (selectedTextSplit.length === 2) {\r\n            this.selectedSplitText(start, end, text, textArea, selectedText, parentText, formatSplit, textApplyFormat, e, textAreaInitial, selectedTextSplit);\r\n        }\r\n        else {\r\n            if (textArea.value[start - 1] === ' ' && (textArea.value[start - 2] === '.' || textArea.value[start - 2] === '#' ||\r\n                textArea.value[start - 2] === '>' || textArea.value[start - 2] === '+')) {\r\n                text = '';\r\n                start += selectedText.length;\r\n                textArea.value = textArea.value.substr(0, start)\r\n                    + text + textArea.value.substr(end, textArea.value.length);\r\n            }\r\n            else if (textArea.value[start] === '>' || textArea.value[start] === '+' || (textArea.value[start] === '2' &&\r\n                textArea.value[start + 1] === '.') || (textArea.value[start] === '#' && textArea.value[start - 1] !== '#')) {\r\n                if (textArea.value[end - 2] === '>' || textArea.value[end - 1] === '+' || textArea.value[end - 1] === '2' ||\r\n                    textArea.value[end - 1] === '#' || (textArea.value[end - 1] === '.' && textArea.value[end - 2] === '2') ||\r\n                    (textArea.value[end - 1] === ' ' && (textArea.value[end - 2] === '.' || textArea.value[end - 2] === '#' ||\r\n                        textArea.value[end - 2] === '>' || textArea.value[end - 2] === '+'))) {\r\n                    text = '';\r\n                    start += selectedText.length;\r\n                    textArea.value = textArea.value.substr(0, start)\r\n                        + text + textArea.value.substr(end, textArea.value.length);\r\n                }\r\n                else {\r\n                    if (!(parentText[0].text.match('#') || parentText[0].text.match('>') ||\r\n                        parentText[0].text.match('2.'))) {\r\n                        formatSplit[0] = '';\r\n                    }\r\n                    text += textApplyFormat.replace(textApplyFormat, (formatSplit[0] + ' ' + textApplyFormat));\r\n                    textArea.value = textArea.value.substr(0, start)\r\n                        + text;\r\n                    this.callRestore(textArea, start, end, e, textAreaInitial);\r\n                }\r\n            }\r\n            else {\r\n                if (end === formatSplit[0].length + formatSplit[1].length + 1) {\r\n                    textArea.value = textArea.value.substr(0, start)\r\n                        + text + textArea.value.substr(end, textArea.value.length);\r\n                    this.callRestore(textArea, start, end, e, textAreaInitial);\r\n                }\r\n                else {\r\n                    if (!(parentText[0].text.match('#') || parentText[0].text.match('>') ||\r\n                        parentText[0].text.match('2.'))) {\r\n                        formatSplit[0] = '';\r\n                    }\r\n                    text += textApplyFormat.replace(textApplyFormat, (formatSplit[0] + ' ' + textApplyFormat));\r\n                    textArea.value = textArea.value.substr(0, start)\r\n                        + text;\r\n                    this.callRestore(textArea, start, end, e, textAreaInitial);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    MDTable.prototype.selectedSplitText = function (start, end, text, textArea, selectedText, parentText, formatSplit, textApplyFormat, e, textAreaInitial, selectedTextSplit) {\r\n        if (selectedTextSplit[0] === '') {\r\n            if (textArea.value[start - 1] === '#' || textArea.value[start - 1] === '.' ||\r\n                textArea.value[start - 1] === '>' || textArea.value[start - 1] === '+') {\r\n                text = '';\r\n                start += selectedText.length;\r\n                textArea.value = textArea.value.substr(0, start)\r\n                    + text + textArea.value.substr(end, textArea.value.length);\r\n            }\r\n            else {\r\n                if (!(parentText[0].text.match('#') || parentText[0].text.match('>') ||\r\n                    parentText[0].text.match('2.'))) {\r\n                    formatSplit[0] = '';\r\n                }\r\n                text += textApplyFormat.replace(textApplyFormat, (formatSplit[0] + ' ' + textApplyFormat));\r\n                textArea.value = textArea.value.substr(0, start)\r\n                    + text;\r\n                this.callRestore(textArea, start, end, e, textAreaInitial);\r\n            }\r\n        }\r\n        else {\r\n            if (textArea.value[start] === '>' || textArea.value[start] === '+' || textArea.value[start] === '#' ||\r\n                textArea.value[start] === '2' || (textArea.value[start] === '.' && textArea.value[start - 1] === '2')) {\r\n                if (selectedText.length === (formatSplit[0].length + formatSplit[1].length + 1)) {\r\n                    textArea.value = textArea.value.substr(0, start)\r\n                        + text + textArea.value.substr(end, textArea.value.length);\r\n                }\r\n                else if (textArea.value[start] === '>' || textArea.value[start] === '+' || (textArea.value[start] === '2' &&\r\n                    textArea.value[start + 1] === '.') || (textArea.value[start] === '#' && textArea.value[start - 1] !== '#')) {\r\n                    if (!(textArea.value[end - 2] === '>' || textArea.value[end - 1] === '+' || textArea.value[end - 1] === '#' ||\r\n                        (textArea.value[end - 1] === '.' && textArea.value[end - 2] === '2') || (textArea.value[end - 1] === ' ' &&\r\n                        (textArea.value[end - 2] === '.' || textArea.value[end - 2] === '#' || textArea.value[end - 2] === '>' ||\r\n                            textArea.value[end - 2] === '+')))) {\r\n                        if (!(parentText[0].text.match('#') || parentText[0].text.match('>') ||\r\n                            parentText[0].text.match('2.'))) {\r\n                            formatSplit[0] = '';\r\n                        }\r\n                        text += textApplyFormat.replace(textApplyFormat, (formatSplit[0] + ' ' + textApplyFormat));\r\n                        textArea.value = textArea.value.substr(0, start)\r\n                            + text;\r\n                        this.callRestore(textArea, start, end, e, textAreaInitial);\r\n                    }\r\n                    else {\r\n                        text = '';\r\n                        start += selectedText.length;\r\n                        textArea.value = textArea.value.substr(0, start)\r\n                            + text + textArea.value.substr(end, textArea.value.length);\r\n                    }\r\n                }\r\n                else {\r\n                    text = '';\r\n                    start += selectedText.length;\r\n                    textArea.value = textArea.value.substr(0, start)\r\n                        + text + textArea.value.substr(end, textArea.value.length);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    MDTable.prototype.multipleLines = function (start, end, text, textArea, parentText, textApplyFormat, textAreaInitial, e) {\r\n        var lastSelectedLineIndex = parentText.length - 1;\r\n        var formatLastLine;\r\n        formatLastLine = parentText[lastSelectedLineIndex].text.split(' ', 2);\r\n        var formatFirstLine;\r\n        formatFirstLine = parentText[0].text.split(' ', 2);\r\n        var selectedText;\r\n        selectedText = this.selection.getSelectedText(textArea);\r\n        if (textArea.value[start - 1] === '#' || (textArea.value[start - 1] === '.' && textArea.value[start - 2] === '2') ||\r\n            textArea.value[start - 1] === '>' || textArea.value[start - 1] === '+' ||\r\n            textArea.value[start - 1] === '2' || (textArea.value[start - 1] === ' ' &&\r\n            (textArea.value[start - 2] === '#' || textArea.value[start - 2] === '>' ||\r\n                textArea.value[start - 2] === '+' || textArea.value[start - 2] === '.'))) {\r\n            text = '';\r\n            start += selectedText.length;\r\n            textArea.value = textArea.value.substr(0, start)\r\n                + text + textArea.value.substr(end, textArea.value.length);\r\n        }\r\n        else if (textArea.value[end] === '#' || textArea.value[end] === '>' || textArea.value[end] === '+' ||\r\n            textArea.value[end] === '2' || (textArea.value[end] === '.' && textArea.value[end - 1] === '2') ||\r\n            (textArea.value[end - 1] === ' ' && (textArea.value[end - 2] === '.' || textArea.value[end - 2] === '#' ||\r\n                textArea.value[end - 2] === '>' || textArea.value[end - 2] === '+')) || (textArea.value[end] === ' ' &&\r\n            (textArea.value[end - 1] === '#' || textArea.value[end - 1] === '>' || textArea.value[end - 1] === '+' ||\r\n                textArea.value[end - 1] === '.'))) {\r\n            text = '';\r\n            start += selectedText.length;\r\n            textArea.value = textArea.value.substr(0, start)\r\n                + text + textArea.value.substr(end, textArea.value.length);\r\n        }\r\n        else {\r\n            if (!(parentText[lastSelectedLineIndex].text.match('#') ||\r\n                parentText[lastSelectedLineIndex].text.match('>') ||\r\n                parentText[lastSelectedLineIndex].text.match('2.'))) {\r\n                formatLastLine[0] = '';\r\n            }\r\n            text += textApplyFormat.replace(textApplyFormat, (formatLastLine[0] + ' ' + textApplyFormat));\r\n            textArea.value = textArea.value.substr(0, start)\r\n                + text;\r\n            this.callRestore(textArea, start, end, e, textAreaInitial);\r\n        }\r\n    };\r\n    MDTable.prototype.convertToLetters = function (rowNumber) {\r\n        var baseChar = ('A').charCodeAt(0);\r\n        var letters = '';\r\n        do {\r\n            rowNumber -= 1;\r\n            letters = String.fromCharCode(baseChar + (rowNumber % 26)) + letters;\r\n            rowNumber = (rowNumber / 26) >> 0;\r\n        } while (rowNumber > 0);\r\n        return letters;\r\n    };\r\n    MDTable.prototype.textUnEmpty = function (start, end, dummy, text, end1, textArea) {\r\n        if (start === end && ((start !== 0 && end !== 0) || end1 !== 0)) {\r\n            var dummyElement = dummy.createElement('div');\r\n            if (!(text.length > 0)) {\r\n                if (textArea.value.length > 0) {\r\n                    dummyElement.innerHTML = '\\n\\n';\r\n                }\r\n                else {\r\n                    dummyElement.innerHTML = '';\r\n                }\r\n            }\r\n            else {\r\n                dummyElement.innerHTML = '\\n';\r\n            }\r\n            var text1 = dummyElement.textContent;\r\n            return text += text1;\r\n        }\r\n        else {\r\n            return text;\r\n        }\r\n    };\r\n    MDTable.prototype.callRestore = function (textArea, start, end, e, textAreaInitial) {\r\n        if (textAreaInitial.length) {\r\n            this.restore(textArea, start + 3, start + 12, e);\r\n        }\r\n        else {\r\n            this.restore(textArea, start + 1, end + 10, e);\r\n        }\r\n    };\r\n    MDTable.prototype.restore = function (textArea, start, end, event) {\r\n        this.selection.save(start, end);\r\n        this.selection.restore(textArea);\r\n        if (event && event.callBack) {\r\n            event.callBack({\r\n                requestType: event.subCommand,\r\n                selectedText: this.selection.getSelectedText(textArea),\r\n                editorMode: 'Markdown',\r\n                event: event.event\r\n            });\r\n        }\r\n    };\r\n    return MDTable;\r\n}());\r\nexport { MDTable };\r\n",null]}