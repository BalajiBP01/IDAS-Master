{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\view-source.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\view-source.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { removeClass, selectAll, isNullOrUndefined, EventHandler } from '@syncfusion/ej2-base';\r\nimport * as events from '../base/constant';\r\nimport { CLS_EXPAND_OPEN, CLS_TB_ITEM, CLS_ACTIVE } from '../base/classes';\r\nimport * as CONSTANT from '../../common/constant';\r\nimport { RenderType } from '../base/enum';\r\nimport { KeyboardEvents } from '../actions/keyboard';\r\n/**\r\n * Content module is used to render RichTextEditor content\r\n * @hidden\r\n */\r\nvar ViewSource = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for view source module\r\n     */\r\n    function ViewSource(parent, locator) {\r\n        this.parent = parent;\r\n        var serviceLocator = locator;\r\n        this.rendererFactory = serviceLocator.getService('rendererFactory');\r\n        this.addEventListener();\r\n    }\r\n    ViewSource.prototype.addEventListener = function () {\r\n        this.parent.on(events.sourceCode, this.sourceCode, this);\r\n        this.parent.on(events.initialEnd, this.onInitialEnd, this);\r\n        this.parent.on(events.updateSource, this.updateSourceCode, this);\r\n    };\r\n    ViewSource.prototype.onInitialEnd = function () {\r\n        this.parent.formatter.editorManager.observer.on(CONSTANT.KEY_DOWN_HANDLER, this.onKeyDown, this);\r\n    };\r\n    ViewSource.prototype.removeEventListener = function () {\r\n        this.unWireEvent();\r\n        this.parent.off(events.sourceCode, this.sourceCode);\r\n        this.parent.off(events.updateSource, this.updateSourceCode);\r\n        this.parent.off(events.initialEnd, this.onInitialEnd);\r\n        this.parent.formatter.editorManager.observer.off(CONSTANT.KEY_DOWN_HANDLER, this.onKeyDown);\r\n    };\r\n    ViewSource.prototype.getSourceCode = function () {\r\n        return this.parent.createElement('textarea', { className: 'e-rte-srctextarea' });\r\n    };\r\n    ViewSource.prototype.wireEvent = function (element) {\r\n        this.keyboardModule = new KeyboardEvents(element, {\r\n            keyAction: this.previewKeyDown.bind(this), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'\r\n        });\r\n        EventHandler.add(this.previewElement, 'mousedown', this.mouseDownHandler, this);\r\n    };\r\n    ViewSource.prototype.unWireEvent = function () {\r\n        if (this.keyboardModule) {\r\n            this.keyboardModule.destroy();\r\n        }\r\n        if (this.previewElement) {\r\n            EventHandler.remove(this.previewElement, 'mousedown', this.mouseDownHandler);\r\n        }\r\n    };\r\n    ViewSource.prototype.wireBaseKeyDown = function () {\r\n        this.parent.keyboardModule = new KeyboardEvents(this.contentModule.getEditPanel(), {\r\n            keyAction: this.parent.keyDown.bind(this.parent), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'\r\n        });\r\n    };\r\n    ViewSource.prototype.unWireBaseKeyDown = function () {\r\n        this.parent.keyboardModule.destroy();\r\n    };\r\n    ViewSource.prototype.mouseDownHandler = function (e) {\r\n        this.parent.notify(events.sourceCodeMouseDown, { args: e });\r\n    };\r\n    ViewSource.prototype.previewKeyDown = function (event) {\r\n        switch (event.action) {\r\n            case 'html-source':\r\n                this.updateSourceCode(event);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    };\r\n    ViewSource.prototype.onKeyDown = function (e) {\r\n        switch (e.event.action) {\r\n            case 'html-source':\r\n                e.event.preventDefault();\r\n                this.sourceCode(e);\r\n                e.callBack({\r\n                    requestType: 'SourceCode',\r\n                    editorMode: 'HTML',\r\n                    event: e.event\r\n                });\r\n                break;\r\n        }\r\n    };\r\n    ViewSource.prototype.sourceCode = function (args) {\r\n        this.parent.isBlur = false;\r\n        this.parent.trigger(events.actionBegin, { requestType: 'SourceCode', targetItem: 'SourceCode', args: args });\r\n        var tbItems = selectAll('.' + CLS_TB_ITEM, this.parent.element);\r\n        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\r\n        this.parent.notify(events.updateToolbarItem, {\r\n            targetItem: 'SourceCode', updateItem: 'Preview',\r\n            baseToolbar: this.parent.getBaseToolbarObject()\r\n        });\r\n        if (isNullOrUndefined(this.previewElement)) {\r\n            this.previewElement = this.getSourceCode();\r\n        }\r\n        this.parent.updateValueData();\r\n        if (this.parent.iframeSettings.enable) {\r\n            var rteContent = void 0;\r\n            if (isNullOrUndefined(this.parent.element.querySelector('#' + this.parent.element.id + '_source-view'))) {\r\n                rteContent = this.parent.createElement('div', {\r\n                    className: 'e-source-content', id: this.parent.element.id + '_source-view'\r\n                });\r\n            }\r\n            else {\r\n                rteContent = this.parent.element.querySelector('#' + this.parent.element.id + '_source-view');\r\n            }\r\n            rteContent.appendChild(this.previewElement);\r\n            this.parent.element.appendChild(rteContent);\r\n            rteContent.style.height = this.contentModule.getPanel().style.height;\r\n            rteContent.style.marginTop = this.contentModule.getPanel().style.marginTop;\r\n            this.getPanel().value = this.parent.value;\r\n            this.contentModule.getPanel().style.display = 'none';\r\n            rteContent.style.display = 'block';\r\n        }\r\n        else {\r\n            this.contentModule.getPanel().appendChild(this.previewElement);\r\n            this.getPanel().value = (this.contentModule.getEditPanel().innerHTML === '<p><br></p>' ||\r\n                this.contentModule.getEditPanel().innerHTML.length === 12) ||\r\n                (this.contentModule.getEditPanel().childNodes.length === 1 &&\r\n                    this.contentModule.getEditPanel().childNodes[0].tagName === 'P' &&\r\n                    this.contentModule.getEditPanel().innerHTML.length === 7) ? null : this.parent.value;\r\n            this.contentModule.getEditPanel().style.display = 'none';\r\n            this.previewElement.style.display = 'block';\r\n        }\r\n        this.parent.isBlur = false;\r\n        this.parent.disableToolbarItem(this.parent.toolbarSettings.items);\r\n        this.parent.enableToolbarItem('SourceCode');\r\n        if (this.parent.getToolbar()) {\r\n            removeClass([this.parent.getToolbar()], [CLS_EXPAND_OPEN]);\r\n        }\r\n        removeClass(tbItems, [CLS_ACTIVE]);\r\n        this.parent.setContentHeight('sourceCode');\r\n        this.wireEvent(this.previewElement);\r\n        this.unWireBaseKeyDown();\r\n        this.previewElement.focus();\r\n        this.parent.updateValue();\r\n        if (!isNullOrUndefined(this.parent.placeholder)) {\r\n            var placeHolderWrapper = this.parent.element.querySelector('.rte-placeholder');\r\n            placeHolderWrapper.style.display = 'none';\r\n        }\r\n        this.parent.trigger(events.actionComplete, { requestType: 'SourceCode', targetItem: 'SourceCode', args: args });\r\n        this.parent.invokeChangeEvent();\r\n    };\r\n    ViewSource.prototype.updateSourceCode = function (args) {\r\n        this.parent.isBlur = false;\r\n        this.parent.trigger(events.actionBegin, { requestType: 'Preview', targetItem: 'Preview', args: args });\r\n        var editHTML = this.getPanel();\r\n        this.parent.notify(events.updateToolbarItem, {\r\n            targetItem: 'Preview', updateItem: 'SourceCode',\r\n            baseToolbar: this.parent.getBaseToolbarObject()\r\n        });\r\n        if (this.parent.iframeSettings.enable) {\r\n            editHTML.parentElement.style.display = 'none';\r\n            this.contentModule.getPanel().style.display = 'block';\r\n            this.contentModule.getEditPanel().innerHTML = editHTML.value;\r\n        }\r\n        else {\r\n            editHTML.style.display = 'none';\r\n            this.contentModule.getEditPanel().style.display = 'block';\r\n            this.contentModule.getEditPanel().innerHTML = editHTML.value;\r\n        }\r\n        this.parent.isBlur = false;\r\n        this.parent.enableToolbarItem(this.parent.toolbarSettings.items);\r\n        if (this.parent.getToolbar()) {\r\n            removeClass([this.parent.getToolbar()], [CLS_EXPAND_OPEN]);\r\n        }\r\n        this.parent.setContentHeight();\r\n        this.unWireEvent();\r\n        this.wireBaseKeyDown();\r\n        this.contentModule.getEditPanel().focus();\r\n        this.parent.updateValue();\r\n        if (!isNullOrUndefined(this.parent.placeholder) && this.contentModule.getEditPanel().innerText.length === 0) {\r\n            var placeHolderWrapper = this.parent.element.querySelector('.rte-placeholder');\r\n            placeHolderWrapper.style.display = 'block';\r\n        }\r\n        this.parent.trigger(events.actionComplete, { requestType: 'Preview', targetItem: 'Preview', args: args });\r\n        this.parent.formatter.enableUndo(this.parent);\r\n        this.parent.invokeChangeEvent();\r\n    };\r\n    ViewSource.prototype.getPanel = function () {\r\n        return this.parent.element.querySelector('.e-rte-srctextarea');\r\n    };\r\n    ViewSource.prototype.getViewPanel = function () {\r\n        return (this.parent.iframeSettings.enable && this.getPanel()) ? this.getPanel().parentElement : this.getPanel();\r\n    };\r\n    /**\r\n     * Destroy the entire RichTextEditor.\r\n     * @return {void}\r\n     */\r\n    ViewSource.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    return ViewSource;\r\n}());\r\nexport { ViewSource };\r\n",null]}