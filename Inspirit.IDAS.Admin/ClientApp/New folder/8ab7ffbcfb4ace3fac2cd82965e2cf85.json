{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\insert-methods.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\insert-methods.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["/**\r\n * Node appending methods.\r\n * @hidden\r\n */\r\nvar InsertMethods = /*@__PURE__*/ (function () {\r\n    function InsertMethods() {\r\n    }\r\n    InsertMethods.WrapBefore = function (textNode, parentNode, isAfter) {\r\n        parentNode.innerText = textNode.textContent;\r\n        (!isAfter) ? this.AppendBefore(parentNode, textNode) : this.AppendBefore(parentNode, textNode, true);\r\n        if (textNode.parentNode) {\r\n            textNode.parentNode.removeChild(textNode);\r\n        }\r\n        return parentNode.childNodes[0];\r\n    };\r\n    InsertMethods.Wrap = function (childNode, parentNode) {\r\n        this.AppendBefore(parentNode, childNode);\r\n        parentNode.appendChild(childNode);\r\n        return childNode;\r\n    };\r\n    InsertMethods.unwrap = function (node) {\r\n        var parent = node.parentNode;\r\n        var child = [];\r\n        for (; node.firstChild; null) {\r\n            child.push(parent.insertBefore(node.firstChild, node));\r\n        }\r\n        parent.removeChild(node);\r\n        return child;\r\n    };\r\n    InsertMethods.AppendBefore = function (textNode, parentNode, isAfter) {\r\n        return (parentNode.parentNode) ? ((!isAfter) ? parentNode.parentNode.insertBefore(textNode, parentNode)\r\n            : parentNode.parentNode.insertBefore(textNode, parentNode.nextSibling)) :\r\n            parentNode;\r\n    };\r\n    return InsertMethods;\r\n}());\r\nexport { InsertMethods };\r\n",null]}