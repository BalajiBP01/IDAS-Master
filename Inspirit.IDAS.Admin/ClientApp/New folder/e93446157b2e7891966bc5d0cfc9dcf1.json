{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\table.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\table.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { createElement, closest, detach } from '@syncfusion/ej2-base';\r\nimport * as CONSTANT from './../base/constant';\r\nimport { InsertHtml } from './inserthtml';\r\n/**\r\n * Link internal component\r\n * @hidden\r\n */\r\nvar TableCommand = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the Formats plugin\r\n     * @hidden\r\n     */\r\n    function TableCommand(parent) {\r\n        this.parent = parent;\r\n        this.addEventListener();\r\n    }\r\n    TableCommand.prototype.addEventListener = function () {\r\n        this.parent.observer.on(CONSTANT.TABLE, this.createTable, this);\r\n        this.parent.observer.on(CONSTANT.INSERT_ROW, this.insertRow, this);\r\n        this.parent.observer.on(CONSTANT.INSERT_COLUMN, this.insertColumn, this);\r\n        this.parent.observer.on(CONSTANT.DELETEROW, this.deleteRow, this);\r\n        this.parent.observer.on(CONSTANT.DELETECOLUMN, this.deleteColumn, this);\r\n        this.parent.observer.on(CONSTANT.REMOVETABLE, this.removeTable, this);\r\n        this.parent.observer.on(CONSTANT.TABLEHEADER, this.tableHeader, this);\r\n        this.parent.observer.on(CONSTANT.TABLE_VERTICAL_ALIGN, this.tableVerticalAlign, this);\r\n    };\r\n    TableCommand.prototype.createTable = function (e) {\r\n        var table = createElement('table', { className: 'e-rte-table' });\r\n        var tblBody = createElement('tbody');\r\n        table.style.width = e.item.width.width;\r\n        var tdWid = parseInt(e.item.width.width, 10) / e.item.columns;\r\n        for (var i = 0; i < e.item.row; i++) {\r\n            var row = createElement('tr');\r\n            for (var j = 0; j < e.item.columns; j++) {\r\n                var cell = createElement('td');\r\n                cell.appendChild(createElement('br'));\r\n                cell.style.width = tdWid + '%';\r\n                row.appendChild(cell);\r\n            }\r\n            tblBody.appendChild(row);\r\n        }\r\n        table.appendChild(tblBody);\r\n        e.item.selection.restore();\r\n        InsertHtml.Insert(this.parent.currentDocument, table, this.parent.editableElement);\r\n        e.item.selection.setSelectionText(this.parent.currentDocument, table.querySelector('td'), table.querySelector('td'), 0, 0);\r\n        table.querySelector('td').classList.add('e-cell-select');\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: 'Table',\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n        return table;\r\n    };\r\n    TableCommand.prototype.insertAfter = function (newNode, referenceNode) {\r\n        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\r\n    };\r\n    TableCommand.prototype.insertRow = function (e) {\r\n        var selectedCell = e.item.selection.range.startContainer;\r\n        selectedCell = (selectedCell.nodeType === 3) ? selectedCell.parentNode : selectedCell;\r\n        if (selectedCell.nodeName.toLowerCase() === 'th' && e.item.subCommand === 'InsertRowBefore') {\r\n            return;\r\n        }\r\n        var curRow = closest(selectedCell, 'tr');\r\n        var newRow;\r\n        if (selectedCell.nodeName.toLowerCase() !== 'th') {\r\n            newRow = closest(selectedCell, 'tr').cloneNode(true);\r\n            var tabCell = Array.prototype.slice.call(newRow.querySelectorAll('td'));\r\n            Array.prototype.forEach.call(tabCell, function (cell) {\r\n                cell.innerHTML = '';\r\n                cell.appendChild(createElement('br'));\r\n                cell.removeAttribute('class');\r\n            });\r\n        }\r\n        else {\r\n            var childNodes = curRow.childNodes;\r\n            newRow = createElement('tr');\r\n            for (var i = 0; i < childNodes.length; i++) {\r\n                var tdElement = createElement('td');\r\n                tdElement.appendChild(createElement('br'));\r\n                newRow.appendChild(tdElement);\r\n            }\r\n        }\r\n        (e.item.subCommand === 'InsertRowBefore') ?\r\n            curRow.parentElement.insertBefore(newRow, curRow) : this.insertAfter(newRow, curRow);\r\n        e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.item.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n    };\r\n    TableCommand.prototype.insertColumn = function (e) {\r\n        var selectedCell = e.item.selection.range.startContainer;\r\n        selectedCell = (selectedCell.nodeType === 3) ? selectedCell.parentNode : selectedCell;\r\n        selectedCell = (selectedCell.nodeName !== 'TD') ? closest(selectedCell, 'td,th') : selectedCell;\r\n        var curRow = closest(selectedCell, 'tr');\r\n        var curCell;\r\n        var allRows = closest((curRow), 'table').rows;\r\n        var colIndex = Array.prototype.slice.call(curRow.querySelectorAll('th,td')).indexOf(selectedCell);\r\n        var width = parseInt(e.item.width, 10) / (curRow.querySelectorAll('td,th').length + 1);\r\n        for (var j = 0; j < closest(curRow, 'table').querySelectorAll('th,td').length; j++) {\r\n            closest(curRow, 'table').querySelectorAll('th,td')[j].style.width = width + '%';\r\n        }\r\n        for (var i = 0; i < allRows.length; i++) {\r\n            curCell = allRows[i].querySelectorAll('th,td')[colIndex];\r\n            var colTemplate = curCell.cloneNode(true);\r\n            colTemplate.innerHTML = '';\r\n            colTemplate.appendChild(createElement('br'));\r\n            colTemplate.removeAttribute('class');\r\n            (e.item.subCommand === 'InsertColumnLeft') ? curCell.parentElement.insertBefore(colTemplate, curCell) :\r\n                this.insertAfter(colTemplate, curCell);\r\n        }\r\n        e.item.selection.setSelectionText(this.parent.currentDocument, selectedCell, selectedCell, 0, 0);\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.item.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n    };\r\n    TableCommand.prototype.deleteColumn = function (e) {\r\n        var selectedCell = e.item.selection.range.startContainer;\r\n        selectedCell = (selectedCell.nodeType === 3) ? selectedCell.parentNode : selectedCell;\r\n        var curRow = closest(selectedCell, 'tr');\r\n        var allRows = closest(curRow, 'table').rows;\r\n        if (curRow.querySelectorAll('th,td').length === 1) {\r\n            e.item.selection.restore();\r\n            detach(closest(selectedCell.parentElement, 'table'));\r\n        }\r\n        else {\r\n            for (var i = 0; i < allRows.length; i++) {\r\n                allRows[i].deleteCell(selectedCell.cellIndex);\r\n            }\r\n        }\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.item.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n    };\r\n    TableCommand.prototype.deleteRow = function (e) {\r\n        var selectedCell = e.item.selection.range.startContainer;\r\n        selectedCell = (selectedCell.nodeType === 3) ? selectedCell.parentNode : selectedCell;\r\n        var parentTable = closest(selectedCell, 'table');\r\n        if (parentTable.rows.length === 1) {\r\n            e.item.selection.restore();\r\n            detach(closest(selectedCell.parentElement, 'table'));\r\n        }\r\n        else {\r\n            parentTable.deleteRow(selectedCell.parentNode.rowIndex);\r\n            e.item.selection.setSelectionText(this.parent.currentDocument, parentTable.querySelector('td'), parentTable.querySelector('td'), 0, 0);\r\n            parentTable.querySelector('td, th').classList.add('e-cell-select');\r\n        }\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.item.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n    };\r\n    TableCommand.prototype.removeTable = function (e) {\r\n        var selectedCell = e.item.selection.range.startContainer;\r\n        selectedCell = (selectedCell.nodeType === 3) ? selectedCell.parentNode : selectedCell;\r\n        var seletedTable = closest(selectedCell.parentElement, 'table');\r\n        if (seletedTable) {\r\n            e.item.selection.restore();\r\n            detach(seletedTable);\r\n        }\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.item.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n    };\r\n    TableCommand.prototype.tableHeader = function (e) {\r\n        var selectedCell = e.item.selection.range.startContainer;\r\n        selectedCell = (selectedCell.nodeType === 3) ? selectedCell.parentNode : selectedCell;\r\n        var table = closest(selectedCell.parentElement, 'table');\r\n        if (table && 0 === table.querySelectorAll('thead').length) {\r\n            var cellCount = table.querySelector('tr').querySelectorAll('td').length;\r\n            var header = table.createTHead();\r\n            var row = header.insertRow(0);\r\n            for (var i = 0; i < cellCount; i++) {\r\n                var th = createElement('th');\r\n                th.appendChild(createElement('br'));\r\n                row.appendChild(th);\r\n            }\r\n        }\r\n        else {\r\n            table.deleteTHead();\r\n        }\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.item.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n    };\r\n    TableCommand.prototype.tableVerticalAlign = function (e) {\r\n        if (e.item.subCommand === 'AlignTop') {\r\n            e.item.tableCell.style.verticalAlign = 'top';\r\n        }\r\n        else if (e.item.subCommand === 'AlignMiddle') {\r\n            e.item.tableCell.style.verticalAlign = 'middle';\r\n        }\r\n        else {\r\n            e.item.tableCell.style.verticalAlign = 'bottom';\r\n        }\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.item.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n    };\r\n    return TableCommand;\r\n}());\r\nexport { TableCommand };\r\n",null]}