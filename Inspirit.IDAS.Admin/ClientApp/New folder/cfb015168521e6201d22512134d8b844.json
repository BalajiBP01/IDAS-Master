{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\count.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\count.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import { detach, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport * as events from '../base/constant';\r\nimport { RenderType } from '../base/enum';\r\nimport { CLS_COUNT, CLS_WARNING, CLS_ERROR } from '../base/classes';\r\n/**\r\n * `Count` module is used to handle Count actions.\r\n */\r\nvar Count = /*@__PURE__*/ (function () {\r\n    function Count(parent, serviceLocator) {\r\n        this.parent = parent;\r\n        this.locator = serviceLocator;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        this.addEventListener();\r\n    }\r\n    Count.prototype.initializeInstance = function () {\r\n        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\r\n        this.editPanel = this.contentRenderer.getEditPanel();\r\n    };\r\n    Count.prototype.renderCount = function () {\r\n        this.initializeInstance();\r\n        this.element = this.parent.createElement('span', { className: CLS_COUNT });\r\n        this.contentRenderer.getPanel().parentElement.appendChild(this.element);\r\n        this.appendCount();\r\n        if (this.parent.maxLength !== -1) {\r\n            this.charCountBackground(this.htmlLength);\r\n        }\r\n    };\r\n    Count.prototype.appendCount = function () {\r\n        var htmlText = this.parent.editorMode === 'Markdown' ? this.editPanel.value.trim() :\r\n            this.editPanel.textContent.trim();\r\n        this.htmlLength = htmlText.length;\r\n        var string = this.parent.maxLength === -1 ? this.htmlLength : this.htmlLength + ' / ' + this.parent.maxLength;\r\n        this.element.innerHTML = string;\r\n    };\r\n    Count.prototype.charCountBackground = function (htmlLength) {\r\n        var percentage = (htmlLength / this.parent.maxLength) * 100;\r\n        if (percentage < 85) {\r\n            this.element.classList.remove(CLS_WARNING);\r\n            this.element.classList.remove(CLS_ERROR);\r\n        }\r\n        else if (percentage > 85 && percentage <= 90) {\r\n            this.element.classList.remove(CLS_ERROR);\r\n            this.element.classList.add(CLS_WARNING);\r\n        }\r\n        else if (percentage > 90) {\r\n            this.element.classList.remove(CLS_WARNING);\r\n            this.element.classList.add(CLS_ERROR);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Count.prototype.refresh = function () {\r\n        if (!isNullOrUndefined(this.editPanel)) {\r\n            this.appendCount();\r\n            if (this.parent.maxLength !== -1) {\r\n                this.charCountBackground(this.htmlLength);\r\n            }\r\n        }\r\n    };\r\n    Count.prototype.restrict = function (e) {\r\n        if (this.parent.showCharCount) {\r\n            var element = e.args.currentTarget.textContent.trim();\r\n            var array = [8, 16, 17, 37, 38, 39, 40, 65];\r\n            var arrayKey = void 0;\r\n            for (var i = 0; i <= array.length - 1; i++) {\r\n                if (e.args.which === array[i]) {\r\n                    if (e.args.ctrlKey && e.args.which === 65) {\r\n                        return;\r\n                    }\r\n                    else if (e.args.which !== 65) {\r\n                        arrayKey = array[i];\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            if ((element.length >= this.parent.maxLength && this.parent.maxLength !== -1) && e.args.which !== arrayKey) {\r\n                e.args.preventDefault();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Destroys the Count.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    Count.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    Count.prototype.toggle = function (e) {\r\n        this.element.style.display = (e.member === 'viewSource') ? 'none' : 'block';\r\n    };\r\n    Count.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.parent.showCharCount) {\r\n            this.parent.on(events.initialEnd, this.renderCount, this);\r\n            this.parent.on(events.keyUp, this.refresh, this);\r\n            this.parent.on(events.keyDown, this.restrict, this);\r\n            this.parent.on(events.count, this.refresh, this);\r\n            this.parent.on(events.refreshBegin, this.refresh, this);\r\n            this.parent.on(events.mouseDown, this.refresh, this);\r\n            this.parent.on(events.destroy, this.destroy, this);\r\n            this.parent.on(events.sourceCode, this.toggle, this);\r\n            this.parent.on(events.updateSource, this.toggle, this);\r\n        }\r\n    };\r\n    Count.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        detach(this.element);\r\n        this.parent.off(events.initialEnd, this.renderCount);\r\n        this.parent.off(events.keyUp, this.refresh);\r\n        this.parent.off(events.refreshBegin, this.refresh);\r\n        this.parent.off(events.keyDown, this.restrict);\r\n        this.parent.off(events.count, this.refresh);\r\n        this.parent.off(events.mouseDown, this.refresh);\r\n        this.parent.off(events.destroy, this.destroy);\r\n        this.parent.off(events.sourceCode, this.toggle);\r\n        this.parent.off(events.updateSource, this.toggle);\r\n    };\r\n    /**\r\n     * For internal use only - Get the module name.\r\n     */\r\n    Count.prototype.getModuleName = function () {\r\n        return 'count';\r\n    };\r\n    return Count;\r\n}());\r\nexport { Count };\r\n",null]}