{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-lists\\src\\list-view\\virtualization.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-lists\\src\\list-view\\virtualization.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { classNames } from './list-view';\r\nimport { EventHandler, append, isNullOrUndefined, detach, removeClass, addClass } from '@syncfusion/ej2-base';\r\nimport { ListBase } from '../common/list-base';\r\nvar Virtualization = /*@__PURE__*/ (function () {\r\n    function Virtualization(instance) {\r\n        this.listViewInstance = instance;\r\n    }\r\n    /**\r\n     * For internal use only.\r\n     * @private\r\n     */\r\n    Virtualization.prototype.isNgTemplate = function () {\r\n        return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string'\r\n            && isNullOrUndefined(this.listViewInstance.fields.groupBy);\r\n    };\r\n    /**\r\n     * For internal use only.\r\n     * @private\r\n     */\r\n    Virtualization.prototype.uiVirtualization = function () {\r\n        var curViewDS = this.listViewInstance.curViewDS;\r\n        var firstDs = curViewDS.slice(0, 1);\r\n        this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption);\r\n        this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', { className: classNames.content });\r\n        this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);\r\n        this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);\r\n        this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;\r\n        this.expectedDomItemCount = this.ValidateItemCount(10000);\r\n        this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);\r\n        this.uiFirstIndex = 0;\r\n        this.uiLastIndex = this.domItemCount - 1;\r\n        this.wireScrollEvent(false);\r\n        var otherDs = curViewDS.slice(1, this.domItemCount);\r\n        var listItems = ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption);\r\n        append(listItems, this.listViewInstance.ulElement);\r\n        this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\r\n        this.topElement = this.listViewInstance.createElement('div');\r\n        this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);\r\n        this.bottomElement = this.listViewInstance.createElement('div');\r\n        this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);\r\n        this.totalHeight = (Object.keys(curViewDS).length * this.listItemHeight) - (this.domItemCount * this.listItemHeight);\r\n        this.topElement.style.height = 0 + 'px';\r\n        this.bottomElement.style.height = this.totalHeight + 'px';\r\n        this.topElementHeight = 0;\r\n        this.bottomElementHeight = this.totalHeight;\r\n        this.listDiff = 0;\r\n        this.uiIndicesInitialization();\r\n    };\r\n    Virtualization.prototype.wireScrollEvent = function (destroy) {\r\n        if (!destroy) {\r\n            if (this.listViewInstance.isWindow) {\r\n                this.onVirtualScroll = this.onVirtualUiScroll.bind(this);\r\n                window.addEventListener('scroll', this.onVirtualScroll);\r\n            }\r\n            else {\r\n                EventHandler.add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);\r\n            }\r\n        }\r\n        else {\r\n            this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.onVirtualScroll) :\r\n                EventHandler.remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);\r\n        }\r\n    };\r\n    Virtualization.prototype.ValidateItemCount = function (dataSourceLength) {\r\n        var itemCount = this.listViewInstance.isWindow ? Math.round((window.innerHeight / this.listItemHeight) * 3) :\r\n            Math.round((this.listViewInstance.height / this.listItemHeight) * 1.5);\r\n        if (itemCount > dataSourceLength) {\r\n            itemCount = dataSourceLength;\r\n        }\r\n        return itemCount;\r\n    };\r\n    Virtualization.prototype.uiIndicesInitialization = function () {\r\n        var _this = this;\r\n        this.uiIndices = { 'activeIndices': [], 'disabledItemIndices': [], 'hiddenItemIndices': [] };\r\n        this.listViewInstance.curViewDS.forEach(function (ds, index) {\r\n            if (_this.listViewInstance.showCheckBox && ds[_this.listViewInstance.fields.isChecked]) {\r\n                _this.uiIndices.activeIndices.push(index);\r\n            }\r\n            if (!isNullOrUndefined(ds[_this.listViewInstance.fields.enabled]) && !ds[_this.listViewInstance.fields.enabled]) {\r\n                _this.uiIndices.disabledItemIndices.push(index);\r\n            }\r\n        });\r\n        if (this.isNgTemplate()) {\r\n            Array.prototype.forEach.call(this.listViewInstance.element.querySelectorAll('.' + classNames.listItem), function (item, index) {\r\n                item.context = _this.listViewInstance.viewContainerRef._embeddedViews[index].context;\r\n            });\r\n        }\r\n    };\r\n    Virtualization.prototype.refreshItemHeight = function () {\r\n        if (this.listViewInstance.curViewDS.length) {\r\n            var curViewDS = this.listViewInstance.curViewDS;\r\n            this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;\r\n            this.totalHeight = (Object.keys(curViewDS).length * this.listItemHeight) - (this.domItemCount * this.listItemHeight);\r\n            this.bottomElementHeight = this.totalHeight;\r\n            this.bottomElement.style.height = this.totalHeight + 'px';\r\n        }\r\n    };\r\n    Virtualization.prototype.getscrollerHeight = function (startingHeight) {\r\n        return this.listViewInstance.isWindow ? (((pageYOffset - startingHeight) <= 0) ? 0 :\r\n            (pageYOffset - startingHeight)) : ((this.listViewInstance.element.scrollTop - startingHeight) <= 0) ? 0 :\r\n            (this.listViewInstance.element.scrollTop - startingHeight);\r\n    };\r\n    Virtualization.prototype.onVirtualUiScroll = function () {\r\n        var _a;\r\n        var startingHeight;\r\n        if (this.listViewInstance.isWindow) {\r\n            startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top -\r\n                document.documentElement.getBoundingClientRect().top;\r\n        }\r\n        else {\r\n            startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;\r\n        }\r\n        this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;\r\n        var scroll = this.getscrollerHeight(startingHeight);\r\n        this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);\r\n        this.bottomElementHeight = this.totalHeight - this.topElementHeight;\r\n        _a = scroll <= this.totalHeight ?\r\n            [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];\r\n        if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {\r\n            this.topElement.style.height = this.topElementHeight + 'px';\r\n            this.bottomElement.style.height = this.bottomElementHeight + 'px';\r\n            if (scroll > this.scrollPosition) {\r\n                var listDiff = ((this.topElementHeight / this.listItemHeight) - this.listDiff);\r\n                if (listDiff > (this.expectedDomItemCount + 5)) {\r\n                    this.onLongScroll(listDiff, true);\r\n                }\r\n                else {\r\n                    this.onNormalScroll(listDiff, true);\r\n                }\r\n            }\r\n            else {\r\n                var listDiff = (this.listDiff - (this.topElementHeight / this.listItemHeight));\r\n                if (listDiff > (this.expectedDomItemCount + 5)) {\r\n                    this.onLongScroll(listDiff, false);\r\n                }\r\n                else {\r\n                    this.onNormalScroll(listDiff, false);\r\n                }\r\n            }\r\n            this.listDiff = this.topElementHeight / this.listItemHeight;\r\n            if (typeof this.listViewInstance.onUIScrolled === 'function') {\r\n                this.listViewInstance.onUIScrolled();\r\n            }\r\n        }\r\n        this.scrollPosition = scroll;\r\n    };\r\n    Virtualization.prototype.onLongScroll = function (listDiff, isScrollingDown) {\r\n        var _this = this;\r\n        var index = isScrollingDown ? (this.uiFirstIndex + listDiff) : (this.uiFirstIndex - listDiff);\r\n        Array.prototype.forEach.call(this.listViewInstance.ulElement.querySelectorAll('li'), function (element) {\r\n            _this.updateUI(element, index);\r\n            index++;\r\n        });\r\n        this.uiLastIndex = isScrollingDown ? (this.uiLastIndex + listDiff) : (this.uiLastIndex - listDiff);\r\n        this.uiFirstIndex = isScrollingDown ? (this.uiFirstIndex + listDiff) : (this.uiFirstIndex - listDiff);\r\n    };\r\n    Virtualization.prototype.onNormalScroll = function (listDiff, isScrollingDown) {\r\n        if (isScrollingDown) {\r\n            for (var i = 0; i < listDiff; i++) {\r\n                var index = ++this.uiLastIndex;\r\n                this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);\r\n                this.uiFirstIndex++;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < listDiff; i++) {\r\n                var index = --this.uiFirstIndex;\r\n                var target = this.topElement.nextSibling;\r\n                this.updateUI(this.bottomElement.previousElementSibling, index, target);\r\n                this.uiLastIndex--;\r\n            }\r\n        }\r\n    };\r\n    Virtualization.prototype.updateUiContent = function (element, index) {\r\n        var curViewDs = this.listViewInstance.curViewDS;\r\n        if (typeof this.listViewInstance.dataSource[0] === 'string' ||\r\n            typeof this.listViewInstance.dataSource[0] === 'number') {\r\n            element.dataset.uid = ListBase.generateId();\r\n            element.getElementsByClassName(classNames.listItemText)[0].innerHTML =\r\n                this.listViewInstance.curViewDS[index].toString();\r\n        }\r\n        else {\r\n            element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ?\r\n                curViewDs[index][this.listViewInstance.fields.id].toString() : ListBase.generateId();\r\n            element.getElementsByClassName(classNames.listItemText)[0].innerHTML =\r\n                curViewDs[index][this.listViewInstance.fields.text].toString();\r\n        }\r\n        if (this.listViewInstance.showIcon) {\r\n            if (element.querySelector('.' + classNames.listIcon)) {\r\n                detach(element.querySelector('.' + classNames.listIcon));\r\n            }\r\n            if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {\r\n                var textContent = element.querySelector('.' + classNames.textContent);\r\n                var target = this.listViewInstance.createElement('div', {\r\n                    className: classNames.listIcon + ' ' +\r\n                        this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]\r\n                });\r\n                textContent.insertBefore(target, element.querySelector('.' + classNames.listItemText));\r\n            }\r\n        }\r\n        if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {\r\n            if (!this.checkListWrapper) {\r\n                this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + classNames.checkboxWrapper).cloneNode(true);\r\n            }\r\n            var textContent = element.querySelector('.' + classNames.textContent);\r\n            if (this.listViewInstance.curViewDS[index].isHeader) {\r\n                if (element.querySelector('.' + classNames.checkboxWrapper)) {\r\n                    element.classList.remove(classNames.checklist);\r\n                    textContent.classList.remove(classNames.checkbox);\r\n                    detach(element.querySelector('.' + classNames.checkboxWrapper));\r\n                }\r\n            }\r\n            else {\r\n                if (!element.querySelector('.' + classNames.checkboxWrapper)) {\r\n                    element.classList.add(classNames.checklist);\r\n                    textContent.classList.add(classNames.checkbox);\r\n                    textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + classNames.listItemText));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Virtualization.prototype.changeElementAttributes = function (element, index) {\r\n        element.classList.remove(classNames.disable);\r\n        if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {\r\n            element.classList.add(classNames.disable);\r\n        }\r\n        element.style.display = '';\r\n        if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {\r\n            element.style.display = 'none';\r\n        }\r\n        if (this.listViewInstance.showCheckBox) {\r\n            var checklistElement = element.querySelector('.' + classNames.checkboxWrapper);\r\n            element.classList.remove(classNames.selected);\r\n            element.classList.remove(classNames.focused);\r\n            if (checklistElement) {\r\n                checklistElement.removeAttribute('aria-checked');\r\n                checklistElement.firstElementChild.classList.remove(classNames.checked);\r\n            }\r\n            if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 &&\r\n                !this.listViewInstance.curUL.querySelector(classNames.selected)) {\r\n                element.classList.add(classNames.selected);\r\n                checklistElement.firstElementChild.classList.add(classNames.checked);\r\n                checklistElement.setAttribute('aria-checked', 'true');\r\n                if (this.activeIndex === index) {\r\n                    element.classList.add(classNames.focused);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            element.classList.remove(classNames.selected);\r\n            element.removeAttribute('aria-selected');\r\n            if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index &&\r\n                !this.listViewInstance.curUL.querySelector(classNames.selected)) {\r\n                element.classList.add(classNames.selected);\r\n                element.setAttribute('aria-selected', 'true');\r\n            }\r\n        }\r\n        if (this.listViewInstance.fields.groupBy) {\r\n            if (this.listViewInstance.curViewDS[index].isHeader) {\r\n                if (element.classList.contains(classNames.listItem)) {\r\n                    element.classList.remove(classNames.listItem);\r\n                    element.setAttribute('role', 'group');\r\n                    element.classList.add(classNames.groupListItem);\r\n                }\r\n            }\r\n            else {\r\n                if (element.classList.contains(classNames.groupListItem)) {\r\n                    element.classList.remove(classNames.groupListItem);\r\n                    element.setAttribute('role', 'listitem');\r\n                    element.classList.add(classNames.listItem);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Virtualization.prototype.findDSAndIndexFromId = function (ds, fields) {\r\n        var _this = this;\r\n        var resultJSON = {};\r\n        fields = this.listViewInstance.getElementUID(fields);\r\n        if (!isNullOrUndefined(fields)) {\r\n            ds.some(function (data, index) {\r\n                if ((fields[_this.listViewInstance.fields.id] &&\r\n                    fields[_this.listViewInstance.fields.id].toString()\r\n                        === (data[_this.listViewInstance.fields.id] && data[_this.listViewInstance.fields.id].toString())) || fields === data) {\r\n                    resultJSON.index = index;\r\n                    resultJSON.data = data;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        return resultJSON;\r\n    };\r\n    Virtualization.prototype.getSelectedItems = function () {\r\n        var _this = this;\r\n        if (!isNullOrUndefined(this.activeIndex) || (this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length)) {\r\n            var dataCollection_1 = [];\r\n            var textCollection_1 = [];\r\n            if (typeof this.listViewInstance.dataSource[0] === 'string' ||\r\n                typeof this.listViewInstance.dataSource[0] === 'number') {\r\n                var curViewDS_1 = this.listViewInstance.curViewDS;\r\n                if (this.listViewInstance.showCheckBox) {\r\n                    this.uiIndices.activeIndices.forEach(function (index) {\r\n                        dataCollection_1.push(curViewDS_1[index]);\r\n                    });\r\n                    return {\r\n                        text: dataCollection_1,\r\n                        data: dataCollection_1,\r\n                        index: this.uiIndices.activeIndices.map(function (index) {\r\n                            return _this.listViewInstance.dataSource.indexOf(curViewDS_1[index]);\r\n                        })\r\n                    };\r\n                }\r\n                else {\r\n                    return {\r\n                        text: curViewDS_1[this.activeIndex],\r\n                        data: curViewDS_1[this.activeIndex],\r\n                        index: this.listViewInstance.dataSource.indexOf(curViewDS_1[this.activeIndex])\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                var curViewDS_2 = this.listViewInstance.curViewDS;\r\n                var text_1 = this.listViewInstance.fields.text;\r\n                if (this.listViewInstance.showCheckBox) {\r\n                    this.uiIndices.activeIndices.forEach(function (index) {\r\n                        textCollection_1.push(curViewDS_2[index][text_1]);\r\n                        dataCollection_1.push(curViewDS_2[index]);\r\n                    });\r\n                    return {\r\n                        text: textCollection_1,\r\n                        data: dataCollection_1,\r\n                        index: this.uiIndices.activeIndices.map(function (index) {\r\n                            return (_this.listViewInstance.dataSource).indexOf(curViewDS_2[index]);\r\n                        })\r\n                    };\r\n                }\r\n                else {\r\n                    return {\r\n                        text: curViewDS_2[this.activeIndex][this.listViewInstance.fields.text],\r\n                        data: curViewDS_2[this.activeIndex],\r\n                        index: this.listViewInstance.dataSource.indexOf(curViewDS_2[this.activeIndex])\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    Virtualization.prototype.selectItem = function (obj) {\r\n        var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\r\n        if (Object.keys(resutJSON).length) {\r\n            var isSelected = this.activeIndex === resutJSON.index;\r\n            var isChecked = void 0;\r\n            this.activeIndex = resutJSON.index;\r\n            if (this.listViewInstance.showCheckBox) {\r\n                if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {\r\n                    isChecked = true;\r\n                    this.uiIndices.activeIndices.push(resutJSON.index);\r\n                }\r\n                else {\r\n                    isChecked = false;\r\n                    this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);\r\n                }\r\n                if (this.listViewInstance.curUL.querySelector('.' + classNames.focused)) {\r\n                    this.listViewInstance.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\r\n                }\r\n            }\r\n            if (this.listViewInstance.getLiFromObjOrElement(obj)) {\r\n                if (this.listViewInstance.showCheckBox) {\r\n                    this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));\r\n                }\r\n                else {\r\n                    this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));\r\n                }\r\n            }\r\n            else {\r\n                var eventArgs = void 0;\r\n                if (typeof this.listViewInstance.dataSource[0] === 'string' ||\r\n                    typeof this.listViewInstance.dataSource[0] === 'number') {\r\n                    eventArgs = {\r\n                        text: this.listViewInstance.curViewDS[this.activeIndex],\r\n                        data: this.listViewInstance.curViewDS[this.activeIndex],\r\n                        index: this.activeIndex\r\n                    };\r\n                }\r\n                else {\r\n                    var curViewDS = this.listViewInstance.curViewDS;\r\n                    eventArgs = {\r\n                        text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\r\n                        data: curViewDS[this.activeIndex],\r\n                        index: this.activeIndex\r\n                    };\r\n                }\r\n                if (this.listViewInstance.showCheckBox) {\r\n                    eventArgs.isChecked = isChecked;\r\n                    this.listViewInstance.trigger('select', eventArgs);\r\n                }\r\n                else if (!isSelected) {\r\n                    this.listViewInstance.removeSelect();\r\n                    this.listViewInstance.trigger('select', eventArgs);\r\n                }\r\n            }\r\n        }\r\n        else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {\r\n            this.listViewInstance.removeSelect();\r\n            this.activeIndex = undefined;\r\n        }\r\n    };\r\n    Virtualization.prototype.enableItem = function (obj) {\r\n        var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\r\n        if (Object.keys(resutJSON).length) {\r\n            this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);\r\n        }\r\n    };\r\n    Virtualization.prototype.disableItem = function (obj) {\r\n        var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\r\n        if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {\r\n            this.uiIndices.disabledItemIndices.push(resutJSON.index);\r\n        }\r\n    };\r\n    Virtualization.prototype.showItem = function (obj) {\r\n        var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\r\n        if (Object.keys(resutJSON).length) {\r\n            this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);\r\n        }\r\n    };\r\n    Virtualization.prototype.hideItem = function (obj) {\r\n        var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\r\n        if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {\r\n            this.uiIndices.hiddenItemIndices.push(resutJSON.index);\r\n        }\r\n    };\r\n    Virtualization.prototype.removeItem = function (obj) {\r\n        var dataSource;\r\n        var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\r\n        if (Object.keys(resutJSON).length) {\r\n            dataSource = resutJSON.data;\r\n            if (this.listViewInstance.curViewDS[resutJSON.index - 1] &&\r\n                this.listViewInstance.curViewDS[resutJSON.index - 1].isHeader &&\r\n                (this.listViewInstance.curViewDS[resutJSON.index - 1])\r\n                    .items.length === 1) {\r\n                this.removeUiItem(resutJSON.index - 1);\r\n                this.removeUiItem(resutJSON.index - 1);\r\n            }\r\n            else {\r\n                this.removeUiItem(resutJSON.index);\r\n            }\r\n        }\r\n        var index = this.listViewInstance.dataSource.indexOf(dataSource);\r\n        if (index !== -1) {\r\n            this.listViewInstance.dataSource.splice(index, 1);\r\n            this.listViewInstance.setViewDataSource(this.listViewInstance.dataSource);\r\n        }\r\n    };\r\n    Virtualization.prototype.setCheckboxLI = function (li, e) {\r\n        var index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\r\n        this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\r\n        if (li.classList.contains(classNames.selected)) {\r\n            if (this.uiIndices.activeIndices.indexOf(index) === -1) {\r\n                this.uiIndices.activeIndices.push(index);\r\n            }\r\n        }\r\n        else {\r\n            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\r\n        }\r\n    };\r\n    Virtualization.prototype.setSelectLI = function (li, e) {\r\n        this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\r\n    };\r\n    Virtualization.prototype.checkedItem = function (checked) {\r\n        var _this = this;\r\n        if (checked) {\r\n            this.uiIndices.activeIndices = [];\r\n            this.activeIndex = undefined;\r\n            this.listViewInstance.curViewDS.forEach(function (ds, index) {\r\n                if (!ds.isHeader) {\r\n                    _this.uiIndices.activeIndices.push(index);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.activeIndex = undefined;\r\n            this.uiIndices.activeIndices = [];\r\n        }\r\n    };\r\n    Virtualization.prototype.addUiItem = function (index) {\r\n        var curViewDs = this.listViewInstance.curViewDS;\r\n        this.changeUiIndices(index, true);\r\n        if (this.activeIndex && this.activeIndex >= index) {\r\n            this.activeIndex++;\r\n        }\r\n        if (this.listViewInstance.showCheckBox &&\r\n            curViewDs[index][this.listViewInstance.fields.isChecked]) {\r\n            this.uiIndices.activeIndices.push(index);\r\n        }\r\n        if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\r\n            this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\r\n        }\r\n        if (parseFloat(this.bottomElement.style.height)) {\r\n            var liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;\r\n            var target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) ||\r\n                this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\r\n            if (target) {\r\n                this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\r\n                this.updateUI(liItem, index, target);\r\n            }\r\n        }\r\n        else {\r\n            var liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;\r\n            var target = void 0;\r\n            if ((Object.keys(this.listViewInstance.curViewDS).length - 1) === index) {\r\n                target = this.listViewInstance.curUL.lastElementChild;\r\n            }\r\n            else {\r\n                target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) ||\r\n                    this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\r\n            }\r\n            this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';\r\n            this.uiFirstIndex++;\r\n            this.uiLastIndex++;\r\n            if (target) {\r\n                this.updateUI(liItem, index, target);\r\n                this.listViewInstance.isWindow ? window.scrollTo(0, (pageYOffset + this.listItemHeight)) :\r\n                    this.listViewInstance.element.scrollTop += this.listItemHeight;\r\n            }\r\n        }\r\n        this.totalHeight += this.listItemHeight;\r\n        this.listDiff = parseFloat(this.topElement.style.height) / this.listItemHeight;\r\n    };\r\n    Virtualization.prototype.removeUiItem = function (index) {\r\n        this.totalHeight -= this.listItemHeight;\r\n        var curViewDS = this.listViewInstance.curViewDS[index];\r\n        var liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);\r\n        this.listViewInstance.curViewDS.splice(index, 1);\r\n        if (this.activeIndex && this.activeIndex >= index) {\r\n            this.activeIndex--;\r\n        }\r\n        if (liItem) {\r\n            if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {\r\n                detach(liItem);\r\n                this.domItemCount--;\r\n                this.uiLastIndex--;\r\n                this.totalHeight = 0;\r\n            }\r\n            else {\r\n                if (liItem.classList.contains(classNames.disable)) {\r\n                    liItem.classList.remove(classNames.disable);\r\n                    this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);\r\n                }\r\n                if (liItem.style.display === 'none') {\r\n                    liItem.style.display = '';\r\n                    this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);\r\n                }\r\n                if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames.selected)) {\r\n                    this.listViewInstance.removeSelect();\r\n                    this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\r\n                    var checklistElement = liItem.querySelector('.' + classNames.checkboxWrapper);\r\n                    checklistElement.removeAttribute('aria-checked');\r\n                    checklistElement.firstElementChild.classList.remove(classNames.checked);\r\n                    if (liItem.classList.contains(classNames.focused)) {\r\n                        liItem.classList.remove(classNames.focused);\r\n                        this.activeIndex = undefined;\r\n                    }\r\n                }\r\n                else if (liItem.classList.contains(classNames.selected)) {\r\n                    this.listViewInstance.removeSelect();\r\n                    this.activeIndex = undefined;\r\n                }\r\n                if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\r\n                    this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\r\n                }\r\n                else if (parseFloat(this.bottomElement.style.height)) {\r\n                    this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';\r\n                    this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\r\n                }\r\n                else {\r\n                    this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';\r\n                    this.updateUI(liItem, (this.uiFirstIndex - 1), this.topElement.nextSibling);\r\n                    this.uiLastIndex--;\r\n                    this.uiFirstIndex--;\r\n                }\r\n            }\r\n        }\r\n        this.changeUiIndices(index, false);\r\n        this.listDiff = parseFloat(this.topElement.style.height) / this.listItemHeight;\r\n    };\r\n    Virtualization.prototype.changeUiIndices = function (index, increment) {\r\n        var _this = this;\r\n        Object.keys(this.uiIndices).forEach(function (key) {\r\n            _this.uiIndices[key] = _this.uiIndices[key].map(function (i) {\r\n                if (i >= index) {\r\n                    return increment ? ++i : --i;\r\n                }\r\n                else {\r\n                    return i;\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Virtualization.prototype.addItem = function (data, fields) {\r\n        var _this = this;\r\n        data.forEach(function (dataSource) {\r\n            _this.listViewInstance.dataSource.push(dataSource);\r\n            _this.listViewInstance.setViewDataSource(_this.listViewInstance.dataSource);\r\n            if (!_this.domItemCount) {\r\n                _this.uiVirtualization();\r\n            }\r\n            else if (_this.domItemCount < _this.expectedDomItemCount) {\r\n                _this.wireScrollEvent(true);\r\n                detach(_this.listViewInstance.contentContainer);\r\n                _this.uiVirtualization();\r\n            }\r\n            else {\r\n                var index = _this.listViewInstance.curViewDS.indexOf(dataSource);\r\n                _this.addUiItem(index);\r\n                var curViewDS = _this.listViewInstance.curViewDS[index - 1];\r\n                if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\r\n                    _this.addUiItem(index - 1);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Virtualization.prototype.createUIItem = function (args) {\r\n        var template = this.listViewInstance.createElement('div');\r\n        var commonTemplate = '<div class=\"e-text-content\" role=\"presentation\"> ' +\r\n            '<span class=\"e-list-text\"> ${' + this.listViewInstance.fields.text + '} </span></div>';\r\n        template.innerHTML = this.listViewInstance.template || commonTemplate;\r\n        var templateElements = template.getElementsByTagName('*');\r\n        var groupTemplate = this.listViewInstance.createElement('div');\r\n        if (this.listViewInstance.fields.groupBy) {\r\n            groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;\r\n        }\r\n        var groupTemplateElements = groupTemplate.getElementsByTagName('*');\r\n        if (args.curData.isHeader) {\r\n            this.headerData = args.curData;\r\n        }\r\n        this.templateData = args.curData.isHeader ? args.curData.items[0] :\r\n            args.curData;\r\n        args.item.innerHTML = '';\r\n        args.item.context = { data: args.curData, nodes: { flatTemplateNodes: [], groupTemplateNodes: [] } };\r\n        for (var i = 0; i < templateElements.length; i++) {\r\n            this.compileTemplate(templateElements[i], args.item, false);\r\n        }\r\n        for (var i = 0; i < groupTemplateElements.length; i++) {\r\n            this.compileTemplate(groupTemplateElements[i], args.item, true);\r\n        }\r\n        args.item.context.template = args.curData.isHeader ? template.firstElementChild :\r\n            groupTemplate.firstElementChild;\r\n        args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';\r\n        var element = args.curData.isHeader ? groupTemplate : template;\r\n        args.item.insertBefore(element.firstElementChild, null);\r\n    };\r\n    Virtualization.prototype.compileTemplate = function (element, item, isHeader) {\r\n        this.textProperty(element, item, isHeader);\r\n        this.classProperty(element, item, isHeader);\r\n        this.attributeProperty(element, item, isHeader);\r\n    };\r\n    Virtualization.prototype.onChange = function (newData, listElement) {\r\n        listElement.context.data = newData;\r\n        var groupTemplateNodes = listElement.context.nodes.groupTemplateNodes;\r\n        var flatTemplateNodes = listElement.context.nodes.flatTemplateNodes;\r\n        if (!isNullOrUndefined(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {\r\n            var element = listElement.firstElementChild;\r\n            detach(listElement.firstElementChild);\r\n            listElement.insertBefore(listElement.context.template, null);\r\n            listElement.context.template = element;\r\n            listElement.context.type = 'flatList';\r\n            groupTemplateNodes.forEach(function (node) { return node.onChange(newData); });\r\n        }\r\n        else if (!newData.isHeader && listElement.context.type === 'flatList') {\r\n            var element = listElement.firstElementChild;\r\n            detach(listElement.firstElementChild);\r\n            listElement.insertBefore(listElement.context.template, null);\r\n            listElement.context.template = element;\r\n            listElement.context.type = 'groupList';\r\n            flatTemplateNodes.forEach(function (node) { return node.onChange(newData); });\r\n        }\r\n        else if (!newData.isHeader) {\r\n            flatTemplateNodes.forEach(function (node) { return node.onChange(newData); });\r\n        }\r\n        else {\r\n            groupTemplateNodes.forEach(function (node) { return node.onChange(newData); });\r\n        }\r\n    };\r\n    Virtualization.prototype.updateContextData = function (listElement, node, isHeader) {\r\n        if (isHeader) {\r\n            listElement.context.nodes.groupTemplateNodes.push(node);\r\n        }\r\n        else {\r\n            listElement.context.nodes.flatTemplateNodes.push(node);\r\n        }\r\n    };\r\n    Virtualization.prototype.classProperty = function (element, listElement, isHeader) {\r\n        var _this = this;\r\n        var regex = new RegExp('\\\\${([^}]*)}', 'g');\r\n        var resultantOutput = [];\r\n        var regexMatch;\r\n        while (regexMatch !== null) {\r\n            var match = regex.exec(element.className);\r\n            resultantOutput.push(match);\r\n            regexMatch = match;\r\n            if (regexMatch === null) {\r\n                resultantOutput.pop();\r\n            }\r\n        }\r\n        if (resultantOutput && resultantOutput.length) {\r\n            resultantOutput.forEach(function (classNameMatch) {\r\n                var classFunction;\r\n                if (classNameMatch[1].indexOf('?') !== -1 && classNameMatch[1].indexOf(':') !== -1) {\r\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\r\n                    classFunction = new Function('data', 'return ' + classNameMatch[1].replace(/\\$/g, 'data.'));\r\n                }\r\n                else {\r\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\r\n                    classFunction = new Function('data', 'return ' + 'data.' + classNameMatch[1]);\r\n                }\r\n                var subNode = {};\r\n                if (isHeader) {\r\n                    subNode.bindedvalue = classFunction(_this.headerData);\r\n                }\r\n                else {\r\n                    subNode.bindedvalue = classFunction(_this.templateData);\r\n                }\r\n                subNode.onChange = function (value) {\r\n                    if (subNode.bindedvalue) {\r\n                        removeClass([element], subNode.bindedvalue.split(' ').filter(function (css) { return css; }));\r\n                    }\r\n                    var newCss = classFunction(value);\r\n                    if (newCss) {\r\n                        addClass([element], (newCss).split(' ').filter(function (css) { return css; }));\r\n                    }\r\n                    subNode.bindedvalue = newCss;\r\n                };\r\n                classNameMatch[0].split(' ').forEach(function (className) {\r\n                    element.classList.remove(className);\r\n                });\r\n                if (subNode.bindedvalue) {\r\n                    addClass([element], subNode.bindedvalue.split(' ').filter(function (css) { return css; }));\r\n                }\r\n                _this.updateContextData(listElement, subNode, isHeader);\r\n            });\r\n        }\r\n    };\r\n    Virtualization.prototype.attributeProperty = function (element, listElement, isHeader) {\r\n        var _this = this;\r\n        var attributeNames = [];\r\n        for (var i = 0; i < element.attributes.length; i++) {\r\n            attributeNames.push(element.attributes[i].nodeName);\r\n        }\r\n        if (attributeNames.indexOf('class') !== -1) {\r\n            attributeNames.splice(attributeNames.indexOf('class'), 1);\r\n        }\r\n        attributeNames.forEach(function (attributeName) {\r\n            var attrNameMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(attributeName) || [];\r\n            var attrValueMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(element.getAttribute(attributeName))\r\n                || [];\r\n            var attributeNameFunction;\r\n            var attributeValueFunction;\r\n            if (attrNameMatch.length || attrValueMatch.length) {\r\n                if (attrNameMatch[1]) {\r\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\r\n                    attributeNameFunction = new Function('data', 'return ' + 'data.' + attrNameMatch[1]);\r\n                }\r\n                if (attrValueMatch[1]) {\r\n                    if (attrValueMatch[1].indexOf('?') !== -1 && attrValueMatch[1].indexOf(':') !== -1) {\r\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\r\n                        attributeValueFunction = new Function('data', 'return ' + attrValueMatch[1].replace(/\\$/g, 'data.'));\r\n                    }\r\n                    else {\r\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\r\n                        attributeValueFunction = new Function('data', 'return ' + 'data.' + attrValueMatch[1]);\r\n                    }\r\n                }\r\n                var subNode_1 = {};\r\n                if (isHeader) {\r\n                    subNode_1.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(_this.headerData),\r\n                        attrValueMatch[1] === undefined ? undefined : attributeValueFunction(_this.headerData)];\r\n                }\r\n                else {\r\n                    subNode_1.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(_this.templateData),\r\n                        attrValueMatch[1] === undefined ? undefined : attributeValueFunction(_this.templateData)];\r\n                }\r\n                subNode_1.attrName = subNode_1.bindedvalue[0] === undefined ?\r\n                    attributeName : subNode_1.bindedvalue[0];\r\n                subNode_1.onChange = function (value) {\r\n                    var bindedvalue = subNode_1.bindedvalue[1] === undefined ?\r\n                        element.getAttribute(subNode_1.attrName) : attributeValueFunction(value);\r\n                    element.removeAttribute(subNode_1.attrName);\r\n                    subNode_1.attrName = subNode_1.bindedvalue[0] === undefined ? subNode_1.attrName : attributeNameFunction(value);\r\n                    element.setAttribute(subNode_1.attrName, bindedvalue);\r\n                    subNode_1.bindedvalue = [subNode_1.bindedvalue[0] === undefined ? undefined : attributeNameFunction(value),\r\n                        subNode_1.bindedvalue[1] === undefined ? undefined : attributeValueFunction(value)];\r\n                };\r\n                var attributeValue = subNode_1.bindedvalue[1] === undefined ? element.getAttribute(attributeName) :\r\n                    subNode_1.bindedvalue[1];\r\n                element.removeAttribute(attributeName);\r\n                element.setAttribute(subNode_1.attrName, attributeValue);\r\n                _this.updateContextData(listElement, subNode_1, isHeader);\r\n            }\r\n        });\r\n    };\r\n    Virtualization.prototype.textProperty = function (element, listElement, isHeader) {\r\n        var _this = this;\r\n        var regex = new RegExp('\\\\${([^}]*)}', 'g');\r\n        var resultantOutput = [];\r\n        var regexMatch;\r\n        while (regexMatch !== null) {\r\n            var match = regex.exec(element.innerText);\r\n            resultantOutput.push(match);\r\n            regexMatch = match;\r\n            if (regexMatch === null) {\r\n                resultantOutput.pop();\r\n            }\r\n        }\r\n        var isChildHasTextContent = Array.prototype.some.call(element.children, function (element) {\r\n            if (new RegExp('\\\\${([^}]*)}', 'g').exec(element.innerText)) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        });\r\n        if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {\r\n            resultantOutput.forEach(function (textPropertyMatch) {\r\n                var subNode = {};\r\n                var textFunction;\r\n                if (textPropertyMatch[1].indexOf('?') !== -1 && textPropertyMatch[1].indexOf(':') !== -1) {\r\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\r\n                    textFunction = new Function('data', 'return ' + textPropertyMatch[1].replace(/\\$/g, 'data.'));\r\n                }\r\n                else {\r\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\r\n                    textFunction = new Function('data', 'return ' + 'data.' + textPropertyMatch[1]);\r\n                }\r\n                if (isHeader) {\r\n                    subNode.bindedvalue = textFunction(_this.headerData);\r\n                }\r\n                else {\r\n                    subNode.bindedvalue = textFunction(_this.templateData);\r\n                }\r\n                subNode.onChange = function (value) {\r\n                    element.innerText = element.innerText.replace(subNode.bindedvalue, textFunction(value));\r\n                    subNode.bindedvalue = textFunction(value);\r\n                };\r\n                element.innerText = element.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);\r\n                _this.updateContextData(listElement, subNode, isHeader);\r\n            });\r\n        }\r\n    };\r\n    Virtualization.prototype.reRenderUiVirtualization = function () {\r\n        this.wireScrollEvent(true);\r\n        if (this.listViewInstance.contentContainer) {\r\n            detach(this.listViewInstance.contentContainer);\r\n        }\r\n        this.listViewInstance.preRender();\r\n        this.listViewInstance.localData = this.listViewInstance.dataSource;\r\n        this.listViewInstance.renderList();\r\n    };\r\n    Virtualization.prototype.updateUI = function (element, index, targetElement) {\r\n        var onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;\r\n        if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {\r\n            var curViewDS = this.listViewInstance.curViewDS[index];\r\n            element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ?\r\n                curViewDS[this.listViewInstance.fields.id].toString() : ListBase.generateId();\r\n            onChange(curViewDS, element);\r\n        }\r\n        else {\r\n            this.updateUiContent(element, index);\r\n        }\r\n        this.changeElementAttributes(element, index);\r\n        if (targetElement) {\r\n            this.listViewInstance.ulElement.insertBefore(element, targetElement);\r\n        }\r\n    };\r\n    Virtualization.prototype.onNgChange = function (newData, listElement) {\r\n        listElement.context.$implicit = newData;\r\n    };\r\n    Virtualization.prototype.getModuleName = function () {\r\n        return 'virtualization';\r\n    };\r\n    Virtualization.prototype.destroy = function () {\r\n        this.wireScrollEvent(true);\r\n    };\r\n    return Virtualization;\r\n}());\r\nexport { Virtualization };\r\n",null]}