{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\html-editor.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\html-editor.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import * as events from '../base/constant';\r\nimport { isNullOrUndefined, closest, attributes, removeClass, addClass } from '@syncfusion/ej2-base';\r\nimport { HTMLFormatter } from '../formatter/html-formatter';\r\nimport { RenderType } from '../base/enum';\r\nimport * as classes from '../base/classes';\r\nimport { HtmlToolbarStatus } from './html-toolbar-status';\r\nimport { IframeContentRender } from '../renderer/iframe-content-renderer';\r\nimport { ContentRender } from '../renderer/content-renderer';\r\nimport { ColorPickerInput } from './color-picker';\r\nimport { NodeSelection } from '../../selection/selection';\r\nimport { InsertHtml } from '../../editor-manager/plugin/inserthtml';\r\n/**\r\n * `HtmlEditor` module is used to HTML editor\r\n */\r\nvar HtmlEditor = /*@__PURE__*/ (function () {\r\n    function HtmlEditor(parent, serviceLocator) {\r\n        this.rangeCollection = [];\r\n        this.parent = parent;\r\n        this.locator = serviceLocator;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        this.addEventListener();\r\n    }\r\n    /**\r\n     * Destroys the Markdown.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    HtmlEditor.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    HtmlEditor.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.nodeSelectionObj = new NodeSelection();\r\n        this.colorPickerModule = new ColorPickerInput(this.parent, this.locator);\r\n        this.parent.on(events.initialLoad, this.instantiateRenderer, this);\r\n        this.parent.on(events.htmlToolbarClick, this.onToolbarClick, this);\r\n        this.parent.on(events.keyDown, this.onKeyDown, this);\r\n        this.parent.on(events.renderColorPicker, this.renderColorPicker, this);\r\n        this.parent.on(events.initialEnd, this.render, this);\r\n        this.parent.on(events.modelChanged, this.onPropertyChanged, this);\r\n        this.parent.on(events.destroy, this.destroy, this);\r\n        this.parent.on(events.selectAll, this.selectAll, this);\r\n        this.parent.on(events.selectRange, this.selectRange, this);\r\n        this.parent.on(events.getSelectedHtml, this.getSelectedHtml, this);\r\n        this.parent.on(events.selectionSave, this.onSelectionSave, this);\r\n        this.parent.on(events.selectionRestore, this.onSelectionRestore, this);\r\n        this.parent.on(events.readOnlyMode, this.updateReadOnly, this);\r\n        this.parent.on(events.paste, this.onPaste, this);\r\n    };\r\n    HtmlEditor.prototype.updateReadOnly = function () {\r\n        if (this.parent.readonly) {\r\n            attributes(this.parent.contentModule.getEditPanel(), { contenteditable: 'false' });\r\n            addClass([this.parent.element], classes.CLS_RTE_READONLY);\r\n        }\r\n        else {\r\n            attributes(this.parent.contentModule.getEditPanel(), { contenteditable: 'true' });\r\n            removeClass([this.parent.element], classes.CLS_RTE_READONLY);\r\n        }\r\n    };\r\n    HtmlEditor.prototype.onSelectionSave = function () {\r\n        var currentDocument = this.contentRenderer.getDocument();\r\n        var range = this.nodeSelectionObj.getRange(currentDocument);\r\n        this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);\r\n    };\r\n    HtmlEditor.prototype.onSelectionRestore = function (e) {\r\n        this.parent.isBlur = false;\r\n        this.contentRenderer.getEditPanel().focus();\r\n        if (isNullOrUndefined(e.items) || (e.items && e.items[0].command !== 'Table')) {\r\n            this.saveSelection.restore();\r\n        }\r\n    };\r\n    HtmlEditor.prototype.onKeyDown = function (e) {\r\n        if (e.args.keyCode === 9 && this.parent.enableTabKey) {\r\n            var range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());\r\n            var parentNode = this.nodeSelectionObj.getParentNodeCollection(range);\r\n            if (!((parentNode[0].nodeName === 'LI' || parentNode[0].nodeName === 'BR' || closest(parentNode[0], 'li')) &&\r\n                range.startOffset === 0)) {\r\n                e.args.preventDefault();\r\n                if (!e.args.shiftKey) {\r\n                    InsertHtml.Insert(this.contentRenderer.getDocument(), '&nbsp;&nbsp;&nbsp;&nbsp;');\r\n                    this.rangeCollection.push(this.nodeSelectionObj.getRange(this.contentRenderer.getDocument()));\r\n                }\r\n                else if (this.rangeCollection.length > 0 &&\r\n                    this.rangeCollection[this.rangeCollection.length - 1].startContainer.textContent.length === 4) {\r\n                    var textCont = this.rangeCollection[this.rangeCollection.length - 1].startContainer;\r\n                    this.nodeSelectionObj.setSelectionText(this.contentRenderer.getDocument(), textCont, textCont, 0, textCont.textContent.length);\r\n                    InsertHtml.Insert(this.contentRenderer.getDocument(), document.createTextNode(''));\r\n                    this.rangeCollection.pop();\r\n                }\r\n            }\r\n        }\r\n        if (e.args.action === 'space' ||\r\n            e.args.action === 'enter') {\r\n            this.spaceLink(e.args);\r\n        }\r\n    };\r\n    HtmlEditor.prototype.onPaste = function (e) {\r\n        var regex = new RegExp(/([^\\S]|^)(((https?\\:\\/\\/)|(www\\.))(\\S+))/gi);\r\n        if (e.text.match(regex)) {\r\n            e.args.preventDefault();\r\n            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\r\n            var saveSelection = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());\r\n            var args = { url: e.text, text: '', selection: saveSelection, action: 'Paste' };\r\n            this.parent.formatter.editorManager.execCommand('Links', 'CreateLink', null, null, args, args);\r\n        }\r\n    };\r\n    HtmlEditor.prototype.spaceLink = function (e) {\r\n        var range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());\r\n        var selectNodeEle = this.nodeSelectionObj.getParentNodeCollection(range);\r\n        var text = range.startContainer.textContent;\r\n        var splitText = text.split(' ');\r\n        var urlText = splitText[splitText.length - 1];\r\n        var regex = new RegExp(/([^\\S]|^)(((https?\\:\\/\\/)|(www\\.))(\\S+))/gi);\r\n        if (selectNodeEle[0].nodeName !== 'A' && urlText.match(regex)) {\r\n            var selection = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());\r\n            var selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\r\n            var value = {\r\n                url: urlText,\r\n                selection: selection, selectParent: selectParent,\r\n                text: '',\r\n                title: '',\r\n                target: ''\r\n            };\r\n            this.parent.formatter.process(this.parent, {\r\n                item: {\r\n                    'command': 'Links',\r\n                    'subCommand': 'CreateLink'\r\n                }\r\n            }, e, value);\r\n        }\r\n    };\r\n    HtmlEditor.prototype.onToolbarClick = function (args) {\r\n        var save;\r\n        var selectNodeEle;\r\n        var selectParentEle;\r\n        var item = args.item;\r\n        var closestElement = closest(args.originalEvent.target, '.e-rte-quick-popup');\r\n        if (closestElement && !closestElement.classList.contains('e-rte-inline-popup')) {\r\n            if (!(item.subCommand === 'SourceCode' || item.subCommand === 'Preview' ||\r\n                item.subCommand === 'FontColor' || item.subCommand === 'BackgroundColor')) {\r\n                var range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());\r\n                save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());\r\n                selectNodeEle = this.nodeSelectionObj.getNodeCollection(range);\r\n                selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);\r\n            }\r\n            if (item.command === 'Images') {\r\n                this.parent.notify(events.imageToolbarAction, {\r\n                    member: 'image', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle\r\n                });\r\n            }\r\n            if (item.command === 'Links') {\r\n                this.parent.notify(events.linkToolbarAction, {\r\n                    member: 'link', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle\r\n                });\r\n            }\r\n            if (item.command === 'Table') {\r\n                this.parent.notify(events.tableToolbarAction, {\r\n                    member: 'table', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            var linkDialog = this.parent.element.querySelector('#' + this.parent.getID() + '_rtelink');\r\n            var imageDialog = this.parent.element.querySelector('#' + this.parent.getID() + '_image');\r\n            if (!(item.subCommand === 'SourceCode' || item.subCommand === 'Preview' ||\r\n                item.subCommand === 'FontColor' || item.subCommand === 'BackgroundColor')) {\r\n                var range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());\r\n                if (isNullOrUndefined(linkDialog) && isNullOrUndefined(imageDialog)) {\r\n                    save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());\r\n                }\r\n                selectNodeEle = this.nodeSelectionObj.getNodeCollection(range);\r\n                selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);\r\n            }\r\n            switch (item.subCommand) {\r\n                case 'Maximize':\r\n                    this.parent.notify(events.enableFullScreen, { args: args });\r\n                    break;\r\n                case 'Minimize':\r\n                    this.parent.notify(events.disableFullScreen, { args: args });\r\n                    break;\r\n                case 'CreateLink':\r\n                    this.parent.notify(events.insertLink, {\r\n                        member: 'link', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle\r\n                    });\r\n                    break;\r\n                case 'Print':\r\n                    this.parent.print();\r\n                    break;\r\n                case 'Image':\r\n                    this.parent.notify(events.insertImage, {\r\n                        member: 'image', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle\r\n                    });\r\n                    break;\r\n                case 'CreateTable':\r\n                    this.parent.notify(events.createTable, {\r\n                        member: 'table', args: args, selection: save\r\n                    });\r\n                    break;\r\n                case 'SourceCode':\r\n                    this.parent.notify(events.sourceCode, { member: 'viewSource', args: args });\r\n                    break;\r\n                case 'Preview':\r\n                    this.parent.notify(events.updateSource, { member: 'updateSource', args: args });\r\n                    break;\r\n                case 'FontColor':\r\n                case 'BackgroundColor':\r\n                    break;\r\n                default:\r\n                    this.parent.formatter.process(this.parent, args, args.originalEvent, null);\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    HtmlEditor.prototype.renderColorPicker = function (args) {\r\n        this.colorPickerModule.renderColorPickerInput(args);\r\n    };\r\n    HtmlEditor.prototype.instantiateRenderer = function () {\r\n        if (this.parent.iframeSettings.enable) {\r\n            this.renderFactory.addRenderer(RenderType.Content, new IframeContentRender(this.parent, this.locator));\r\n        }\r\n        else {\r\n            this.renderFactory.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));\r\n        }\r\n    };\r\n    HtmlEditor.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.initialEnd, this.render);\r\n        this.parent.off(events.modelChanged, this.onPropertyChanged);\r\n        this.parent.off(events.htmlToolbarClick, this.onToolbarClick);\r\n        this.parent.off(events.renderColorPicker, this.renderColorPicker);\r\n        this.parent.off(events.destroy, this.destroy);\r\n        this.parent.off(events.keyDown, this.onKeyDown);\r\n        this.parent.off(events.initialLoad, this.instantiateRenderer);\r\n        this.parent.off(events.selectAll, this.selectAll);\r\n        this.parent.off(events.selectRange, this.selectRange);\r\n        this.parent.off(events.getSelectedHtml, this.getSelectedHtml);\r\n        this.parent.off(events.selectionSave, this.onSelectionSave);\r\n        this.parent.off(events.selectionRestore, this.onSelectionRestore);\r\n        this.parent.off(events.readOnlyMode, this.updateReadOnly);\r\n        this.parent.off(events.paste, this.onPaste);\r\n    };\r\n    HtmlEditor.prototype.render = function () {\r\n        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\r\n        var editElement = this.contentRenderer.getEditPanel();\r\n        var option = { undoRedoSteps: this.parent.undoRedoSteps, undoRedoTimer: this.parent.undoRedoTimer };\r\n        if (isNullOrUndefined(this.parent.formatter)) {\r\n            this.parent.formatter = new HTMLFormatter({\r\n                currentDocument: this.contentRenderer.getDocument(),\r\n                element: editElement,\r\n                options: option\r\n            });\r\n        }\r\n        else {\r\n            this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);\r\n        }\r\n        if (this.parent.toolbarSettings.enable) {\r\n            this.toolbarUpdate = new HtmlToolbarStatus(this.parent);\r\n        }\r\n        this.parent.notify(events.bindOnEnd, {});\r\n    };\r\n    /**\r\n     * Called internally if any of the property value changed.\r\n     * @hidden\r\n     */\r\n    HtmlEditor.prototype.onPropertyChanged = function (e) {\r\n        // On property code change here\r\n    };\r\n    /**\r\n     * For internal use only - Get the module name.\r\n     */\r\n    HtmlEditor.prototype.getModuleName = function () {\r\n        return 'htmlEditor';\r\n    };\r\n    /**\r\n     * For selecting all content in RTE\r\n     * @private\r\n     */\r\n    HtmlEditor.prototype.selectAll = function () {\r\n        this.parent.contentModule.getEditPanel().focus();\r\n        this.parent.contentModule.getDocument().execCommand('selectAll', false, null);\r\n    };\r\n    /**\r\n     * For selecting all content in RTE\r\n     * @private\r\n     */\r\n    HtmlEditor.prototype.selectRange = function (e) {\r\n        this.parent.formatter.editorManager.nodeSelection.setRange(this.parent.contentModule.getDocument(), e.range);\r\n    };\r\n    /**\r\n     * For get a selected text in RTE\r\n     * @private\r\n     */\r\n    HtmlEditor.prototype.getSelectedHtml = function (e) {\r\n        e.callBack(this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()).toString());\r\n    };\r\n    return HtmlEditor;\r\n}());\r\nexport { HtmlEditor };\r\n",null]}