{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\toolbar-action.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\toolbar-action.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';\r\nimport * as events from '../base/constant';\r\nimport { ServiceLocator } from '../services/service-locator';\r\nimport { RendererFactory } from '../services/renderer-factory';\r\n/**\r\n * `ToolbarAction` module is used to toolbar click action\r\n */\r\nvar ToolbarAction = /*@__PURE__*/ (function () {\r\n    function ToolbarAction(parent) {\r\n        this.parent = parent;\r\n        this.addEventListener();\r\n        this.serviceLocator = new ServiceLocator;\r\n        this.serviceLocator.register('rendererFactory', new RendererFactory);\r\n    }\r\n    ToolbarAction.prototype.addEventListener = function () {\r\n        this.parent.on(events.toolbarClick, this.toolbarClick, this);\r\n        this.parent.on(events.dropDownSelect, this.dropDownSelect, this);\r\n        this.parent.on(events.colorPickerChanged, this.renderSelection, this);\r\n        this.parent.on(events.destroy, this.removeEventListener, this);\r\n    };\r\n    ToolbarAction.prototype.toolbarClick = function (args) {\r\n        if (isNOU(args.item)) {\r\n            return;\r\n        }\r\n        if (!isNOU(args.item.controlParent)) {\r\n            var activeEle = args.item.controlParent\r\n                .activeEle;\r\n            if (activeEle) {\r\n                activeEle.tabIndex = -1;\r\n            }\r\n        }\r\n        this.parent.notify(events.htmlToolbarClick, args);\r\n        this.parent.notify(events.markdownToolbarClick, args);\r\n    };\r\n    ToolbarAction.prototype.dropDownSelect = function (e) {\r\n        this.parent.notify(events.selectionRestore, {});\r\n        if (!(document.body.contains(document.body.querySelector('.e-rte-quick-toolbar'))\r\n            && e.item && (e.item.command === 'Images' || e.item.command === 'Display' || e.item.command === 'Table'))) {\r\n            this.parent.formatter.process(this.parent, e, e.originalEvent, null);\r\n        }\r\n        this.parent.notify(events.selectionSave, {});\r\n    };\r\n    ToolbarAction.prototype.renderSelection = function (args) {\r\n        this.parent.notify(events.selectionRestore, {});\r\n        this.parent.formatter.process(this.parent, args, args.originalEvent, null);\r\n        this.parent.notify(events.selectionSave, {});\r\n    };\r\n    ToolbarAction.prototype.removeEventListener = function () {\r\n        this.parent.off(events.toolbarClick, this.toolbarClick);\r\n        this.parent.off(events.dropDownSelect, this.dropDownSelect);\r\n        this.parent.off(events.colorPickerChanged, this.renderSelection);\r\n        this.parent.off(events.destroy, this.removeEventListener);\r\n    };\r\n    return ToolbarAction;\r\n}());\r\nexport { ToolbarAction };\r\n",null]}