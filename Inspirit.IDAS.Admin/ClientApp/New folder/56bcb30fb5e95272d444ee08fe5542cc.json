{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\formatter\\formatter.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\formatter\\formatter.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import { extend, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\r\nimport * as CONSTANT from '../base/constant';\r\nimport { updateUndoRedoStatus } from '../base/util';\r\nimport { KEY_DOWN, KEY_UP } from './../../common/constant';\r\n/**\r\n * Formatter\r\n * @hidden\r\n */\r\nvar Formatter = /*@__PURE__*/ (function () {\r\n    function Formatter() {\r\n    }\r\n    /**\r\n     * To execute the command\r\n     * @param  {IRichTextEditor} self\r\n     * @param  {ActionBeginEventArgs} args\r\n     * @param  {MouseEvent|KeyboardEvent} event\r\n     * @param  {NotifyArgs} value\r\n     */\r\n    Formatter.prototype.process = function (self, args, event, value) {\r\n        var selection = self.contentModule.getDocument().getSelection();\r\n        var range = (selection.rangeCount > 0) ? selection.getRangeAt(selection.rangeCount - 1) : null;\r\n        if (!isNullOrUndefined(args)\r\n            && args.item.command\r\n            && args.item.command !== 'Table'\r\n            && args.item.command !== 'Actions'\r\n            && args.item.command !== 'Links'\r\n            && args.item.command !== 'Images'\r\n            && range\r\n            && !(self.contentModule.getEditPanel().contains(this.getAncestorNode(range.commonAncestorContainer))\r\n                || self.contentModule.getEditPanel() === range.commonAncestorContainer\r\n                || self.contentModule.getPanel() === range.commonAncestorContainer)) {\r\n            return;\r\n        }\r\n        if (isNullOrUndefined(args)) {\r\n            var action = event.action;\r\n            if (action !== 'tab' && action !== 'enter' && action !== 'space' && action !== 'escape') {\r\n                args = {};\r\n                var items = {\r\n                    originalEvent: event, cancel: false,\r\n                    requestType: action || (event.key + 'Key'),\r\n                    itemCollection: value\r\n                };\r\n                extend(args, args, items, true);\r\n                self.trigger(CONSTANT.actionBegin, args);\r\n                if (args.cancel) {\r\n                    if (action === 'paste' || action === 'cut' || action === 'copy') {\r\n                        event.preventDefault();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            this.editorManager.observer.notify((event.type === 'keydown' ? KEY_DOWN : KEY_UP), {\r\n                event: event,\r\n                callBack: this.onSuccess.bind(this, self),\r\n                value: value\r\n            });\r\n        }\r\n        else if (!isNullOrUndefined(args) && args.item.command && args.item.subCommand && ((args.item.command !== args.item.subCommand\r\n            && args.item.command !== 'Font')\r\n            || ((args.item.subCommand === 'FontName' || args.item.subCommand === 'FontSize') && args.name === 'dropDownSelect')\r\n            || ((args.item.subCommand === 'BackgroundColor' || args.item.subCommand === 'FontColor')\r\n                && args.name === 'colorPickerChanged'))) {\r\n            extend(args, args, { requestType: args.item.subCommand, cancel: false, itemCollection: value }, true);\r\n            self.trigger(CONSTANT.actionBegin, args);\r\n            if (args.cancel) {\r\n                return;\r\n            }\r\n            if (this.getUndoRedoStack().length === 0 && args.item.command !== 'Links' && args.item.command !== 'Images') {\r\n                this.saveData();\r\n            }\r\n            self.isBlur = false;\r\n            self.contentModule.getEditPanel().focus();\r\n            var command = args.item.subCommand.toLocaleLowerCase();\r\n            if (command === 'paste' || command === 'cut' || command === 'copy') {\r\n                self.clipboardAction(command, event);\r\n            }\r\n            else {\r\n                this.editorManager.observer.notify(CONSTANT.checkUndo, { subCommand: args.item.subCommand });\r\n                this.editorManager.execCommand(args.item.command, args.item.subCommand, event, this.onSuccess.bind(this, self), args.item.value, value);\r\n            }\r\n        }\r\n        this.enableUndo(self);\r\n    };\r\n    Formatter.prototype.getAncestorNode = function (node) {\r\n        node = node.nodeType === 3 ? node.parentNode : node;\r\n        return node;\r\n    };\r\n    Formatter.prototype.onKeyHandler = function (self, e) {\r\n        var _this = this;\r\n        this.editorManager.observer.notify(KEY_UP, {\r\n            event: e, callBack: function () {\r\n                _this.enableUndo(self);\r\n            }\r\n        });\r\n    };\r\n    Formatter.prototype.onSuccess = function (self, events) {\r\n        this.enableUndo(self);\r\n        self.notify(CONSTANT.execCommandCallBack, events);\r\n        self.trigger(CONSTANT.actionComplete, events);\r\n        if (events.requestType === 'Images' || events.requestType === 'Links' && self.editorMode === 'HTML') {\r\n            var args = events;\r\n            if (events.requestType === 'Links' && events.event &&\r\n                events.event.type === 'keydown' &&\r\n                events.event.keyCode === 32) {\r\n                return;\r\n            }\r\n            self.notify(CONSTANT.insertCompleted, {\r\n                args: args.event, type: events.requestType, isNotify: true,\r\n                elements: args.elements\r\n            });\r\n        }\r\n        self.autoResize();\r\n    };\r\n    /**\r\n     * Save the data for undo and redo action.\r\n     */\r\n    Formatter.prototype.saveData = function (e) {\r\n        this.editorManager.undoRedoManager.saveData(e);\r\n    };\r\n    Formatter.prototype.getUndoStatus = function () {\r\n        return this.editorManager.undoRedoManager.getUndoStatus();\r\n    };\r\n    Formatter.prototype.getUndoRedoStack = function () {\r\n        return this.editorManager.undoRedoManager.undoRedoStack;\r\n    };\r\n    Formatter.prototype.enableUndo = function (self) {\r\n        var status = this.getUndoStatus();\r\n        if (self.inlineMode.enable && !Browser.isDevice) {\r\n            updateUndoRedoStatus(self.quickToolbarModule.inlineQTBar.quickTBarObj, status);\r\n        }\r\n        else {\r\n            if (self.toolbarModule) {\r\n                updateUndoRedoStatus(self.toolbarModule.baseToolbar, status);\r\n            }\r\n        }\r\n    };\r\n    return Formatter;\r\n}());\r\nexport { Formatter };\r\n",null]}