{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\formats.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\formats.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import * as EVENTS from './../../common/constant';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\n/**\r\n * Formats internal component\r\n * @hidden\r\n */\r\nvar Formats = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the Formats plugin\r\n     * @hidden\r\n     */\r\n    function Formats(parent) {\r\n        this.parent = parent;\r\n        this.addEventListener();\r\n    }\r\n    Formats.prototype.addEventListener = function () {\r\n        this.parent.observer.on(EVENTS.FORMAT_TYPE, this.applyFormats, this);\r\n    };\r\n    Formats.prototype.getParentNode = function (node) {\r\n        for (; node.parentNode && node.parentNode !== this.parent.editableElement; null) {\r\n            node = node.parentNode;\r\n        }\r\n        return node;\r\n    };\r\n    Formats.prototype.applyFormats = function (e) {\r\n        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\r\n        var save = this.parent.nodeSelection.save(range, this.parent.currentDocument);\r\n        this.parent.domNode.setMarker(save);\r\n        var formatsNodes = this.parent.domNode.blockNodes();\r\n        for (var i = 0; i < formatsNodes.length; i++) {\r\n            var parentNode = void 0;\r\n            var replaceHTML = void 0;\r\n            if (e.subCommand.toLowerCase() === 'blockquote') {\r\n                parentNode = this.getParentNode(formatsNodes[i]);\r\n                replaceHTML = this.parent.domNode.isList(parentNode) ||\r\n                    parentNode.tagName === 'TABLE' ? parentNode.outerHTML : parentNode.innerHTML;\r\n            }\r\n            else {\r\n                parentNode = formatsNodes[i];\r\n                replaceHTML = parentNode.innerHTML;\r\n            }\r\n            if (e.subCommand.toLowerCase() === parentNode.tagName.toLowerCase() ||\r\n                isNullOrUndefined(parentNode.parentNode) || parentNode.tagName === 'LI') {\r\n                continue;\r\n            }\r\n            this.cleanFormats(parentNode, e.subCommand);\r\n            var replaceTag = this.parent.domNode.createTagString(e.subCommand, parentNode, replaceHTML.replace(/>\\s+</g, '><'));\r\n            this.parent.domNode.replaceWith(parentNode, replaceTag);\r\n        }\r\n        this.parent.editableElement.focus();\r\n        save = this.parent.domNode.saveMarker(save);\r\n        save.restore();\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.domNode.blockNodes()\r\n            });\r\n        }\r\n    };\r\n    Formats.prototype.cleanFormats = function (element, tagName) {\r\n        var ignoreAttr = ['display', 'font-size', 'margin-top', 'margin-bottom', 'margin-left', 'margin-right', 'font-weight'];\r\n        tagName = tagName.toLowerCase();\r\n        for (var i = 0; i < ignoreAttr.length && (tagName !== 'p' && tagName !== 'blockquote' && tagName !== 'pre'); i++) {\r\n            element.style.removeProperty(ignoreAttr[i]);\r\n        }\r\n    };\r\n    return Formats;\r\n}());\r\nexport { Formats };\r\n",null]}