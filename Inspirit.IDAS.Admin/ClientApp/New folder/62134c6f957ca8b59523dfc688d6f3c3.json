{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\toolbar.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\toolbar.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { addClass, Browser, EventHandler, detach, removeClass, select, selectAll, KeyboardEvents } from '@syncfusion/ej2-base';\r\nimport { isNullOrUndefined as isNOU, closest, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { setStyleAttribute, extend } from '@syncfusion/ej2-base';\r\nimport * as events from '../base/constant';\r\nimport * as classes from '../base/classes';\r\nimport { RenderType, ToolbarType } from '../base/enum';\r\nimport { setToolbarStatus, updateUndoRedoStatus, getTBarItemsIndex, getCollection, toObjectLowerCase } from '../base/util';\r\nimport * as model from '../models/items';\r\nimport { ToolbarRenderer } from '../renderer/toolbar-renderer';\r\nimport { BaseToolbar } from './base-toolbar';\r\nimport { DropDownButtons } from './dropdown-buttons';\r\nimport { ToolbarAction } from './toolbar-action';\r\n/**\r\n * `Toolbar` module is used to handle Toolbar actions.\r\n */\r\nvar Toolbar = /*@__PURE__*/ (function () {\r\n    function Toolbar(parent, serviceLocator) {\r\n        this.parent = parent;\r\n        this.isToolbar = false;\r\n        this.locator = serviceLocator;\r\n        this.isTransformChild = false;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        model.updateDropDownLocale(this.parent);\r\n        this.renderFactory.addRenderer(RenderType.Toolbar, new ToolbarRenderer(this.parent));\r\n        this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);\r\n        this.baseToolbar = new BaseToolbar(this.parent, this.locator);\r\n        this.addEventListener();\r\n        if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {\r\n            extend(this.tools, model.tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);\r\n        }\r\n        else {\r\n            this.tools = model.tools;\r\n        }\r\n    }\r\n    Toolbar.prototype.initializeInstance = function () {\r\n        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\r\n        this.editableElement = this.contentRenderer.getEditPanel();\r\n        this.editPanel = this.contentRenderer.getPanel();\r\n    };\r\n    Toolbar.prototype.toolbarBindEvent = function () {\r\n        this.keyBoardModule = new KeyboardEvents(this.getToolbarElement(), {\r\n            keyAction: this.toolBarKeyDown.bind(this), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'\r\n        });\r\n    };\r\n    Toolbar.prototype.toolBarKeyDown = function (e) {\r\n        switch (e.action) {\r\n            case 'escape':\r\n                this.parent.contentModule.getEditPanel().focus();\r\n                break;\r\n        }\r\n    };\r\n    Toolbar.prototype.createToolbarElement = function () {\r\n        this.tbElement = this.parent.createElement('div', { id: this.parent.getID() + '_toolbar' });\r\n        if (!Browser.isDevice && this.parent.inlineMode.enable) {\r\n            return;\r\n        }\r\n        else {\r\n            if (this.parent.toolbarSettings.enableFloating && !this.parent.inlineMode.enable) {\r\n                this.tbWrapper = this.parent.createElement('div', {\r\n                    id: this.parent.getID() + '_toolbar_wrapper',\r\n                    innerHTML: this.tbElement.outerHTML,\r\n                    className: classes.CLS_TB_WRAP\r\n                });\r\n                this.tbElement = this.tbWrapper.firstElementChild;\r\n                this.parent.element.insertBefore(this.tbWrapper, this.editPanel);\r\n            }\r\n            else {\r\n                this.parent.element.insertBefore(this.tbElement, this.editPanel);\r\n            }\r\n        }\r\n    };\r\n    Toolbar.prototype.getToolbarMode = function () {\r\n        var tbMode;\r\n        switch (this.parent.toolbarSettings.type) {\r\n            case ToolbarType.Expand:\r\n                tbMode = 'Extended';\r\n                break;\r\n            default:\r\n                tbMode = 'MultiRow';\r\n        }\r\n        return tbMode;\r\n    };\r\n    Toolbar.prototype.checkToolbarResponsive = function (ele) {\r\n        if (!Browser.isDevice) {\r\n            return false;\r\n        }\r\n        this.baseToolbar.render({\r\n            container: ((this.parent.inlineMode.enable) ? 'quick' : 'toolbar'),\r\n            items: this.parent.toolbarSettings.items,\r\n            mode: 'MultiRow',\r\n            target: ele\r\n        });\r\n        addClass([ele], ['e-rte-tb-mobile']);\r\n        if (this.parent.inlineMode.enable) {\r\n            this.addFixedTBarClass();\r\n        }\r\n        else {\r\n            addClass([ele], [classes.CLS_TB_STATIC]);\r\n        }\r\n        this.wireEvents();\r\n        this.dropDownModule.renderDropDowns({\r\n            container: ele,\r\n            containerType: ((this.parent.inlineMode.enable) ? 'quick' : 'toolbar'),\r\n            items: this.parent.toolbarSettings.items\r\n        });\r\n        this.parent.notify(events.renderColorPicker, {\r\n            container: this.tbElement,\r\n            containerType: 'toolbar',\r\n            items: this.parent.toolbarSettings.items\r\n        });\r\n        return true;\r\n    };\r\n    Toolbar.prototype.checkIsTransformChild = function () {\r\n        this.isTransformChild = false;\r\n        var transformElements = selectAll('[style*=\"transform\"]', document);\r\n        for (var i = 0; i < transformElements.length; i++) {\r\n            if (!isNullOrUndefined(transformElements[i].contains) && transformElements[i].contains(this.parent.element)) {\r\n                this.isTransformChild = true;\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    Toolbar.prototype.toggleFloatClass = function (e) {\r\n        var topValue;\r\n        var isBody = false;\r\n        var isFloat = false;\r\n        var scrollParent;\r\n        var floatOffset = this.parent.floatingToolbarOffset;\r\n        if (e && e.target !== document) {\r\n            scrollParent = e.target;\r\n        }\r\n        else {\r\n            isBody = true;\r\n            scrollParent = document.body;\r\n        }\r\n        var tbHeight = this.getToolbarHeight() + this.getExpandTBarPopHeight();\r\n        if (this.isTransformChild) {\r\n            topValue = 0;\r\n            var scrollParentRelativeTop = 0;\r\n            var trgHeight = this.parent.element.offsetHeight;\r\n            if (isBody) {\r\n                var bodyStyle = window.getComputedStyle(scrollParent);\r\n                scrollParentRelativeTop = parseFloat(bodyStyle.marginTop.split('px')[0]) + parseFloat(bodyStyle.paddingTop.split('px')[0]);\r\n            }\r\n            var targetTop = this.parent.element.getBoundingClientRect().top;\r\n            var scrollParentYOffset = (Browser.isMSPointer && isBody) ? window.pageYOffset : scrollParent.parentElement.scrollTop;\r\n            var scrollParentRect = scrollParent.getBoundingClientRect();\r\n            var scrollParentTop = (!isBody) ? scrollParentRect.top : (scrollParentRect.top + scrollParentYOffset);\r\n            var outOfRange = ((targetTop - ((!isBody) ? scrollParentTop : 0)) + trgHeight > tbHeight + floatOffset) ? false : true;\r\n            if (targetTop > (scrollParentTop + floatOffset) || targetTop < -trgHeight || ((targetTop < 0) ? outOfRange : false)) {\r\n                isFloat = false;\r\n                removeClass([this.tbElement], [classes.CLS_TB_ABS_FLOAT]);\r\n            }\r\n            else if (targetTop < (scrollParentTop + floatOffset)) {\r\n                if (targetTop < 0) {\r\n                    topValue = (-targetTop) + scrollParentTop;\r\n                }\r\n                else {\r\n                    topValue = scrollParentTop - targetTop;\r\n                }\r\n                topValue = (isBody) ? topValue - scrollParentRelativeTop : topValue;\r\n                addClass([this.tbElement], [classes.CLS_TB_ABS_FLOAT]);\r\n                isFloat = true;\r\n            }\r\n        }\r\n        else {\r\n            var parent_1 = this.parent.element.getBoundingClientRect();\r\n            if (window.innerHeight < parent_1.top) {\r\n                return;\r\n            }\r\n            topValue = (e && e.target !== document) ? scrollParent.getBoundingClientRect().top : 0;\r\n            if ((parent_1.bottom < (floatOffset + tbHeight + topValue)) || parent_1.bottom < 0 || parent_1.top > floatOffset + topValue) {\r\n                isFloat = false;\r\n            }\r\n            else if (parent_1.top < floatOffset) {\r\n                isFloat = true;\r\n            }\r\n        }\r\n        if (!isFloat) {\r\n            removeClass([this.tbElement], [classes.CLS_TB_FLOAT]);\r\n            setStyleAttribute(this.tbElement, { top: 0 + 'px', width: '100%' });\r\n        }\r\n        else {\r\n            addClass([this.tbElement], [classes.CLS_TB_FLOAT]);\r\n            setStyleAttribute(this.tbElement, { width: this.parent.element.offsetWidth + 'px', top: (floatOffset + topValue) + 'px' });\r\n        }\r\n    };\r\n    Toolbar.prototype.renderToolbar = function () {\r\n        this.initializeInstance();\r\n        this.createToolbarElement();\r\n        if (this.checkToolbarResponsive(this.tbElement)) {\r\n            return;\r\n        }\r\n        if (this.parent.inlineMode.enable) {\r\n            this.parent.notify(events.renderInlineToolbar, {});\r\n        }\r\n        else {\r\n            this.baseToolbar.render({\r\n                container: 'toolbar',\r\n                items: this.parent.toolbarSettings.items,\r\n                mode: this.getToolbarMode(),\r\n                target: this.tbElement\r\n            });\r\n            if (!this.parent.inlineMode.enable) {\r\n                if (this.parent.toolbarSettings.enableFloating) {\r\n                    this.checkIsTransformChild();\r\n                    this.toggleFloatClass();\r\n                }\r\n                if (this.parent.toolbarSettings.type === ToolbarType.Expand) {\r\n                    addClass([this.parent.element], [classes.CLS_RTE_EXPAND_TB]);\r\n                }\r\n            }\r\n        }\r\n        this.wireEvents();\r\n        if (this.parent.inlineMode.enable) {\r\n            this.addFixedTBarClass();\r\n        }\r\n        if (!this.parent.inlineMode.enable) {\r\n            this.dropDownModule.renderDropDowns({\r\n                container: this.tbElement,\r\n                containerType: 'toolbar',\r\n                items: this.parent.toolbarSettings.items\r\n            });\r\n            this.parent.notify(events.renderColorPicker, {\r\n                container: this.tbElement,\r\n                containerType: 'toolbar',\r\n                items: this.parent.toolbarSettings.items\r\n            });\r\n            this.refreshToolbarOverflow();\r\n        }\r\n    };\r\n    Toolbar.prototype.addFixedTBarClass = function () {\r\n        addClass([this.tbElement], [classes.CLS_TB_FIXED]);\r\n    };\r\n    Toolbar.prototype.removeFixedTBarClass = function () {\r\n        removeClass([this.tbElement], [classes.CLS_TB_FIXED]);\r\n    };\r\n    Toolbar.prototype.showFixedTBar = function () {\r\n        addClass([this.tbElement], [classes.CLS_SHOW]);\r\n        if (Browser.isIos) {\r\n            addClass([this.tbElement], [classes.CLS_TB_IOS_FIX]);\r\n        }\r\n    };\r\n    Toolbar.prototype.hideFixedTBar = function () {\r\n        (!this.isToolbar) ? removeClass([this.tbElement], [classes.CLS_SHOW, classes.CLS_TB_IOS_FIX]) : this.isToolbar = false;\r\n    };\r\n    Toolbar.prototype.updateItem = function (args) {\r\n        var item = this.tools[args.updateItem.toLocaleLowerCase()];\r\n        var trgItem = this.tools[args.targetItem.toLocaleLowerCase()];\r\n        var index = getTBarItemsIndex(getCollection(trgItem.subCommand), args.baseToolbar.toolbarObj.items)[0];\r\n        if (!isNOU(index)) {\r\n            var prefixId = this.parent.inlineMode.enable ? '_quick_' : '_toolbar_';\r\n            args.baseToolbar.toolbarObj.items[index].id = this.parent.getID() + prefixId + item.id;\r\n            args.baseToolbar.toolbarObj.items[index].prefixIcon = item.icon;\r\n            args.baseToolbar.toolbarObj.items[index].tooltipText = item.tooltip;\r\n            args.baseToolbar.toolbarObj.items[index].subCommand = item.subCommand;\r\n            args.baseToolbar.toolbarObj.dataBind();\r\n        }\r\n        else {\r\n            this.addTBarItem(args, 0);\r\n        }\r\n    };\r\n    Toolbar.prototype.updateToolbarStatus = function (args) {\r\n        var options = {\r\n            args: args,\r\n            dropDownModule: this.dropDownModule,\r\n            parent: this.parent,\r\n            tbElements: selectAll('.' + classes.CLS_TB_ITEM, this.tbElement),\r\n            tbItems: this.baseToolbar.toolbarObj.items\r\n        };\r\n        if (this.parent.inlineMode.enable) {\r\n            setToolbarStatus(options, true);\r\n        }\r\n        else {\r\n            setToolbarStatus(options, false);\r\n        }\r\n    };\r\n    Toolbar.prototype.fullScreen = function (e) {\r\n        this.parent.fullScreenModule.showFullScreen(e);\r\n    };\r\n    Toolbar.prototype.hideScreen = function (e) {\r\n        this.parent.fullScreenModule.hideFullScreen(e);\r\n    };\r\n    Toolbar.prototype.getBaseToolbar = function () {\r\n        return this.baseToolbar;\r\n    };\r\n    Toolbar.prototype.addTBarItem = function (args, index) {\r\n        args.baseToolbar.toolbarObj.addItems([args.baseToolbar.getObject(args.updateItem, 'toolbar')], index);\r\n    };\r\n    Toolbar.prototype.enableTBarItems = function (baseToolbar, items, isEnable) {\r\n        var trgItems = getTBarItemsIndex(getCollection(items), baseToolbar.toolbarObj.items);\r\n        this.tbItems = selectAll('.' + classes.CLS_TB_ITEM, baseToolbar.toolbarObj.element);\r\n        for (var i = 0; i < trgItems.length; i++) {\r\n            var item = this.tbItems[trgItems[i]];\r\n            if (item) {\r\n                baseToolbar.toolbarObj.enableItems(item, isEnable);\r\n            }\r\n        }\r\n        if (!select('.e-rte-srctextarea', this.parent.element)) {\r\n            updateUndoRedoStatus(baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());\r\n        }\r\n    };\r\n    Toolbar.prototype.removeTBarItems = function (items) {\r\n        if (isNullOrUndefined(this.baseToolbar.toolbarObj)) {\r\n            this.baseToolbar = this.parent.getBaseToolbarObject();\r\n        }\r\n        var trgItems = getTBarItemsIndex(getCollection(items), this.baseToolbar.toolbarObj.items);\r\n        this.tbItems = (this.parent.inlineMode.enable) ? selectAll('.' + classes.CLS_TB_ITEM, this.baseToolbar.toolbarObj.element)\r\n            : selectAll('.' + classes.CLS_TB_ITEM, this.parent.element);\r\n        for (var i = 0; i < trgItems.length; i++) {\r\n            this.baseToolbar.toolbarObj.removeItems(this.tbItems[trgItems[i]]);\r\n        }\r\n    };\r\n    Toolbar.prototype.getExpandTBarPopHeight = function () {\r\n        var popHeight = 0;\r\n        if (this.parent.toolbarSettings.type === ToolbarType.Expand && this.tbElement.classList.contains('e-extended-toolbar')) {\r\n            var expandPopup = select('.e-toolbar-extended', this.tbElement);\r\n            if (expandPopup && this.tbElement.classList.contains('e-expand-open')\r\n                || expandPopup && expandPopup.classList.contains('e-popup-open')) {\r\n                addClass([expandPopup], [classes.CLS_VISIBLE]);\r\n                popHeight = popHeight + expandPopup.offsetHeight;\r\n                removeClass([expandPopup], [classes.CLS_VISIBLE]);\r\n            }\r\n            else {\r\n                removeClass([this.tbElement], [classes.CLS_EXPAND_OPEN]);\r\n            }\r\n        }\r\n        return popHeight;\r\n    };\r\n    Toolbar.prototype.getToolbarHeight = function () {\r\n        return this.tbElement.offsetHeight;\r\n    };\r\n    Toolbar.prototype.getToolbarElement = function () {\r\n        return select('.' + classes.CLS_TOOLBAR, this.parent.element);\r\n    };\r\n    Toolbar.prototype.refreshToolbarOverflow = function () {\r\n        this.baseToolbar.toolbarObj.refreshOverflow();\r\n    };\r\n    Toolbar.prototype.isToolbarDestroyed = function () {\r\n        return this.baseToolbar.toolbarObj && !this.baseToolbar.toolbarObj.isDestroyed;\r\n    };\r\n    Toolbar.prototype.destroyToolbar = function () {\r\n        if (this.isToolbarDestroyed()) {\r\n            this.parent.unWireScrollElementsEvents();\r\n            this.unWireEvents();\r\n            this.parent.notify(events.destroyColorPicker, {});\r\n            this.dropDownModule.destroyDropDowns();\r\n            this.baseToolbar.toolbarObj.destroy();\r\n            this.removeEventListener();\r\n            removeClass([this.parent.element], [classes.CLS_RTE_EXPAND_TB]);\r\n            var tbWrapper = select('.' + classes.CLS_TB_WRAP, this.parent.element);\r\n            var tbElement = select('.' + classes.CLS_TOOLBAR, this.parent.element);\r\n            if (!isNullOrUndefined(tbWrapper)) {\r\n                detach(tbWrapper);\r\n            }\r\n            else if (!isNullOrUndefined(tbElement)) {\r\n                detach(tbElement);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Destroys the ToolBar.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    Toolbar.prototype.destroy = function () {\r\n        if (this.isToolbarDestroyed()) {\r\n            this.destroyToolbar();\r\n            if (this.keyBoardModule) {\r\n                this.keyBoardModule.destroy();\r\n            }\r\n        }\r\n    };\r\n    Toolbar.prototype.scrollHandler = function (e) {\r\n        if (this.parent.toolbarSettings.enableFloating) {\r\n            this.toggleFloatClass(e.args);\r\n        }\r\n    };\r\n    Toolbar.prototype.mouseDownHandler = function () {\r\n        if (Browser.isDevice && this.parent.inlineMode.enable) {\r\n            this.showFixedTBar();\r\n        }\r\n    };\r\n    Toolbar.prototype.focusChangeHandler = function () {\r\n        if (Browser.isDevice && this.parent.inlineMode.enable) {\r\n            this.isToolbar = false;\r\n            this.hideFixedTBar();\r\n        }\r\n    };\r\n    Toolbar.prototype.dropDownBeforeOpenHandler = function () {\r\n        this.isToolbar = true;\r\n    };\r\n    Toolbar.prototype.toolbarMouseDownHandler = function (e) {\r\n        var trg = closest(e.target, '.e-hor-nav');\r\n        if (trg && this.parent.toolbarSettings.type === ToolbarType.Expand && !isNOU(trg)) {\r\n            if (!trg.classList.contains('e-nav-active')) {\r\n                removeClass([this.tbElement], [classes.CLS_EXPAND_OPEN]);\r\n                this.parent.setContentHeight('toolbar', false);\r\n            }\r\n            else {\r\n                addClass([this.tbElement], [classes.CLS_EXPAND_OPEN]);\r\n                this.parent.setContentHeight('toolbar', true);\r\n            }\r\n        }\r\n        else if (Browser.isDevice || this.parent.inlineMode.enable) {\r\n            this.isToolbar = true;\r\n        }\r\n        if (isNOU(trg) && this.parent.toolbarSettings.type === ToolbarType.Expand) {\r\n            removeClass([this.tbElement], [classes.CLS_EXPAND_OPEN]);\r\n        }\r\n    };\r\n    Toolbar.prototype.wireEvents = function () {\r\n        EventHandler.add(this.tbElement, 'click mousedown', this.toolbarMouseDownHandler, this);\r\n    };\r\n    Toolbar.prototype.unWireEvents = function () {\r\n        EventHandler.remove(this.tbElement, 'click mousedown', this.toolbarMouseDownHandler);\r\n    };\r\n    Toolbar.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.dropDownModule = new DropDownButtons(this.parent, this.locator);\r\n        this.toolbarActionModule = new ToolbarAction(this.parent);\r\n        this.parent.on(events.initialEnd, this.renderToolbar, this);\r\n        if (!this.parent.inlineMode.enable) {\r\n            this.parent.on(events.scroll, this.scrollHandler, this);\r\n            this.parent.on(events.bindOnEnd, this.toolbarBindEvent, this);\r\n            this.parent.on(events.toolbarUpdated, this.updateToolbarStatus, this);\r\n        }\r\n        this.parent.on(events.modelChanged, this.onPropertyChanged, this);\r\n        this.parent.on(events.refreshBegin, this.onRefresh, this);\r\n        this.parent.on(events.destroy, this.destroy, this);\r\n        this.parent.on(events.enableFullScreen, this.fullScreen, this);\r\n        this.parent.on(events.disableFullScreen, this.hideScreen, this);\r\n        this.parent.on(events.updateToolbarItem, this.updateItem, this);\r\n        this.parent.on(events.beforeDropDownOpen, this.dropDownBeforeOpenHandler, this);\r\n        this.parent.on(events.expandPopupClick, this.parent.setContentHeight, this.parent);\r\n        this.parent.on(events.focusChange, this.focusChangeHandler, this);\r\n        this.parent.on(events.mouseDown, this.mouseDownHandler, this);\r\n        this.parent.on(events.sourceCodeMouseDown, this.mouseDownHandler, this);\r\n    };\r\n    Toolbar.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.initialEnd, this.renderToolbar);\r\n        if (!this.parent.inlineMode.enable) {\r\n            this.parent.off(events.scroll, this.scrollHandler);\r\n            this.parent.off(events.bindOnEnd, this.toolbarBindEvent);\r\n            this.parent.off(events.toolbarUpdated, this.updateToolbarStatus);\r\n        }\r\n        this.parent.off(events.modelChanged, this.onPropertyChanged);\r\n        this.parent.off(events.destroy, this.destroy);\r\n        this.parent.off(events.enableFullScreen, this.parent.fullScreenModule.showFullScreen);\r\n        this.parent.off(events.disableFullScreen, this.parent.fullScreenModule.hideFullScreen);\r\n        this.parent.off(events.updateToolbarItem, this.updateItem);\r\n        this.parent.off(events.beforeDropDownOpen, this.dropDownBeforeOpenHandler);\r\n        this.parent.off(events.expandPopupClick, this.parent.setContentHeight);\r\n        this.parent.off(events.focusChange, this.focusChangeHandler);\r\n        this.parent.off(events.mouseDown, this.mouseDownHandler);\r\n        this.parent.off(events.sourceCodeMouseDown, this.mouseDownHandler);\r\n    };\r\n    Toolbar.prototype.onRefresh = function () {\r\n        this.refreshToolbarOverflow();\r\n        this.parent.setContentHeight();\r\n    };\r\n    /**\r\n     * Called internally if any of the property value changed.\r\n     * @hidden\r\n     */\r\n    Toolbar.prototype.onPropertyChanged = function (e) {\r\n        if (e.module !== this.getModuleName()) {\r\n            return;\r\n        }\r\n        if (isNullOrUndefined(this.baseToolbar.toolbarObj)) {\r\n            this.baseToolbar = this.parent.getBaseToolbarObject();\r\n        }\r\n        var tbWrapper = select('.' + classes.CLS_TB_WRAP, this.parent.element);\r\n        var tbElement = select('.' + classes.CLS_TOOLBAR, this.parent.element);\r\n        if (tbElement || tbWrapper) {\r\n            this.destroyToolbar();\r\n        }\r\n        if (this.parent.toolbarSettings.enable) {\r\n            this.addEventListener();\r\n            this.renderToolbar();\r\n            this.parent.wireScrollElementsEvents();\r\n            if (!select('.e-rte-srctextarea', this.parent.element)) {\r\n                updateUndoRedoStatus(this.baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * For internal use only - Get the module name.\r\n     */\r\n    Toolbar.prototype.getModuleName = function () {\r\n        return 'toolbar';\r\n    };\r\n    return Toolbar;\r\n}());\r\nexport { Toolbar };\r\n",null]}