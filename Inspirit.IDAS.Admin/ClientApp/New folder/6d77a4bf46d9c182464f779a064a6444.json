{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\base-toolbar.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\base-toolbar.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { RenderType } from '../base/enum';\r\nimport { CLS_HR_SEPARATOR } from '../base/classes';\r\nimport * as events from '../base/constant';\r\nimport { getTooltipText, toObjectLowerCase } from '../base/util';\r\nimport { tools, templateItems } from '../models/items';\r\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\r\n/**\r\n * `Toolbar` module is used to handle Toolbar actions.\r\n */\r\nvar BaseToolbar = /*@__PURE__*/ (function () {\r\n    function BaseToolbar(parent, serviceLocator) {\r\n        this.tools = {};\r\n        this.parent = parent;\r\n        this.locator = serviceLocator;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        this.addEventListener();\r\n        if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {\r\n            extend(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);\r\n        }\r\n        else {\r\n            this.tools = tools;\r\n        }\r\n    }\r\n    BaseToolbar.prototype.addEventListener = function () {\r\n        this.parent.on(events.rtlMode, this.setRtl, this);\r\n        this.parent.on(events.destroy, this.removeEventListener, this);\r\n    };\r\n    BaseToolbar.prototype.removeEventListener = function () {\r\n        this.parent.off(events.rtlMode, this.setRtl);\r\n        this.parent.off(events.destroy, this.removeEventListener);\r\n    };\r\n    BaseToolbar.prototype.setRtl = function (args) {\r\n        if (!isNullOrUndefined(this.toolbarObj)) {\r\n            this.toolbarObj.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n    };\r\n    BaseToolbar.prototype.getTemplateObject = function (itemStr, container) {\r\n        var tagName;\r\n        switch (itemStr) {\r\n            case 'fontcolor':\r\n            case 'backgroundcolor':\r\n                tagName = 'span';\r\n                break;\r\n            default:\r\n                tagName = 'button';\r\n                break;\r\n        }\r\n        return {\r\n            command: this.tools[itemStr.toLocaleLowerCase()].command,\r\n            subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand,\r\n            template: this.parent.createElement(tagName, {\r\n                id: this.parent.getID() + '_' + container\r\n                    + '_' + this.tools[itemStr.toLocaleLowerCase()].id\r\n            }).outerHTML,\r\n            tooltipText: getTooltipText(itemStr, this.locator)\r\n        };\r\n    };\r\n    BaseToolbar.prototype.getObject = function (item, container) {\r\n        var itemStr = item.toLowerCase();\r\n        if (templateItems.indexOf(itemStr) !== -1) {\r\n            return this.getTemplateObject(itemStr, container);\r\n        }\r\n        else {\r\n            switch (itemStr) {\r\n                case '|':\r\n                    return { type: 'Separator' };\r\n                case '-':\r\n                    return { type: 'Separator', cssClass: CLS_HR_SEPARATOR };\r\n                default:\r\n                    return {\r\n                        id: this.parent.getID() + '_' + container + '_' + this.tools[itemStr.toLocaleLowerCase()].id,\r\n                        prefixIcon: this.tools[itemStr.toLocaleLowerCase()].icon,\r\n                        tooltipText: getTooltipText(itemStr, this.locator),\r\n                        command: this.tools[itemStr.toLocaleLowerCase()].command,\r\n                        subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand\r\n                    };\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    BaseToolbar.prototype.getItems = function (tbItems, container) {\r\n        if (this.parent.toolbarSettings.items.length < 1) {\r\n            return [];\r\n        }\r\n        var items = [];\r\n        for (var _i = 0, tbItems_1 = tbItems; _i < tbItems_1.length; _i++) {\r\n            var item = tbItems_1[_i];\r\n            switch (typeof item) {\r\n                case 'string':\r\n                    items.push(this.getObject(item, container));\r\n                    break;\r\n                default:\r\n                    items.push(item);\r\n            }\r\n        }\r\n        return items;\r\n    };\r\n    BaseToolbar.prototype.getToolbarOptions = function (args) {\r\n        return {\r\n            target: args.target,\r\n            rteToolbarObj: this,\r\n            items: this.getItems(args.items, args.container),\r\n            overflowMode: args.mode,\r\n            enablePersistence: this.parent.enablePersistence,\r\n            enableRtl: this.parent.enableRtl\r\n        };\r\n    };\r\n    BaseToolbar.prototype.render = function (args) {\r\n        this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);\r\n        this.toolbarRenderer.renderToolbar(this.getToolbarOptions(args));\r\n    };\r\n    return BaseToolbar;\r\n}());\r\nexport { BaseToolbar };\r\n",null]}