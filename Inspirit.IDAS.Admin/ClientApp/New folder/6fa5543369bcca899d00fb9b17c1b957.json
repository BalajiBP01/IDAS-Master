{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\dom-node.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\dom-node.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import * as CONSTANT from './../base/constant';\r\nimport { append, detach, createElement } from '@syncfusion/ej2-base';\r\nimport { NodeSelection } from './../../selection/index';\r\nexport var markerClassName = {\r\n    startSelection: 'e-editor-select-start',\r\n    endSelection: 'e-editor-select-end'\r\n};\r\n/**\r\n * DOMNode internal plugin\r\n * @hidden\r\n */\r\nvar DOMNode = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the DOMNode plugin\r\n     * @hidden\r\n     */\r\n    function DOMNode(parent, currentDocument) {\r\n        this.parent = parent;\r\n        this.nodeSelection = new NodeSelection();\r\n        this.currentDocument = currentDocument;\r\n    }\r\n    DOMNode.prototype.contents = function (element) {\r\n        return (element && 'IFRAME' !== element.tagName ? Array.prototype.slice.call(element.childNodes || []) : []);\r\n    };\r\n    DOMNode.prototype.isBlockNode = function (element) {\r\n        return (!!element && (element.nodeType === Node.ELEMENT_NODE && CONSTANT.BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0));\r\n    };\r\n    DOMNode.prototype.isLink = function (element) {\r\n        return (!!element && (element.nodeType === Node.ELEMENT_NODE && 'a' === element.tagName.toLowerCase()));\r\n    };\r\n    DOMNode.prototype.blockParentNode = function (element) {\r\n        for (; element && element.parentNode !== this.parent && ((!element.parentNode ||\r\n            !this.hasClass(element.parentNode, 'e-node-inner'))); null) {\r\n            element = element.parentNode;\r\n            if (this.isBlockNode(element)) {\r\n                return element;\r\n            }\r\n        }\r\n        return element;\r\n    };\r\n    DOMNode.prototype.rawAttributes = function (element) {\r\n        var rawAttr = {};\r\n        var attributes = element.attributes;\r\n        if (attributes.length > 0) {\r\n            for (var d = 0; d < attributes.length; d++) {\r\n                var e = attributes[d];\r\n                rawAttr[e.nodeName] = e.value;\r\n            }\r\n        }\r\n        return rawAttr;\r\n    };\r\n    DOMNode.prototype.attributes = function (element) {\r\n        if (!element) {\r\n            return '';\r\n        }\r\n        var attr = '';\r\n        var rawAttr = this.rawAttributes(element);\r\n        var orderRawAttr = Object.keys(rawAttr).sort();\r\n        for (var e = 0; e < orderRawAttr.length; e++) {\r\n            var attrKey = orderRawAttr[e];\r\n            var attrValue = rawAttr[attrKey];\r\n            /* tslint:disable */\r\n            if (attrValue.indexOf(\"'\") < 0 && attrValue.indexOf('\"') >= 0) {\r\n                attr += ' ' + attrKey + \"='\" + attrValue + \"'\";\r\n            }\r\n            else if (attrValue.indexOf('\"') >= 0 && attrValue.indexOf(\"'\") >= 0) {\r\n                /* tslint:enable */\r\n                attrValue = attrValue.replace(/\"/g, '&quot;');\r\n                attr += ' ' + attrKey + '=\"' + attrValue + '\"';\r\n            }\r\n            else {\r\n                attr += ' ' + attrKey + '=\"' + attrValue + '\"';\r\n            }\r\n        }\r\n        return attr;\r\n    };\r\n    DOMNode.prototype.clearAttributes = function (element) {\r\n        for (var attr = element.attributes, c = attr.length - 1; c >= 0; c--) {\r\n            var key = attr[c];\r\n            element.removeAttribute(key.nodeName);\r\n        }\r\n    };\r\n    DOMNode.prototype.openTagString = function (element) {\r\n        return '<' + element.tagName.toLowerCase() + this.attributes(element) + '>';\r\n    };\r\n    DOMNode.prototype.closeTagString = function (element) {\r\n        return '</' + element.tagName.toLowerCase() + '>';\r\n    };\r\n    DOMNode.prototype.createTagString = function (tagName, relativeElement, innerHTML) {\r\n        return '<' + tagName.toLowerCase() + this.attributes(relativeElement) + '>' + innerHTML + '</' + tagName.toLowerCase() + '>';\r\n    };\r\n    DOMNode.prototype.isList = function (element) {\r\n        return !!element && ['UL', 'OL'].indexOf(element.tagName) >= 0;\r\n    };\r\n    DOMNode.prototype.isElement = function (element) {\r\n        return element === this.parent;\r\n    };\r\n    DOMNode.prototype.isEditable = function (element) {\r\n        return ((!element.getAttribute || element.getAttribute('contenteditable') === 'true')\r\n            && ['STYLE', 'SCRIPT'].indexOf(element.tagName) < 0);\r\n    };\r\n    DOMNode.prototype.hasClass = function (element, className) {\r\n        return element && element.classList && element.classList.contains(className);\r\n    };\r\n    DOMNode.prototype.replaceWith = function (element, value) {\r\n        var parentNode = element.parentNode;\r\n        parentNode.insertBefore(this.parseHTMLFragment(value), element);\r\n        detach(element);\r\n    };\r\n    DOMNode.prototype.parseHTMLFragment = function (value) {\r\n        /* tslint:disable */\r\n        var temp = createElement('template');\r\n        temp.innerHTML = value;\r\n        if (temp.content instanceof DocumentFragment) {\r\n            return temp.content;\r\n        }\r\n        else {\r\n            return document.createRange().createContextualFragment(value);\r\n        }\r\n        /* tslint:enable */\r\n    };\r\n    DOMNode.prototype.wrap = function (element, wrapper) {\r\n        element.parentNode.insertBefore(wrapper, element);\r\n        wrapper = element.previousSibling;\r\n        wrapper.appendChild(element);\r\n        return wrapper;\r\n    };\r\n    DOMNode.prototype.insertAfter = function (newNode, referenceNode) {\r\n        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\r\n    };\r\n    DOMNode.prototype.wrapInner = function (parent, wrapper) {\r\n        parent.appendChild(wrapper);\r\n        wrapper = parent.querySelector('.e-rte-wrap-inner');\r\n        wrapper.classList.remove('e-rte-wrap-inner');\r\n        if (wrapper.classList.length === 0) {\r\n            wrapper.removeAttribute('class');\r\n        }\r\n        while (parent.firstChild !== wrapper) {\r\n            wrapper.appendChild(parent.firstChild);\r\n        }\r\n        return wrapper;\r\n    };\r\n    DOMNode.prototype.unWrap = function (element) {\r\n        var parent = element.parentNode;\r\n        var unWrapNode = [];\r\n        while (element.firstChild) {\r\n            unWrapNode.push(element.firstChild);\r\n            parent.insertBefore(element.firstChild, element);\r\n        }\r\n        unWrapNode = unWrapNode.length > 0 ? unWrapNode : [element.parentNode];\r\n        parent.removeChild(element);\r\n        return unWrapNode;\r\n    };\r\n    DOMNode.prototype.getSelectedNode = function (element, index) {\r\n        if (element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 &&\r\n            element.childNodes[index - 1] && element.childNodes[index - 1].nodeType === Node.ELEMENT_NODE &&\r\n            (element.childNodes[index - 1].classList.contains(markerClassName.startSelection) ||\r\n                element.childNodes[index - 1].classList.contains(markerClassName.endSelection))) {\r\n            element = element.childNodes[index - 1];\r\n        }\r\n        else if (element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 && element.childNodes[index]) {\r\n            element = element.childNodes[index];\r\n        }\r\n        if (element.nodeType === Node.TEXT_NODE) {\r\n            element = element.parentNode;\r\n        }\r\n        return element;\r\n    };\r\n    DOMNode.prototype.nodeFinds = function (element, elements) {\r\n        var existNodes = [];\r\n        for (var i = 0; i < elements.length; i++) {\r\n            if (element.contains(elements[i]) && element !== elements[i]) {\r\n                existNodes.push(elements[i]);\r\n            }\r\n        }\r\n        return existNodes;\r\n    };\r\n    DOMNode.prototype.isEditorArea = function () {\r\n        var range = this.getRangePoint(0);\r\n        var element;\r\n        for (element = range.commonAncestorContainer; element && !this.isElement(element); null) {\r\n            element = element.parentNode;\r\n        }\r\n        return !!this.isElement(element);\r\n    };\r\n    DOMNode.prototype.getRangePoint = function (point) {\r\n        var selection = this.getSelection();\r\n        var ranges = [];\r\n        if (selection && selection.getRangeAt && selection.rangeCount) {\r\n            ranges = [];\r\n            for (var f = 0; f < selection.rangeCount; f++) {\r\n                ranges.push(selection.getRangeAt(f));\r\n            }\r\n        }\r\n        else {\r\n            ranges = [this.currentDocument.createRange()];\r\n        }\r\n        return 'undefined' !== typeof point ? ranges[point] : ranges;\r\n    };\r\n    DOMNode.prototype.getSelection = function () {\r\n        return this.nodeSelection.get(this.currentDocument);\r\n    };\r\n    DOMNode.prototype.getPreviousNode = function (element) {\r\n        element = element.previousSibling;\r\n        for (; element && element.textContent === '\\n'; null) {\r\n            element = element.previousSibling;\r\n        }\r\n        return element;\r\n    };\r\n    DOMNode.prototype.encode = function (value) {\r\n        var divNode = document.createElement('div');\r\n        divNode.innerText = value;\r\n        return divNode.innerHTML.replace(/<br\\s*[\\/]?>/gi, '\\n');\r\n    };\r\n    DOMNode.prototype.saveMarker = function (save) {\r\n        var start = this.parent.querySelector('.' + markerClassName.startSelection);\r\n        var startTextNode;\r\n        if (this.hasClass(start, markerClassName.startSelection) && start.classList.length > 1) {\r\n            var replace = this.createTagString(CONSTANT.DEFAULT_TAG, start, this.encode(start.textContent));\r\n            this.replaceWith(start, replace);\r\n            start = this.parent.querySelector('.' + markerClassName.startSelection);\r\n            start.classList.remove(markerClassName.startSelection);\r\n            startTextNode = start.childNodes[0];\r\n        }\r\n        else {\r\n            startTextNode = this.unWrap(start)[0];\r\n        }\r\n        var endTextNode;\r\n        var end = this.parent.querySelector('.' + markerClassName.endSelection);\r\n        if (this.hasClass(end, markerClassName.endSelection) && end.classList.length > 1) {\r\n            var replace = this.createTagString(CONSTANT.DEFAULT_TAG, end, this.encode(end.textContent));\r\n            this.replaceWith(end, replace);\r\n            end = this.parent.querySelector('.' + markerClassName.endSelection);\r\n            end.classList.remove(markerClassName.endSelection);\r\n            endTextNode = end.childNodes[0];\r\n        }\r\n        else {\r\n            endTextNode = end ? this.unWrap(end)[0] : startTextNode;\r\n        }\r\n        save.startContainer = save.getNodeArray(startTextNode, true);\r\n        save.endContainer = save.getNodeArray(endTextNode, false);\r\n        return save;\r\n    };\r\n    DOMNode.prototype.marker = function (className, textContent) {\r\n        return '<span class=\"' + className + '\">' + textContent + '</span>';\r\n    };\r\n    DOMNode.prototype.setMarker = function (save) {\r\n        var range = save.range;\r\n        var start = (range.startContainer.childNodes[range.startOffset]\r\n            || range.startContainer);\r\n        var end = (range.endContainer.childNodes[(range.endOffset > 0) ? (range.endOffset - 1) : range.endOffset]\r\n            || range.endContainer);\r\n        if ((start.nodeType === Node.ELEMENT_NODE && end.nodeType === Node.ELEMENT_NODE) && (start.contains(end) || end.contains(start))) {\r\n            var existNode = start.contains(end) ? start : end;\r\n            var isElement = existNode.nodeType !== Node.TEXT_NODE;\r\n            if (isElement) {\r\n                var nodes = [];\r\n                var textNodes = [];\r\n                for (var node = existNode; existNode.contains(node); null) {\r\n                    if (nodes.indexOf(node) < 0 && node.childNodes && node.childNodes.length) {\r\n                        nodes.push(node);\r\n                        node = node.childNodes[0];\r\n                    }\r\n                    else if (node.nextSibling) {\r\n                        node = node.nextSibling;\r\n                    }\r\n                    else if (node.parentNode) {\r\n                        node = node.parentNode;\r\n                        nodes.push(node);\r\n                    }\r\n                    if (textNodes.indexOf(node) < 0 && (node.nodeType === Node.TEXT_NODE ||\r\n                        (CONSTANT.IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0\r\n                            && node.tagName === 'BR'))) {\r\n                        textNodes.push(node);\r\n                    }\r\n                }\r\n                if (textNodes.length) {\r\n                    start = start.contains(end) ? textNodes[0] : start;\r\n                    end = textNodes[textNodes.length - 1];\r\n                }\r\n            }\r\n        }\r\n        if (start !== end) {\r\n            if (start.nodeType !== Node.TEXT_NODE && start.tagName === 'BR' &&\r\n                CONSTANT.IGNORE_BLOCK_TAGS.indexOf(start.parentNode.tagName.toLocaleLowerCase()) >= 0) {\r\n                this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));\r\n                var markerStart = range.startContainer.querySelector('.' + markerClassName.startSelection);\r\n                markerStart.appendChild(start);\r\n            }\r\n            else {\r\n                this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));\r\n            }\r\n            if (end.nodeType !== Node.TEXT_NODE && end.tagName === 'BR' &&\r\n                CONSTANT.IGNORE_BLOCK_TAGS.indexOf(end.parentNode.tagName.toLocaleLowerCase()) >= 0) {\r\n                this.replaceWith(end, this.marker(markerClassName.endSelection, this.encode(end.textContent)));\r\n                var markerEnd = range.endContainer.querySelector('.' + markerClassName.endSelection);\r\n                markerEnd.appendChild(end);\r\n            }\r\n            else {\r\n                this.replaceWith(end, this.marker(markerClassName.endSelection, this.encode(end.textContent)));\r\n            }\r\n        }\r\n        else {\r\n            if (start.nodeType === 3) {\r\n                this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));\r\n            }\r\n            else {\r\n                start = start.tagName === 'BR' ? start.parentNode : start;\r\n                var marker = this.marker(markerClassName.startSelection, '');\r\n                append([this.parseHTMLFragment(marker)], start);\r\n            }\r\n        }\r\n    };\r\n    DOMNode.prototype.createTempNode = function (element) {\r\n        var textContent = element.textContent;\r\n        if (element.tagName === 'BR') {\r\n            var wrapper = '<' + CONSTANT.DEFAULT_TAG + '></' + CONSTANT.DEFAULT_TAG + '>';\r\n            var node = element.parentNode;\r\n            if (CONSTANT.IGNORE_BLOCK_TAGS.indexOf(node.tagName.toLocaleLowerCase()) >= 0) {\r\n                element = this.wrap(element, this.parseHTMLFragment(wrapper));\r\n            }\r\n        }\r\n        else if (((element.nodeType !== Node.TEXT_NODE &&\r\n            (element.classList.contains(markerClassName.startSelection) ||\r\n                element.classList.contains(markerClassName.endSelection))) ||\r\n            textContent.replace(/\\n/g, '').replace(/(^ *)|( *$)/g, '').length > 0 ||\r\n            textContent.length && textContent.indexOf('\\n') < 0)) {\r\n            var wrapper = '<' + CONSTANT.DEFAULT_TAG + '></' + CONSTANT.DEFAULT_TAG + '>';\r\n            var target = element;\r\n            element = this.wrap(element, this.parseHTMLFragment(wrapper));\r\n            var ignoreBr = target.nodeType === Node.ELEMENT_NODE && target.firstChild && target.firstChild.nodeName === 'BR'\r\n                && (target.classList.contains(markerClassName.startSelection) ||\r\n                    target.classList.contains(markerClassName.endSelection));\r\n            if (!ignoreBr && element.nextElementSibling && element.nextElementSibling.tagName === 'BR') {\r\n                element.appendChild(element.nextElementSibling);\r\n            }\r\n        }\r\n        return element;\r\n    };\r\n    DOMNode.prototype.blockNodes = function () {\r\n        var collectionNodes = [];\r\n        var selection = this.getSelection();\r\n        if (this.isEditorArea() && selection.rangeCount) {\r\n            var ranges = this.getRangePoint();\r\n            for (var j = 0; j < ranges.length; j++) {\r\n                var parentNode = void 0;\r\n                var range = ranges[j];\r\n                var startNode = this.getSelectedNode(range.startContainer, range.startOffset);\r\n                var endNode = this.getSelectedNode(range.endContainer, range.endOffset);\r\n                if (this.isBlockNode(startNode) && collectionNodes.indexOf(startNode) < 0) {\r\n                    collectionNodes.push(startNode);\r\n                }\r\n                parentNode = this.blockParentNode(startNode);\r\n                if (parentNode && collectionNodes.indexOf(parentNode) < 0) {\r\n                    if (CONSTANT.IGNORE_BLOCK_TAGS.indexOf(parentNode.tagName.toLocaleLowerCase()) >= 0 && (startNode.tagName === 'BR' ||\r\n                        startNode.nodeType === Node.TEXT_NODE ||\r\n                        startNode.classList.contains(markerClassName.startSelection) ||\r\n                        startNode.classList.contains(markerClassName.endSelection))) {\r\n                        var tempNode = startNode.previousSibling &&\r\n                            startNode.previousSibling.nodeType === Node.TEXT_NODE ?\r\n                            startNode.previousSibling : startNode;\r\n                        collectionNodes.push(this.createTempNode(tempNode));\r\n                    }\r\n                    else {\r\n                        collectionNodes.push(parentNode);\r\n                    }\r\n                }\r\n                var nodes = [];\r\n                for (var node = startNode; node !== endNode && node !== this.parent; null) {\r\n                    if (nodes.indexOf(node) < 0 && node.childNodes && node.childNodes.length) {\r\n                        nodes.push(node);\r\n                        node = node.childNodes[0];\r\n                    }\r\n                    else if (node && (node.tagName === 'BR' || node.nodeType === Node.TEXT_NODE ||\r\n                        node.classList.contains(markerClassName.startSelection) ||\r\n                        node.classList.contains(markerClassName.endSelection)) &&\r\n                        CONSTANT.IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0) {\r\n                        node = this.createTempNode(node);\r\n                    }\r\n                    else if (node.nextSibling && (node.nextSibling.tagName === 'BR' ||\r\n                        node.nextSibling.nodeType === Node.TEXT_NODE ||\r\n                        node.nextSibling.classList.contains(markerClassName.startSelection) ||\r\n                        node.nextSibling.classList.contains(markerClassName.endSelection)) &&\r\n                        CONSTANT.IGNORE_BLOCK_TAGS.indexOf(node.nextSibling.parentNode.tagName.toLocaleLowerCase()) >= 0) {\r\n                        node = this.createTempNode(node.nextSibling);\r\n                    }\r\n                    else if (node.nextSibling) {\r\n                        node = node.nextSibling;\r\n                    }\r\n                    else if (node.parentNode) {\r\n                        node = node.parentNode;\r\n                        nodes.push(node);\r\n                    }\r\n                    if (collectionNodes.indexOf(node) < 0 && node.nodeType === Node.ELEMENT_NODE &&\r\n                        CONSTANT.IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 &&\r\n                        (node.classList.contains(markerClassName.startSelection) ||\r\n                            node.classList.contains(markerClassName.endSelection))) {\r\n                        collectionNodes.push(this.createTempNode(node));\r\n                    }\r\n                    if (this.isBlockNode(node) && this.ignoreTableTag(node) && nodes.indexOf(node) < 0 &&\r\n                        collectionNodes.indexOf(node) < 0 && (node !== endNode || range.endOffset > 0)) {\r\n                        collectionNodes.push(node);\r\n                    }\r\n                }\r\n                parentNode = this.blockParentNode(endNode);\r\n                if (parentNode && this.ignoreTableTag(parentNode) && collectionNodes.indexOf(parentNode) < 0) {\r\n                    collectionNodes.push(parentNode);\r\n                }\r\n            }\r\n        }\r\n        for (var i = collectionNodes.length - 1; i > 0; i--) {\r\n            var nodes = this.nodeFinds(collectionNodes[i], collectionNodes);\r\n            if (nodes.length) {\r\n                var listNodes = collectionNodes[i].querySelectorAll('ul, ol');\r\n                if (collectionNodes[i].tagName === 'LI' && listNodes.length > 0) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    collectionNodes.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        return collectionNodes;\r\n    };\r\n    DOMNode.prototype.ignoreTableTag = function (element) {\r\n        return !(CONSTANT.TABLE_BLOCK_TAGS.indexOf(element.tagName.toLocaleLowerCase()) >= 0);\r\n    };\r\n    return DOMNode;\r\n}());\r\nexport { DOMNode };\r\n",null]}