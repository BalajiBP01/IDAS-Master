{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-inputs\\src\\maskedtextbox\\base\\mask-base.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-inputs\\src\\maskedtextbox\\base\\mask-base.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\r\n * MaskedTextBox base module\r\n */\r\nimport { EventHandler, isNullOrUndefined, merge, attributes, addClass, removeClass, Browser, extend } from '@syncfusion/ej2-base';\r\nimport { Input } from '../../input/input';\r\nvar ERROR = 'e-error';\r\nvar INPUTGROUP = 'e-input-group';\r\nvar FLOATINPUT = 'e-float-input';\r\nvar UTILMASK = 'e-utility-mask';\r\nvar TOPLABEL = 'e-label-top';\r\nvar BOTTOMLABEL = 'e-label-bottom';\r\n/**\r\n * @hidden\r\n * Built-in masking elements collection.\r\n */\r\nexport var regularExpressions = {\r\n    '0': '[0-9]',\r\n    '9': '[0-9 ]',\r\n    '#': '[0-9 +-]',\r\n    'L': '[A-Za-z]',\r\n    '?': '[A-Za-z ]',\r\n    '&': '[^\\x7f ]+',\r\n    'C': '[^\\x7f]+',\r\n    'A': '[A-Za-z0-9]',\r\n    'a': '[A-Za-z0-9 ]',\r\n};\r\n/**\r\n * @hidden\r\n * Generate required masking elements to the MaskedTextBox from user mask input.\r\n */\r\nexport function createMask() {\r\n    attributes(this.element, {\r\n        'role': 'textbox', 'autocomplete': 'off', 'autocorrect': 'off', 'autocapitalize': 'off',\r\n        'spellcheck': 'false', 'aria-live': 'assertive', 'aria-valuenow': ''\r\n    });\r\n    if (this.mask) {\r\n        var splitMask = this.mask.split(']');\r\n        for (var i = 0; i < splitMask.length; i++) {\r\n            if (splitMask[i][splitMask[i].length - 1] === '\\\\') {\r\n                splitMask[i] = splitMask[i] + ']';\r\n                var splitInnerMask = splitMask[i].split('[');\r\n                for (var j = 0; j < splitInnerMask.length; j++) {\r\n                    if (splitInnerMask[j][splitInnerMask[j].length - 1] === '\\\\') {\r\n                        splitInnerMask[j] = splitInnerMask[j] + '[';\r\n                    }\r\n                    pushIntoRegExpCollec.call(this, splitInnerMask[j]);\r\n                }\r\n            }\r\n            else {\r\n                var splitInnerMask = splitMask[i].split('[');\r\n                if (splitInnerMask.length > 1) {\r\n                    var chkSpace = false;\r\n                    for (var j = 0; j < splitInnerMask.length; j++) {\r\n                        if (splitInnerMask[j] === '\\\\') {\r\n                            this.customRegExpCollec.push('[');\r\n                            this.hiddenMask += splitInnerMask[j] + '[';\r\n                        }\r\n                        else if (splitInnerMask[j] === '') {\r\n                            chkSpace = true;\r\n                        }\r\n                        else if ((splitInnerMask[j] !== '' && chkSpace) || j === splitInnerMask.length - 1) {\r\n                            this.customRegExpCollec.push('[' + splitInnerMask[j] + ']');\r\n                            this.hiddenMask += this.promptChar;\r\n                            chkSpace = false;\r\n                        }\r\n                        else {\r\n                            pushIntoRegExpCollec.call(this, splitInnerMask[j]);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    pushIntoRegExpCollec.call(this, splitInnerMask[0]);\r\n                }\r\n            }\r\n        }\r\n        this.escapeMaskValue = this.hiddenMask;\r\n        this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);\r\n        if (!isNullOrUndefined(this.customCharacters)) {\r\n            for (var i = 0; i < this.promptMask.length; i++) {\r\n                if (!isNullOrUndefined(this.customCharacters[this.promptMask[i]])) {\r\n                    this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], 'g'), this.promptChar);\r\n                }\r\n            }\r\n        }\r\n        var escapeNumber = 0;\r\n        if (this.hiddenMask.match(new RegExp(/\\\\/))) {\r\n            for (var i = 0; i < this.hiddenMask.length; i++) {\r\n                var j = 0;\r\n                if (i >= 2) {\r\n                    j = i;\r\n                }\r\n                escapeNumber = this.hiddenMask.length - this.promptMask.length;\r\n                j = j - escapeNumber;\r\n                if ((i > 0 && this.hiddenMask[i - 1] !== '\\\\') && (this.hiddenMask[i] === '>' ||\r\n                    this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|')) {\r\n                    this.promptMask = this.promptMask.substring(0, j) +\r\n                        this.promptMask.substring((i + 1) - escapeNumber, this.promptMask.length);\r\n                    this.escapeMaskValue = this.escapeMaskValue.substring(0, j) +\r\n                        this.escapeMaskValue.substring((i + 1) - escapeNumber, this.escapeMaskValue.length);\r\n                }\r\n                if (this.hiddenMask[i] === '\\\\') {\r\n                    this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] +\r\n                        this.promptMask.substring((i + 2) - escapeNumber, this.promptMask.length);\r\n                    this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] +\r\n                        this.escapeMaskValue.substring((i + 2) - escapeNumber, this.escapeMaskValue.length);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.promptMask = this.promptMask.replace(/[>|<]/g, '');\r\n            this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, '');\r\n        }\r\n        attributes(this.element, { 'aria-invalid': 'false' });\r\n    }\r\n}\r\n/**\r\n * @hidden\r\n * Apply mask ability with masking elements to the MaskedTextBox.\r\n */\r\nexport function applyMask() {\r\n    setElementValue.call(this, this.promptMask);\r\n    setMaskValue.call(this, this.value);\r\n}\r\n/**\r\n * @hidden\r\n * To wire required events to the MaskedTextBox.\r\n */\r\nexport function wireEvents() {\r\n    EventHandler.add(this.element, 'keydown', maskInputKeyDownHandler, this);\r\n    EventHandler.add(this.element, 'keypress', maskInputKeyPressHandler, this);\r\n    EventHandler.add(this.element, 'keyup', maskInputKeyUpHandler, this);\r\n    EventHandler.add(this.element, 'input', maskInputHandler, this);\r\n    EventHandler.add(this.element, 'focus', maskInputFocusHandler, this);\r\n    EventHandler.add(this.element, 'blur', maskInputBlurHandler, this);\r\n    EventHandler.add(this.element, 'paste', maskInputPasteHandler, this);\r\n    EventHandler.add(this.element, 'cut', maskInputCutHandler, this);\r\n    EventHandler.add(this.element, 'drop', maskInputDropHandler, this);\r\n    if (this.enabled) {\r\n        bindClearEvent.call(this);\r\n        if (this.formElement) {\r\n            EventHandler.add(this.formElement, 'reset', resetFormHandler, this);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @hidden\r\n * To unwire events attached to the MaskedTextBox.\r\n */\r\nexport function unwireEvents() {\r\n    EventHandler.remove(this.element, 'keydown', maskInputKeyDownHandler);\r\n    EventHandler.remove(this.element, 'keypress', maskInputKeyPressHandler);\r\n    EventHandler.remove(this.element, 'keyup', maskInputKeyUpHandler);\r\n    EventHandler.remove(this.element, 'input', maskInputHandler);\r\n    EventHandler.remove(this.element, 'focus', maskInputFocusHandler);\r\n    EventHandler.remove(this.element, 'blur', maskInputBlurHandler);\r\n    EventHandler.remove(this.element, 'paste', maskInputPasteHandler);\r\n    EventHandler.remove(this.element, 'cut', maskInputCutHandler);\r\n    if (this.formElement) {\r\n        EventHandler.remove(this.formElement, 'reset', resetFormHandler);\r\n    }\r\n}\r\n/**\r\n * @hidden\r\n * To bind required events to the MaskedTextBox clearButton.\r\n */\r\nexport function bindClearEvent() {\r\n    if (this.showClearButton) {\r\n        EventHandler.add(this.inputObj.clearButton, 'mousedown touchstart', resetHandler, this);\r\n    }\r\n}\r\nfunction resetHandler(e) {\r\n    e.preventDefault();\r\n    if (!this.inputObj.clearButton.classList.contains('e-clear-icon-hide')) {\r\n        clear.call(this, e);\r\n        this.value = '';\r\n    }\r\n}\r\nfunction clear(event) {\r\n    var value = this.element.value;\r\n    setElementValue.call(this, this.promptMask);\r\n    this.redoCollec.unshift({\r\n        value: this.promptMask, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\r\n    });\r\n    triggerMaskChangeEvent.call(this, event, value);\r\n    this.element.setSelectionRange(0, 0);\r\n}\r\nfunction resetFormHandler() {\r\n    if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\r\n        setElementValue.call(this, this.promptMask);\r\n    }\r\n    else {\r\n        this.value = this.initInputValue;\r\n    }\r\n}\r\n/**\r\n * @hidden\r\n * To get masked value from the MaskedTextBox.\r\n */\r\nexport function unstrippedValue(element) {\r\n    return element.value;\r\n}\r\n/**\r\n * @hidden\r\n * To extract raw value from the MaskedTextBox.\r\n */\r\nexport function strippedValue(element, maskValues) {\r\n    var value = '';\r\n    var k = 0;\r\n    var checkMask = false;\r\n    var maskValue = (!isNullOrUndefined(maskValues)) ? maskValues : (!isNullOrUndefined(element) &&\r\n        !isNullOrUndefined(this)) ? element.value : maskValues;\r\n    if (maskValue !== this.promptMask) {\r\n        for (var i = 0; i < this.customRegExpCollec.length; i++) {\r\n            if (checkMask) {\r\n                checkMask = false;\r\n            }\r\n            if (this.customRegExpCollec[k] === '>' || this.customRegExpCollec[k] === '<' ||\r\n                this.customRegExpCollec[k] === '|' || this.customRegExpCollec[k] === '\\\\') {\r\n                --i;\r\n                checkMask = true;\r\n            }\r\n            if (!checkMask) {\r\n                if ((maskValue[i] !== this.promptChar) && (!isNullOrUndefined(this.customRegExpCollec[k]) &&\r\n                    ((!isNullOrUndefined(this.regExpCollec[this.customRegExpCollec[k]])) ||\r\n                        (this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === '[' &&\r\n                            this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === ']') ||\r\n                        (!isNullOrUndefined(this.customCharacters) &&\r\n                            (!isNullOrUndefined(this.customCharacters[this.customRegExpCollec[k]]))))) && (maskValue !== '')) {\r\n                    value += maskValue[i];\r\n                }\r\n            }\r\n            ++k;\r\n        }\r\n    }\r\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\r\n        value = maskValue;\r\n    }\r\n    return value;\r\n}\r\nfunction pushIntoRegExpCollec(value) {\r\n    for (var k = 0; k < value.length; k++) {\r\n        this.hiddenMask += value[k];\r\n        if (value[k] !== '\\\\') {\r\n            this.customRegExpCollec.push(value[k]);\r\n        }\r\n    }\r\n}\r\nexport function maskInputFocusHandler(event) {\r\n    var _this = this;\r\n    this.focusEventArgs = {\r\n        selectionStart: 0,\r\n        event: event,\r\n        value: this.value,\r\n        maskedValue: this.element.value,\r\n        container: this.inputObj.container,\r\n        selectionEnd: (this.promptMask.length > 0) ? this.promptMask.length : this.element.value.length,\r\n    };\r\n    this.trigger('focus', this.focusEventArgs);\r\n    if (this.mask) {\r\n        this.isFocus = true;\r\n        if (this.element.value === '') {\r\n            setElementValue.call(this, this.promptMask);\r\n        }\r\n        else {\r\n            setElementValue.call(this, this.element.value);\r\n        }\r\n        if (!Browser.isDevice && Browser.info.version === '11.0') {\r\n            this.element.setSelectionRange(this.focusEventArgs.selectionStart, this.focusEventArgs.selectionEnd);\r\n        }\r\n        else {\r\n            var delay = (Browser.isDevice && Browser.isIos) ? 450 : 0;\r\n            setTimeout(function () {\r\n                _this.element.setSelectionRange(_this.focusEventArgs.selectionStart, _this.focusEventArgs.selectionEnd);\r\n            }, delay);\r\n        }\r\n    }\r\n}\r\nexport function maskInputBlurHandler(event) {\r\n    this.blurEventArgs = {\r\n        event: event,\r\n        value: this.value,\r\n        maskedValue: this.element.value,\r\n        container: this.inputObj.container\r\n    };\r\n    this.trigger('blur', this.blurEventArgs);\r\n    if (this.mask) {\r\n        this.isFocus = false;\r\n        if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== 'Always') {\r\n            setElementValue.call(this, '');\r\n            var labelElement = this.element.parentNode.querySelector('.e-float-text');\r\n            if (this.floatLabelType === 'Auto' && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL)) {\r\n                removeClass([labelElement], TOPLABEL);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction maskInputPasteHandler(event) {\r\n    var _this = this;\r\n    if (this.mask) {\r\n        var sIndex_1 = this.element.selectionStart;\r\n        var eIndex_1 = this.element.selectionEnd;\r\n        var oldValue_1 = this.element.value;\r\n        setElementValue.call(this, '');\r\n        this._callPasteHandler = true;\r\n        setTimeout(function () {\r\n            var value = _this.element.value.replace(/ /g, '');\r\n            if (_this.redoCollec.length > 0 && _this.redoCollec[0].value === _this.element.value) {\r\n                value = strippedValue.call(_this, _this.element);\r\n            }\r\n            setElementValue.call(_this, oldValue_1);\r\n            _this.element.selectionStart = sIndex_1;\r\n            _this.element.selectionEnd = eIndex_1;\r\n            var i = 0;\r\n            _this.maskKeyPress = true;\r\n            do {\r\n                validateValue.call(_this, value[i], false, null);\r\n                ++i;\r\n            } while (i < value.length);\r\n            _this.maskKeyPress = false;\r\n            _this._callPasteHandler = false;\r\n            if (_this.element.value === oldValue_1) {\r\n                var i_1 = 0;\r\n                _this.maskKeyPress = true;\r\n                do {\r\n                    validateValue.call(_this, value[i_1], false, null);\r\n                    ++i_1;\r\n                } while (i_1 < value.length);\r\n                _this.maskKeyPress = false;\r\n            }\r\n            else {\r\n                triggerMaskChangeEvent.call(_this, event, oldValue_1);\r\n            }\r\n        }, 1);\r\n    }\r\n}\r\nfunction maskInputCutHandler(event) {\r\n    var _this = this;\r\n    if (this.mask) {\r\n        var preValue_1 = this.element.value;\r\n        var sIndex_2 = this.element.selectionStart;\r\n        var eIndex = this.element.selectionEnd;\r\n        this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd });\r\n        var value_1 = this.element.value.substring(0, sIndex_2) + this.promptMask.substring(sIndex_2, eIndex) +\r\n            this.element.value.substring(eIndex);\r\n        setTimeout(function () {\r\n            setElementValue.call(_this, value_1);\r\n            _this.element.selectionStart = _this.element.selectionEnd = sIndex_2;\r\n            if (_this.element.value !== preValue_1) {\r\n                triggerMaskChangeEvent.call(_this, event, null);\r\n            }\r\n        }, 0);\r\n    }\r\n}\r\nexport function maskInputDropHandler(event) {\r\n    event.preventDefault();\r\n}\r\nfunction maskInputHandler(event) {\r\n    if (Browser.isIE === true && this.element.value === '' && this.floatLabelType === 'Never') {\r\n        return;\r\n    }\r\n    var eventArgs = { ctrlKey: false, keyCode: 229 };\r\n    // tslint:disable-next-line\r\n    extend(event, eventArgs);\r\n    if (this.mask) {\r\n        if (this.element.value === '') {\r\n            this.redoCollec.unshift({\r\n                value: this.promptMask, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\r\n            });\r\n        }\r\n        if (this.element.value.length === 1) {\r\n            this.element.value = this.element.value + this.promptMask;\r\n            this.element.setSelectionRange(1, 1);\r\n        }\r\n        if (!this._callPasteHandler) {\r\n            removeMaskInputValues.call(this, event);\r\n        }\r\n        if (this.element.value.length > this.promptMask.length) {\r\n            var startIndex = this.element.selectionStart;\r\n            var addedValues = this.element.value.length - this.promptMask.length;\r\n            var value = this.element.value.substring(startIndex - addedValues, startIndex);\r\n            this.maskKeyPress = false;\r\n            var i = 0;\r\n            do {\r\n                validateValue.call(this, value[i], event.ctrlKey, event);\r\n                ++i;\r\n            } while (i < value.length);\r\n            if (this.element.value !== this.preEleVal) {\r\n                triggerMaskChangeEvent.call(this, event, null);\r\n            }\r\n        }\r\n        var val = strippedValue.call(this, this.element);\r\n        this.prevValue = val;\r\n        this.value = val;\r\n        if (val === '') {\r\n            setElementValue.call(this, this.promptMask);\r\n            this.element.setSelectionRange(0, 0);\r\n        }\r\n    }\r\n}\r\nfunction maskInputKeyDownHandler(event) {\r\n    if (this.mask) {\r\n        var value = this;\r\n        if (event.keyCode !== 229) {\r\n            if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\r\n                event.preventDefault();\r\n            }\r\n            removeMaskInputValues.call(this, event);\r\n        }\r\n        var startValue = this.element.value;\r\n        if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\r\n            var collec = void 0;\r\n            if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {\r\n                collec = this.undoCollec[this.undoCollec.length - 1];\r\n                this.redoCollec.unshift({\r\n                    value: this.element.value, startIndex: this.element.selectionStart,\r\n                    endIndex: this.element.selectionEnd\r\n                });\r\n                setElementValue.call(this, collec.value);\r\n                this.element.selectionStart = collec.startIndex;\r\n                this.element.selectionEnd = collec.endIndex;\r\n                this.undoCollec.splice(this.undoCollec.length - 1, 1);\r\n            }\r\n            else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {\r\n                collec = this.redoCollec[0];\r\n                this.undoCollec.push({\r\n                    value: this.element.value, startIndex: this.element.selectionStart,\r\n                    endIndex: this.element.selectionEnd\r\n                });\r\n                setElementValue.call(this, collec.value);\r\n                this.element.selectionStart = collec.startIndex;\r\n                this.element.selectionEnd = collec.endIndex;\r\n                this.redoCollec.splice(0, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function mobileRemoveFunction() {\r\n    var collec;\r\n    var sIndex = this.element.selectionStart;\r\n    var eIndex = this.element.selectionEnd;\r\n    if (this.redoCollec.length > 0) {\r\n        collec = this.redoCollec[0];\r\n        setElementValue.call(this, collec.value);\r\n        if ((collec.startIndex - sIndex) === 1) {\r\n            this.element.selectionStart = collec.startIndex;\r\n            this.element.selectionEnd = collec.endIndex;\r\n        }\r\n        else {\r\n            this.element.selectionStart = sIndex + 1;\r\n            this.element.selectionEnd = eIndex + 1;\r\n        }\r\n    }\r\n    else {\r\n        setElementValue.call(this, this.promptMask);\r\n        this.element.selectionStart = this.element.selectionEnd = sIndex;\r\n    }\r\n}\r\nfunction autoFillMaskInputValues(isRemove, oldEventVal, event) {\r\n    if (event.type === 'input') {\r\n        isRemove = false;\r\n        oldEventVal = this.element.value;\r\n        setElementValue.call(this, this.promptMask);\r\n        setMaskValue.call(this, oldEventVal);\r\n    }\r\n    return isRemove;\r\n}\r\nfunction removeMaskInputValues(event) {\r\n    var isRemove = false;\r\n    var oldEventVal;\r\n    var isDeleted = false;\r\n    if (this.element.value.length < this.promptMask.length) {\r\n        isRemove = true;\r\n        oldEventVal = this.element.value;\r\n        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\r\n        mobileRemoveFunction.call(this);\r\n    }\r\n    if (this.element.value.length >= this.promptMask.length && event.type === 'input') {\r\n        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\r\n    }\r\n    var initStartIndex = this.element.selectionStart;\r\n    var initEndIndex = this.element.selectionEnd;\r\n    var startIndex = this.element.selectionStart;\r\n    var endIndex = this.element.selectionEnd;\r\n    var maskValue = this.hiddenMask.replace(/[>|\\\\<]/g, '');\r\n    var curMask = maskValue[startIndex - 1];\r\n    var parentElement = this.element.parentNode;\r\n    if (isRemove || event.keyCode === 8 || event.keyCode === 46) {\r\n        this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: endIndex });\r\n        var multipleDel = false;\r\n        var preValue = this.element.value;\r\n        if (startIndex > 0 || ((event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length\r\n            && ((this.element.selectionEnd - startIndex) !== this.element.value.length))) {\r\n            var index = startIndex;\r\n            if (startIndex !== endIndex) {\r\n                startIndex = endIndex;\r\n                if (event.keyCode === 46) {\r\n                    multipleDel = true;\r\n                }\r\n            }\r\n            else if (event.keyCode === 46) {\r\n                ++index;\r\n            }\r\n            else {\r\n                --index;\r\n            }\r\n            for (var k = startIndex; (event.keyCode === 8 || isRemove || multipleDel) ? k > index : k < index; (event.keyCode === 8 || isRemove || multipleDel) ? k-- : k++) {\r\n                for (var i = startIndex; (event.keyCode === 8 || isRemove || multipleDel) ? i > 0 : i < this.element.value.length; (event.keyCode === 8 || isRemove || multipleDel) ? i-- : i++) {\r\n                    var sIndex = void 0;\r\n                    if (((event.keyCode === 8 || multipleDel) && ((initStartIndex !== initEndIndex && initStartIndex !== startIndex) ||\r\n                        (initStartIndex === initEndIndex))) || isRemove) {\r\n                        curMask = maskValue[i - 1];\r\n                        sIndex = startIndex - 1;\r\n                    }\r\n                    else {\r\n                        curMask = maskValue[i];\r\n                        sIndex = startIndex;\r\n                        ++startIndex;\r\n                    }\r\n                    var oldValue = this.element.value[sIndex];\r\n                    if ((isNullOrUndefined(this.regExpCollec[curMask]) && (!isNullOrUndefined(this.customCharacters)\r\n                        && isNullOrUndefined(this.customCharacters[curMask]))\r\n                        && ((this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== '['\r\n                            && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== ']')))\r\n                        || (this.promptMask[sIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters))) {\r\n                        this.element.selectionStart = this.element.selectionEnd = sIndex;\r\n                        event.preventDefault();\r\n                        if (event.keyCode === 46 && !multipleDel) {\r\n                            ++this.element.selectionStart;\r\n                        }\r\n                    }\r\n                    else {\r\n                        var value = this.element.value;\r\n                        var prompt_1 = this.promptChar;\r\n                        var elementValue = value.substring(0, sIndex) + prompt_1 + value.substring(startIndex, value.length);\r\n                        setElementValue.call(this, elementValue);\r\n                        event.preventDefault();\r\n                        this.element.selectionStart = this.element.selectionEnd = sIndex;\r\n                        isDeleted = true;\r\n                    }\r\n                    startIndex = this.element.selectionStart;\r\n                    if ((!isDeleted && event.keyCode === 8) || multipleDel || (!isDeleted && !(event.keyCode === 46))) {\r\n                        sIndex = startIndex - 1;\r\n                    }\r\n                    else {\r\n                        sIndex = startIndex;\r\n                        isDeleted = false;\r\n                    }\r\n                    oldValue = this.element.value[sIndex];\r\n                    if (((initStartIndex !== initEndIndex) && (this.element.selectionStart === initStartIndex))\r\n                        || (this.promptMask[sIndex] === this.promptChar) || ((oldValue !== this.promptMask[sIndex]) &&\r\n                        (this.promptMask[sIndex] !== this.promptChar) && !isNullOrUndefined(this.customCharacters))) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.element.selectionStart === 0 && (this.element.selectionEnd === this.element.value.length)) {\r\n            setElementValue.call(this, this.promptMask);\r\n            event.preventDefault();\r\n            this.element.selectionStart = this.element.selectionEnd = startIndex;\r\n        }\r\n        this.redoCollec.unshift({\r\n            value: this.element.value, startIndex: this.element.selectionStart,\r\n            endIndex: this.element.selectionEnd\r\n        });\r\n        if (this.element.value !== preValue) {\r\n            triggerMaskChangeEvent.call(this, event, oldEventVal);\r\n        }\r\n    }\r\n}\r\nfunction maskInputKeyPressHandler(event) {\r\n    if (this.mask) {\r\n        var oldValue = this.element.value;\r\n        if ((!event.ctrlKey) || (event.ctrlKey && event.code !== 'KeyA' && event.code !== 'KeyY'\r\n            && event.code !== 'KeyZ' && event.code !== 'KeyX' && event.code !== 'KeyC' && event.code !== 'KeyV')) {\r\n            this.maskKeyPress = true;\r\n            var key = event.key;\r\n            if (key === 'Spacebar') {\r\n                key = String.fromCharCode(event.keyCode);\r\n            }\r\n            if (!key) {\r\n                this.isIosInvalid = true;\r\n                validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);\r\n                event.preventDefault();\r\n                this.isIosInvalid = false;\r\n            }\r\n            else if (key && key.length === 1) {\r\n                validateValue.call(this, key, event.ctrlKey, event);\r\n                event.preventDefault();\r\n            }\r\n            if (event.keyCode === 32 && key === ' ' && this.promptChar === ' ') {\r\n                this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;\r\n            }\r\n        }\r\n        if (this.element.value !== oldValue) {\r\n            triggerMaskChangeEvent.call(this, event, oldValue);\r\n        }\r\n    }\r\n}\r\nfunction triggerMaskChangeEvent(event, oldValue) {\r\n    if (!isNullOrUndefined(this.changeEventArgs) && !this.isInitial) {\r\n        var eventArgs = {};\r\n        this.changeEventArgs = { value: this.element.value, maskedValue: this.element.value, isInteraction: false, isInteracted: false };\r\n        if (this.mask) {\r\n            this.changeEventArgs.value = strippedValue.call(this, this.element);\r\n        }\r\n        if (!isNullOrUndefined(event)) {\r\n            this.changeEventArgs.isInteracted = true;\r\n            this.changeEventArgs.isInteraction = true;\r\n            this.changeEventArgs.event = event;\r\n        }\r\n        merge(eventArgs, this.changeEventArgs);\r\n        this.trigger('change', eventArgs);\r\n    }\r\n    this.preEleVal = this.element.value;\r\n    this.prevValue = strippedValue.call(this, this.element);\r\n    attributes(this.element, { 'aria-valuenow': this.element.value });\r\n}\r\nfunction maskInputKeyUpHandler(event) {\r\n    if (this.mask) {\r\n        var collec = void 0;\r\n        var key = event.key;\r\n        if (key && key.length === 1 && this.floatLabelType === 'Never' && this.undoCollec.length > 0) {\r\n            if (this.undoCollec[this.undoCollec.length - 1].value === this.element.value) {\r\n                validateValue.call(this, key, event.ctrlKey, event);\r\n            }\r\n        }\r\n        if (!this.maskKeyPress && event.keyCode === 229) {\r\n            var oldEventVal = void 0;\r\n            if (this.element.value.length === 1) {\r\n                this.element.value = this.element.value + this.promptMask;\r\n                this.element.setSelectionRange(1, 1);\r\n            }\r\n            if (this.element.value.length > this.promptMask.length) {\r\n                var startIndex = this.element.selectionStart;\r\n                var addedValues = this.element.value.length - this.promptMask.length;\r\n                var val_1 = this.element.value.substring(startIndex - addedValues, startIndex);\r\n                if (this.undoCollec.length > 0) {\r\n                    collec = this.undoCollec[this.undoCollec.length - 1];\r\n                    var startIndex_1 = this.element.selectionStart;\r\n                    oldEventVal = collec.value;\r\n                    var oldVal = collec.value.substring(startIndex_1 - addedValues, startIndex_1);\r\n                    collec = this.redoCollec[0];\r\n                    val_1 = val_1.trim();\r\n                    var isSpace = Browser.isAndroid && val_1 === '';\r\n                    if (!isSpace && oldVal !== val_1 && collec.value.substring(startIndex_1 - addedValues, startIndex_1) !== val_1) {\r\n                        validateValue.call(this, val_1, event.ctrlKey, event);\r\n                    }\r\n                    else if (isSpace) {\r\n                        preventUnsupportedValues.call(this, event, startIndex_1 - 1, this.element.selectionEnd - 1, val_1, event.ctrlKey, false);\r\n                    }\r\n                }\r\n                else {\r\n                    oldEventVal = this.promptMask;\r\n                    validateValue.call(this, val_1, event.ctrlKey, event);\r\n                }\r\n                this.maskKeyPress = false;\r\n                triggerMaskChangeEvent.call(this, event, oldEventVal);\r\n            }\r\n        }\r\n        else {\r\n            removeMaskError.call(this);\r\n        }\r\n        var val = strippedValue.call(this, this.element);\r\n        if (!((this.element.selectionStart === 0) && (this.promptMask === this.element.value) && val === '')\r\n            || (val === '' && this.value !== val)) {\r\n            this.prevValue = val;\r\n            this.value = val;\r\n        }\r\n    }\r\n    else {\r\n        triggerMaskChangeEvent.call(this, event);\r\n        this.value = this.element.value;\r\n    }\r\n    if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {\r\n        // tslint:disable-next-line\r\n        var temp_1 = this.element;\r\n        setTimeout(function () {\r\n            temp_1.setSelectionRange(0, 0);\r\n        }, 0);\r\n    }\r\n}\r\nfunction mobileSwipeCheck(key) {\r\n    if (key.length > 1 && ((this.promptMask.length + key.length) < this.element.value.length)) {\r\n        var elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key +\r\n            this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);\r\n        setElementValue.call(this, elementValue);\r\n        this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;\r\n    }\r\n    this.element.selectionStart = this.element.selectionStart - key.length;\r\n    this.element.selectionEnd = this.element.selectionEnd - key.length;\r\n}\r\nfunction mobileValidation(key) {\r\n    if (!this.maskKeyPress) {\r\n        mobileSwipeCheck.call(this, key);\r\n    }\r\n}\r\nfunction validateValue(key, isCtrlKey, event) {\r\n    mobileValidation.call(this, key);\r\n    if (isNullOrUndefined(this) || isNullOrUndefined(key)) {\r\n        return;\r\n    }\r\n    var startIndex = this.element.selectionStart;\r\n    var initStartIndex = startIndex;\r\n    var endIndex = this.element.selectionEnd;\r\n    var curMask;\r\n    var allowText = false;\r\n    var value = this.element.value;\r\n    var eventOldVal;\r\n    var prevSupport = false;\r\n    var isEqualVal = false;\r\n    for (var k = 0; k < key.length; k++) {\r\n        var keyValue = key[k];\r\n        startIndex = this.element.selectionStart;\r\n        endIndex = this.element.selectionEnd;\r\n        if (!this.maskKeyPress && initStartIndex === startIndex) {\r\n            startIndex = startIndex + k;\r\n        }\r\n        if ((!this.maskKeyPress || startIndex < this.promptMask.length)) {\r\n            for (var i = startIndex; i < this.promptMask.length; i++) {\r\n                var maskValue = this.escapeMaskValue;\r\n                curMask = maskValue[startIndex];\r\n                if (this.hiddenMask[startIndex] === '\\\\' && this.hiddenMask[startIndex + 1] === key) {\r\n                    isEqualVal = true;\r\n                }\r\n                if ((isNullOrUndefined(this.regExpCollec[curMask]) && (isNullOrUndefined(this.customCharacters)\r\n                    || (!isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask])))\r\n                    && ((this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== '['\r\n                        && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== ']')))\r\n                    || ((this.promptMask[startIndex] !== this.promptChar) && isNullOrUndefined(this.customCharacters))\r\n                    || (this.promptChar === curMask && this.escapeMaskValue === this.mask)) {\r\n                    this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\r\n                    startIndex = this.element.selectionStart;\r\n                    curMask = this.hiddenMask[startIndex];\r\n                }\r\n            }\r\n            if (!isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[curMask])) {\r\n                var customValStr = this.customCharacters[curMask];\r\n                var customValArr = customValStr.split(',');\r\n                for (var i = 0; i < customValArr.length; i++) {\r\n                    if (keyValue.match(new RegExp('[' + customValArr[i] + ']'))) {\r\n                        allowText = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (!isNullOrUndefined(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask]))\r\n                && this.promptMask[startIndex] === this.promptChar) {\r\n                allowText = true;\r\n            }\r\n            else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === '['\r\n                && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === ']'\r\n                && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {\r\n                allowText = true;\r\n            }\r\n            if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {\r\n                if (k === 0) {\r\n                    if (this.maskKeyPress) {\r\n                        this.undoCollec.push({ value: value, startIndex: startIndex, endIndex: startIndex });\r\n                    }\r\n                    else {\r\n                        var sIndex = this.element.selectionStart;\r\n                        var eIndex = this.element.selectionEnd;\r\n                        if (this.redoCollec.length > 0) {\r\n                            eventOldVal = this.redoCollec[0].value;\r\n                            setElementValue.call(this, eventOldVal);\r\n                            this.undoCollec.push(this.redoCollec[0]);\r\n                        }\r\n                        else {\r\n                            this.undoCollec.push({ value: this.promptMask, startIndex: startIndex, endIndex: startIndex });\r\n                            eventOldVal = this.promptMask;\r\n                            setElementValue.call(this, eventOldVal);\r\n                        }\r\n                        this.element.selectionStart = sIndex;\r\n                        this.element.selectionEnd = eIndex;\r\n                    }\r\n                }\r\n                startIndex = this.element.selectionStart;\r\n                applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);\r\n                prevSupport = true;\r\n                if (k === key.length - 1) {\r\n                    this.redoCollec.unshift({\r\n                        value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\r\n                    });\r\n                }\r\n                allowText = false;\r\n            }\r\n            else {\r\n                startIndex = this.element.selectionStart;\r\n                preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);\r\n            }\r\n            if (k === key.length - 1 && !allowText) {\r\n                if (!Browser.isAndroid || (Browser.isAndroid && startIndex < this.promptMask.length)) {\r\n                    this.redoCollec.unshift({\r\n                        value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (key.length === 1 && !isCtrlKey && !isNullOrUndefined(event)) {\r\n                addMaskErrorClass.call(this);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {\r\n    if (this.hiddenMask.length > this.promptMask.length) {\r\n        keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);\r\n    }\r\n    if (!isEqualVal) {\r\n        var value = this.element.value;\r\n        var elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);\r\n        setElementValue.call(this, elementValue);\r\n        this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\r\n    }\r\n}\r\nfunction preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {\r\n    if (!this.maskKeyPress) {\r\n        var eventOldVal = void 0;\r\n        var value = this.element.value;\r\n        if (sIdx >= this.promptMask.length) {\r\n            setElementValue.call(this, value.substring(0, sIdx));\r\n        }\r\n        else {\r\n            if (idx === sIdx) {\r\n                setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));\r\n            }\r\n            else {\r\n                if (this.promptMask.length === this.element.value.length) {\r\n                    setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));\r\n                }\r\n                else {\r\n                    setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));\r\n                }\r\n            }\r\n            this.element.selectionStart = this.element.selectionEnd = (chkSupport ||\r\n                this.element.value[idx] !== this.promptChar) ? sIdx : idx;\r\n        }\r\n        eventOldVal = this.element.value;\r\n        addMaskErrorClass.call(this);\r\n    }\r\n    if (key.length === 1 && !ctrl && !isNullOrUndefined(event)) {\r\n        addMaskErrorClass.call(this);\r\n    }\r\n}\r\nfunction addMaskErrorClass() {\r\n    var _this = this;\r\n    var parentElement = this.element.parentNode;\r\n    var timer = 200;\r\n    if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {\r\n        addClass([parentElement], ERROR);\r\n    }\r\n    else {\r\n        addClass([this.element], ERROR);\r\n    }\r\n    if (this.isIosInvalid === true) {\r\n        timer = 400;\r\n    }\r\n    attributes(this.element, { 'aria-invalid': 'true' });\r\n    setTimeout(function () {\r\n        if (!_this.maskKeyPress) {\r\n            removeMaskError.call(_this);\r\n        }\r\n    }, timer);\r\n}\r\nfunction removeMaskError() {\r\n    var parentElement = this.element.parentNode;\r\n    removeClass([parentElement], ERROR);\r\n    removeClass([this.element], ERROR);\r\n    attributes(this.element, { 'aria-invalid': 'false' });\r\n}\r\n/**\r\n * @hidden\r\n * Validates user input using masking elements '<' , '>' and '|'.\r\n */\r\nfunction changeToLowerUpperCase(key, value) {\r\n    var promptMask;\r\n    var i;\r\n    var j = 0;\r\n    var curVal = value;\r\n    var caseCount = 0;\r\n    for (i = 0; i < this.hiddenMask.length; i++) {\r\n        if (this.hiddenMask[i] === '\\\\') {\r\n            promptMask = curVal.substring(0, i) + '\\\\' + curVal.substring(i, curVal.length);\r\n        }\r\n        if (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|') {\r\n            if (this.hiddenMask[i] !== curVal[i]) {\r\n                promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);\r\n            }\r\n            ++caseCount;\r\n        }\r\n        if (promptMask) {\r\n            if (((promptMask[i] === this.promptChar) && (i > this.element.selectionStart)) ||\r\n                (this.element.value.indexOf(this.promptChar) < 0 && (this.element.selectionStart + caseCount) === i)) {\r\n                caseCount = 0;\r\n                break;\r\n            }\r\n            curVal = promptMask;\r\n        }\r\n    }\r\n    while (i >= 0 && promptMask) {\r\n        if (i === 0 || promptMask[i - 1] !== '\\\\') {\r\n            var val = this.element.value;\r\n            if (promptMask[i] === '>') {\r\n                key = key.toUpperCase();\r\n                break;\r\n            }\r\n            else if (promptMask[i] === '<') {\r\n                key = key.toLowerCase();\r\n                break;\r\n            }\r\n            else if (promptMask[i] === '|') {\r\n                break;\r\n            }\r\n        }\r\n        --i;\r\n    }\r\n    return key;\r\n}\r\n/**\r\n * @hidden\r\n * To set updated values in the MaskedTextBox.\r\n */\r\nexport function setMaskValue(val) {\r\n    if (this.mask && val !== undefined && (this.prevValue === undefined || this.prevValue !== val)) {\r\n        this.maskKeyPress = true;\r\n        setElementValue.call(this, this.promptMask);\r\n        if (val !== '' && !(val === null && this.floatLabelType === 'Never' && this.placeholder)) {\r\n            this.element.selectionStart = 0;\r\n            this.element.selectionEnd = 0;\r\n        }\r\n        if (val !== null) {\r\n            for (var i = 0; i < val.length; i++) {\r\n                validateValue.call(this, val[i], false, null);\r\n            }\r\n        }\r\n        var newVal = strippedValue.call(this, this.element);\r\n        this.prevValue = newVal;\r\n        this.value = newVal;\r\n        triggerMaskChangeEvent.call(this, null, null);\r\n        this.maskKeyPress = false;\r\n        var labelElement = this.element.parentNode.querySelector('.e-float-text');\r\n        if (this.element.value === this.promptMask && this.floatLabelType === 'Auto' && this.placeholder &&\r\n            !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {\r\n            removeClass([labelElement], TOPLABEL);\r\n            addClass([labelElement], BOTTOMLABEL);\r\n            setElementValue.call(this, '');\r\n        }\r\n    }\r\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\r\n        setElementValue.call(this, this.value);\r\n    }\r\n}\r\n/**\r\n * @hidden\r\n * To set updated values in the input element.\r\n */\r\nexport function setElementValue(val, element) {\r\n    if (!this.isFocus && this.floatLabelType === 'Auto' && this.placeholder && isNullOrUndefined(this.value)) {\r\n        val = '';\r\n    }\r\n    var value = strippedValue.call(this, (element ? element : this.element), val);\r\n    if (value === null || value === '') {\r\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, false);\r\n        if (this.showClearButton) {\r\n            this.inputObj.clearButton.classList.add('e-clear-icon-hide');\r\n        }\r\n    }\r\n    else {\r\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, this.showClearButton);\r\n    }\r\n}\r\n/**\r\n * @hidden\r\n * Provide mask support to input textbox through utility method.\r\n */\r\nexport function maskInput(args) {\r\n    var inputEle = getMaskInput(args);\r\n    applyMask.call(inputEle);\r\n    var val = strippedValue.call(this, this.element);\r\n    this.prevValue = val;\r\n    this.value = val;\r\n    if (args.mask) {\r\n        unwireEvents.call(inputEle);\r\n        wireEvents.call(inputEle);\r\n    }\r\n}\r\nfunction getMaskInput(args) {\r\n    addClass([args.element], UTILMASK);\r\n    var inputEle = {\r\n        element: args.element,\r\n        mask: args.mask,\r\n        promptMask: '',\r\n        hiddenMask: '',\r\n        escapeMaskValue: '',\r\n        promptChar: args.promptChar ? (args.promptChar.length > 1) ? args.promptChar = args.promptChar[0]\r\n            : args.promptChar : '_',\r\n        value: args.value ? args.value : null,\r\n        regExpCollec: regularExpressions,\r\n        customRegExpCollec: [],\r\n        customCharacters: args.customCharacters,\r\n        undoCollec: [],\r\n        redoCollec: [],\r\n        maskKeyPress: false,\r\n        prevValue: ''\r\n    };\r\n    createMask.call(inputEle);\r\n    return inputEle;\r\n}\r\n/**\r\n * @hidden\r\n * Gets raw value of the textbox which has been masked through utility method.\r\n */\r\nexport function getVal(args) {\r\n    return strippedValue.call(getUtilMaskEle(args), args.element);\r\n}\r\n/**\r\n * @hidden\r\n * Gets masked value of the textbox which has been masked through utility method.\r\n */\r\nexport function getMaskedVal(args) {\r\n    return unstrippedValue.call(getUtilMaskEle(args), args.element);\r\n}\r\nfunction getUtilMaskEle(args) {\r\n    var value = '';\r\n    var inputEle;\r\n    if (!isNullOrUndefined(args) && args.element.classList.contains(UTILMASK)) {\r\n        inputEle = getMaskInput(args);\r\n    }\r\n    return inputEle;\r\n}\r\n/**\r\n * @hidden\r\n * Arguments to perform undo and redo functionalities.\r\n */\r\nvar MaskUndo = /*@__PURE__*/ (function () {\r\n    function MaskUndo() {\r\n    }\r\n    return MaskUndo;\r\n}());\r\nexport { MaskUndo };\r\nvar maskUndo = new MaskUndo();\r\n",null]}