{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\ng2-ckeditor\\lib\\src\\ckeditor.component.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\ng2-ckeditor\\lib\\src\\ckeditor.component.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Imports\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar ckbutton_directive_1 = require(\"./ckbutton.directive\");\nvar ckgroup_directive_1 = require(\"./ckgroup.directive\");\n/**\n * CKEditor component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\"></ckeditor>\n */\nvar CKEditorComponent = /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     */\n    function CKEditorComponent(zone) {\n        this.zone = zone;\n        this.change = new core_1.EventEmitter();\n        this.editorChange = new core_1.EventEmitter();\n        this.ready = new core_1.EventEmitter();\n        this.blur = new core_1.EventEmitter();\n        this.focus = new core_1.EventEmitter();\n        this.contentDom = new core_1.EventEmitter();\n        this.fileUploadRequest = new core_1.EventEmitter();\n        this.fileUploadResponse = new core_1.EventEmitter();\n        this.paste = new core_1.EventEmitter();\n        this.drop = new core_1.EventEmitter();\n        this._value = '';\n    }\n    CKEditorComponent_1 = CKEditorComponent;\n    Object.defineProperty(CKEditorComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        set: function (v) {\n            if (v !== this._value) {\n                this._value = v;\n                this.onChange(v);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CKEditorComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.readonly && this.instance) {\n            this.instance.setReadOnly(changes.readonly.currentValue);\n        }\n    };\n    /**\n     * On component destroy\n     */\n    CKEditorComponent.prototype.ngOnDestroy = function () {\n        var _this = this;\n        if (this.instance) {\n            setTimeout(function () {\n                _this.instance.removeAllListeners();\n                CKEDITOR.instances[_this.instance.name].destroy();\n                _this.instance.destroy();\n                _this.instance = null;\n            });\n        }\n    };\n    /**\n     * On component view init\n     */\n    CKEditorComponent.prototype.ngAfterViewInit = function () {\n        this.ckeditorInit(this.config || {});\n    };\n    /**\n     * On component view checked\n     */\n    CKEditorComponent.prototype.ngAfterViewChecked = function () {\n        this.ckeditorInit(this.config || {});\n    };\n    /**\n     * Value update process\n     */\n    CKEditorComponent.prototype.updateValue = function (value) {\n        var _this = this;\n        this.zone.run(function () {\n            _this.value = value;\n            _this.onChange(value);\n            _this.onTouched();\n            _this.change.emit(value);\n        });\n    };\n    /**\n     * CKEditor init\n     */\n    CKEditorComponent.prototype.ckeditorInit = function (config) {\n        var _this = this;\n        if (typeof CKEDITOR === 'undefined') {\n            console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');\n        }\n        else {\n            // Check textarea exists\n            if (this.instance || !this.documentContains(this.host.nativeElement)) {\n                return;\n            }\n            if (this.readonly) {\n                config.readOnly = this.readonly;\n            }\n            // CKEditor replace textarea\n            this.instance = CKEDITOR.replace(this.host.nativeElement, config);\n            // Set initial value\n            this.instance.setData(this.value);\n            // listen for instanceReady event\n            this.instance.on('instanceReady', function (evt) {\n                // if value has changed while instance loading\n                // update instance with current component value\n                if (_this.instance.getData() !== _this.value) {\n                    _this.instance.setData(_this.value);\n                }\n                // send the evt to the EventEmitter\n                _this.ready.emit(evt);\n            });\n            // CKEditor change event\n            this.instance.on('change', function (evt) {\n                _this.onTouched();\n                var value = _this.instance.getData();\n                if (_this.value !== value) {\n                    // Debounce update\n                    if (_this.debounce) {\n                        if (_this.debounceTimeout)\n                            clearTimeout(_this.debounceTimeout);\n                        _this.debounceTimeout = setTimeout(function () {\n                            _this.updateValue(value);\n                            _this.debounceTimeout = null;\n                        }, parseInt(_this.debounce));\n                        // Live update\n                    }\n                    else {\n                        _this.updateValue(value);\n                    }\n                }\n                // Original ckeditor event dispatch\n                _this.editorChange.emit(evt);\n            });\n            // CKEditor blur event\n            this.instance.on('blur', function (evt) {\n                _this.blur.emit(evt);\n            });\n            // CKEditor focus event\n            this.instance.on('focus', function (evt) {\n                _this.focus.emit(evt);\n            });\n            // CKEditor contentDom event\n            this.instance.on('contentDom', function (evt) {\n                _this.contentDom.emit(evt);\n            });\n            // CKEditor fileUploadRequest event\n            this.instance.on('fileUploadRequest', function (evt) {\n                _this.fileUploadRequest.emit(evt);\n            });\n            // CKEditor fileUploadResponse event\n            this.instance.on('fileUploadResponse', function (evt) {\n                _this.fileUploadResponse.emit(evt);\n            });\n            // CKEditor paste event\n            this.instance.on('paste', function (evt) {\n                _this.paste.emit(evt);\n            });\n            // CKEditor drop event\n            this.instance.on('drop', function (evt) {\n                _this.drop.emit(evt);\n            });\n            // Add Toolbar Groups to Editor. This will also add Buttons within groups.\n            this.toolbarGroups.forEach(function (group) {\n                group.initialize(_this);\n            });\n            // Add Toolbar Buttons to Editor.\n            this.toolbarButtons.forEach(function (button) {\n                button.initialize(_this);\n            });\n        }\n    };\n    /**\n     * Implements ControlValueAccessor\n     */\n    CKEditorComponent.prototype.writeValue = function (value) {\n        this._value = value;\n        if (this.instance)\n            this.instance.setData(value);\n    };\n    CKEditorComponent.prototype.onChange = function (_) { };\n    CKEditorComponent.prototype.onTouched = function () { };\n    CKEditorComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    CKEditorComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    CKEditorComponent.prototype.documentContains = function (node) {\n        return document.contains ? document.contains(node) : document.body.contains(node);\n    };\n    var CKEditorComponent_1;\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"config\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], CKEditorComponent.prototype, \"readonly\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], CKEditorComponent.prototype, \"debounce\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"change\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"editorChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"ready\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"blur\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"focus\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"contentDom\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"fileUploadRequest\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"fileUploadResponse\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"paste\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"drop\", void 0);\n    __decorate([\n        core_1.ViewChild('host'),\n        __metadata(\"design:type\", Object)\n    ], CKEditorComponent.prototype, \"host\", void 0);\n    __decorate([\n        core_1.ContentChildren(ckbutton_directive_1.CKButtonDirective),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], CKEditorComponent.prototype, \"toolbarButtons\", void 0);\n    __decorate([\n        core_1.ContentChildren(ckgroup_directive_1.CKGroupDirective),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], CKEditorComponent.prototype, \"toolbarGroups\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], CKEditorComponent.prototype, \"value\", null);\n    CKEditorComponent = CKEditorComponent_1 = __decorate([\n        core_1.Component({\n            selector: 'ckeditor',\n            providers: [\n                {\n                    provide: forms_1.NG_VALUE_ACCESSOR,\n                    useExisting: core_1.forwardRef(function () { return CKEditorComponent_1; }),\n                    multi: true,\n                },\n            ],\n            template: \"<textarea #host></textarea>\",\n        })\n    ], CKEditorComponent);\n    return CKEditorComponent;\n}());\nexports.CKEditorComponent = CKEditorComponent;\n",null]}