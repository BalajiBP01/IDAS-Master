{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\base\\editor-manager.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\base\\editor-manager.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { Observer } from '@syncfusion/ej2-base';\r\nimport * as CONSTANT from './constant';\r\nimport { Lists } from './../plugin/lists';\r\nimport { NodeSelection } from './../../selection/index';\r\nimport { DOMNode } from './../plugin/dom-node';\r\nimport { Formats } from './../plugin/formats';\r\nimport { LinkCommand } from './../plugin/link';\r\nimport { Alignments } from './../plugin/alignments';\r\nimport { Indents } from './../plugin/indents';\r\nimport { ImageCommand } from './../plugin/image';\r\nimport { TableCommand } from './../plugin/table';\r\nimport { SelectionBasedExec } from './../plugin/selection-exec';\r\nimport { InsertHtmlExec } from './../plugin/inserthtml-exec';\r\nimport { ClearFormatExec } from './../plugin/clearformat-exec';\r\nimport { UndoRedoManager } from './../plugin/undo';\r\nimport * as EVENTS from './../../common/constant';\r\n/**\r\n * EditorManager internal component\r\n * @hidden\r\n */\r\nvar EditorManager = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the component\r\n     * @hidden\r\n     */\r\n    function EditorManager(options) {\r\n        this.currentDocument = options.document;\r\n        this.editableElement = options.editableElement;\r\n        this.nodeSelection = new NodeSelection();\r\n        this.domNode = new DOMNode(this.editableElement, this.currentDocument);\r\n        this.observer = new Observer(this);\r\n        this.listObj = new Lists(this);\r\n        this.formatObj = new Formats(this);\r\n        this.alignmentObj = new Alignments(this);\r\n        this.indentsObj = new Indents(this);\r\n        this.linkObj = new LinkCommand(this);\r\n        this.imgObj = new ImageCommand(this);\r\n        this.selectionObj = new SelectionBasedExec(this);\r\n        this.inserthtmlObj = new InsertHtmlExec(this);\r\n        this.clearObj = new ClearFormatExec(this);\r\n        this.tableObj = new TableCommand(this);\r\n        this.undoRedoManager = new UndoRedoManager(this, options.options);\r\n        this.wireEvents();\r\n    }\r\n    EditorManager.prototype.wireEvents = function () {\r\n        this.observer.on(EVENTS.KEY_DOWN, this.editorKeyDown, this);\r\n        this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\r\n        this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\r\n        this.observer.on(EVENTS.MODEL_CHANGED, this.onPropertyChanged, this);\r\n    };\r\n    EditorManager.prototype.onPropertyChanged = function (props) {\r\n        this.observer.notify(EVENTS.MODEL_CHANGED_PLUGIN, props);\r\n    };\r\n    EditorManager.prototype.editorKeyDown = function (e) {\r\n        this.observer.notify(EVENTS.KEY_DOWN_HANDLER, e);\r\n    };\r\n    EditorManager.prototype.editorKeyUp = function (e) {\r\n        this.observer.notify(EVENTS.KEY_UP_HANDLER, e);\r\n    };\r\n    EditorManager.prototype.execCommand = function (command, value, event, callBack, text, exeValue) {\r\n        switch (command.toLocaleLowerCase()) {\r\n            case 'lists':\r\n                this.observer.notify(EVENTS.LIST_TYPE, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'formats':\r\n                this.observer.notify(EVENTS.FORMAT_TYPE, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'alignments':\r\n                this.observer.notify(CONSTANT.ALIGNMENT_TYPE, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'indents':\r\n                this.observer.notify(CONSTANT.INDENT_TYPE, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'links':\r\n                this.observer.notify(CONSTANT.LINK, { command: command, value: value, item: exeValue, event: event, callBack: callBack });\r\n                break;\r\n            case 'images':\r\n                this.observer.notify(CONSTANT.IMAGE, { command: command, value: value, item: exeValue, event: event, callBack: callBack });\r\n                break;\r\n            case 'table':\r\n                switch (value.toString().toLocaleLowerCase()) {\r\n                    case 'createtable':\r\n                        this.observer.notify(CONSTANT.TABLE, { item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                    case 'insertrowbefore':\r\n                    case 'insertrowafter':\r\n                        this.observer.notify(CONSTANT.INSERT_ROW, { item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                    case 'insertcolumnleft':\r\n                    case 'insertcolumnright':\r\n                        this.observer.notify(CONSTANT.INSERT_COLUMN, { item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                    case 'deleterow':\r\n                        this.observer.notify(CONSTANT.DELETEROW, { item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                    case 'deletecolumn':\r\n                        this.observer.notify(CONSTANT.DELETECOLUMN, { item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                    case 'tableremove':\r\n                        this.observer.notify(CONSTANT.REMOVETABLE, { item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                    case 'tableheader':\r\n                        this.observer.notify(CONSTANT.TABLEHEADER, { item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                    case 'aligntop':\r\n                    case 'alignmiddle':\r\n                    case 'alignbottom':\r\n                        this.observer.notify(CONSTANT.TABLE_VERTICAL_ALIGN, { item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                }\r\n                break;\r\n            case 'font':\r\n            case 'style':\r\n            case 'effects':\r\n            case 'casing':\r\n                this.observer.notify(CONSTANT.SELECTION_TYPE, { subCommand: value, event: event, callBack: callBack, value: text });\r\n                break;\r\n            case 'inserthtml':\r\n                this.observer.notify(CONSTANT.INSERTHTML_TYPE, { callBack: callBack, value: text });\r\n                break;\r\n            case 'clear':\r\n                this.observer.notify(CONSTANT.CLEAR_TYPE, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'actions':\r\n                this.observer.notify(EVENTS.ACTION, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n        }\r\n    };\r\n    return EditorManager;\r\n}());\r\nexport { EditorManager };\r\n",null]}