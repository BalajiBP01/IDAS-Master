{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\selection-commands.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\selection-commands.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\r\n * `Selection` module is used to handle RTE Selections.\r\n */\r\nimport { NodeSelection } from './../../selection/index';\r\nimport { NodeCutter } from './nodecutter';\r\nimport { InsertMethods } from './insert-methods';\r\nimport { IsFormatted } from './isformatted';\r\nvar SelectionCommands = /*@__PURE__*/ (function () {\r\n    function SelectionCommands() {\r\n    }\r\n    SelectionCommands.applyFormat = function (docElement, format, endNode, value) {\r\n        var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',\r\n            'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\r\n        if (validFormats.indexOf(format) > -1) {\r\n            var domSelection = new NodeSelection();\r\n            var nodeCutter = new NodeCutter();\r\n            var isFormatted = new IsFormatted();\r\n            var range = domSelection.getRange(docElement);\r\n            var save = domSelection.save(range, docElement);\r\n            var nodes = domSelection.getSelectionNodeCollection(range);\r\n            var isCollapsed = false;\r\n            var isFormat = false;\r\n            var isCursor = false;\r\n            var isFontStyle = (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1);\r\n            if (range.collapsed) {\r\n                if (nodes.length > 0) {\r\n                    isCollapsed = true;\r\n                    range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\r\n                }\r\n                else if (range.startContainer.nodeName.toLowerCase() !== 'td') {\r\n                    var cursorNode = this.insertCursorNode(domSelection, range, isFormatted, nodeCutter, format, value, endNode);\r\n                    domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\r\n                    domSelection.endOffset = domSelection.startOffset = 1;\r\n                }\r\n            }\r\n            isCursor = range.collapsed;\r\n            for (var index = 0; index < nodes.length; index++) {\r\n                var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\r\n                if (index === 0 && formatNode === null) {\r\n                    isFormat = true;\r\n                }\r\n                if (formatNode !== null && (!isFormat || isFontStyle)) {\r\n                    nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection);\r\n                }\r\n                else {\r\n                    nodes[index] = this.insertFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);\r\n                }\r\n                domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\r\n            }\r\n            save.restore();\r\n        }\r\n    };\r\n    SelectionCommands.insertCursorNode = function (domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\r\n        var cursorNodes = domSelection.getNodeCollection(range);\r\n        var cursorFormat = (cursorNodes.length > 0) ? isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\r\n        var cursorNode = null;\r\n        if (cursorFormat) {\r\n            cursorNode = cursorNodes[0];\r\n            InsertMethods.unwrap(cursorFormat);\r\n        }\r\n        else {\r\n            cursorNode = this.getInsertNode(range, format, value).firstChild;\r\n        }\r\n        return cursorNode;\r\n    };\r\n    SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection) {\r\n        var splitNode = null;\r\n        if (!(range.startContainer === range.endContainer && range.startOffset === 0\r\n            && range.endOffset === range.startContainer.length)) {\r\n            var nodeIndex = [];\r\n            var cloneNode = nodes[index];\r\n            do {\r\n                nodeIndex.push(domSelection.getIndex(cloneNode));\r\n                cloneNode = cloneNode.parentNode;\r\n            } while (cloneNode && (cloneNode !== formatNode));\r\n            cloneNode = splitNode = nodeCutter.GetSpliceNode(range, formatNode);\r\n            if (!isCursor) {\r\n                while (cloneNode && cloneNode.childNodes.length > 0 && ((nodeIndex.length - 1) >= 0)\r\n                    && (cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1])) {\r\n                    cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\r\n                    nodeIndex.pop();\r\n                }\r\n                if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\r\n                    nodes[index] = cloneNode;\r\n                }\r\n                else {\r\n                    var divNode = document.createElement('div');\r\n                    divNode.innerHTML = '&#65279;&#65279;';\r\n                    if (cloneNode.nodeType !== 3) {\r\n                        cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\r\n                        nodes[index] = cloneNode.firstChild;\r\n                    }\r\n                    else {\r\n                        cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\r\n                        nodes[index] = cloneNode.previousSibling;\r\n                        cloneNode.parentNode.removeChild(cloneNode);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                var lastNode = splitNode;\r\n                for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\r\n                    lastNode = lastNode.firstChild;\r\n                }\r\n                lastNode.innerHTML = '&#65279;&#65279;';\r\n                nodes[index] = lastNode.firstChild;\r\n            }\r\n        }\r\n        var child = InsertMethods.unwrap(formatNode);\r\n        if (child.length > 0 && isFontStyle) {\r\n            for (var num = 0; num < child.length; num++) {\r\n                child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value));\r\n            }\r\n        }\r\n        return nodes[index];\r\n    };\r\n    SelectionCommands.insertFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {\r\n        if (!isCursor) {\r\n            if ((formatNode === null && isFormat) || isFontStyle) {\r\n                nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\r\n                nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\r\n                if (format === 'uppercase' || format === 'lowercase') {\r\n                    nodes[index].textContent = (format === 'uppercase') ? nodes[index].textContent.toLocaleUpperCase()\r\n                        : nodes[index].textContent.toLocaleLowerCase();\r\n                }\r\n                else if (!(isFontStyle === true && value === '')) {\r\n                    var element = this.GetFormatNode(format, value);\r\n                    nodes[index] = (index === (nodes.length - 1)) ? InsertMethods.Wrap(nodes[index], element)\r\n                        : InsertMethods.WrapBefore(nodes[index], element, true);\r\n                    nodes[index] = this.getChildNode(nodes[index], element);\r\n                }\r\n            }\r\n            else {\r\n                nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\r\n            }\r\n        }\r\n        else {\r\n            if (format !== 'uppercase' && format !== 'lowercase') {\r\n                var element = this.getInsertNode(range, format, value);\r\n                nodes[index] = element.firstChild;\r\n                nodeCutter.position = 1;\r\n            }\r\n            else {\r\n                nodeCutter.position = range.startOffset;\r\n            }\r\n        }\r\n        return nodes[index];\r\n    };\r\n    SelectionCommands.getInsertNode = function (range, format, value) {\r\n        var element = this.GetFormatNode(format, value);\r\n        element.innerHTML = '&#65279;&#65279;';\r\n        range.insertNode(element);\r\n        return element;\r\n    };\r\n    SelectionCommands.getChildNode = function (node, element) {\r\n        if (node === undefined || node === null) {\r\n            element.innerHTML = '&#65279;';\r\n            node = element.firstChild;\r\n        }\r\n        return node;\r\n    };\r\n    SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\r\n        if (nodes.length === 1 && !isCollapsed) {\r\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\r\n            domSelection.endContainer = domSelection.startContainer;\r\n            domSelection.startOffset = 0;\r\n            domSelection.endOffset = nodes[index].textContent.length;\r\n        }\r\n        else if (nodes.length === 1 && isCollapsed) {\r\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\r\n            domSelection.endContainer = domSelection.startContainer;\r\n            domSelection.startOffset = nodeCutter.position;\r\n            domSelection.endOffset = nodeCutter.position;\r\n        }\r\n        else if (index === 0) {\r\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\r\n            domSelection.startOffset = 0;\r\n        }\r\n        else if (index === nodes.length - 1) {\r\n            domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\r\n            domSelection.endOffset = nodes[index].textContent.length;\r\n        }\r\n        return domSelection;\r\n    };\r\n    SelectionCommands.GetFormatNode = function (format, value) {\r\n        var node;\r\n        switch (format) {\r\n            case 'bold':\r\n                return document.createElement('strong');\r\n            case 'italic':\r\n                return document.createElement('em');\r\n            case 'underline':\r\n                node = document.createElement('span');\r\n                node.style.textDecoration = 'underline';\r\n                return node;\r\n            case 'strikethrough':\r\n                node = document.createElement('span');\r\n                node.style.textDecoration = 'line-through';\r\n                return node;\r\n            case 'superscript':\r\n                return document.createElement('sup');\r\n            case 'subscript':\r\n                return document.createElement('sub');\r\n            case 'fontcolor':\r\n                node = document.createElement('span');\r\n                node.style.color = value;\r\n                node.style.textDecoration = 'inherit';\r\n                return node;\r\n            case 'fontname':\r\n                node = document.createElement('span');\r\n                node.style.fontFamily = value;\r\n                return node;\r\n            case 'fontsize':\r\n                node = document.createElement('span');\r\n                node.style.fontSize = value;\r\n                return node;\r\n            default:\r\n                node = document.createElement('span');\r\n                node.style.backgroundColor = value;\r\n                return node;\r\n        }\r\n    };\r\n    return SelectionCommands;\r\n}());\r\nexport { SelectionCommands };\r\n",null]}