{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\quick-toolbar.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\quick-toolbar.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { select, isNullOrUndefined, Browser, addClass, removeClass, EventHandler, closest } from '@syncfusion/ej2-base';\r\nimport { RenderType } from '../base/enum';\r\nimport * as events from '../base/constant';\r\nimport { pageYOffset, hasClass } from '../base/util';\r\nimport { BaseQuickToolbar } from './base-quick-toolbar';\r\nimport { PopupRenderer } from '../renderer/popup-renderer';\r\nimport { CLS_INLINE_POP, CLS_INLINE } from '../base/classes';\r\n/**\r\n * `Quick toolbar` module is used to handle Quick toolbar actions.\r\n */\r\nvar QuickToolbar = /*@__PURE__*/ (function () {\r\n    function QuickToolbar(parent, locator) {\r\n        this.parent = parent;\r\n        this.locator = locator;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        this.renderFactory.addRenderer(RenderType.Popup, new PopupRenderer(this.parent));\r\n        this.addEventListener();\r\n    }\r\n    QuickToolbar.prototype.formatItems = function (items) {\r\n        var formattedItems = [];\r\n        items.forEach(function (item) {\r\n            if (typeof item === 'string') {\r\n                switch (item.toLocaleLowerCase()) {\r\n                    case 'open':\r\n                        formattedItems.push('openLink');\r\n                        break;\r\n                    case 'edit':\r\n                        formattedItems.push('editLink');\r\n                        break;\r\n                    case 'unlink':\r\n                        formattedItems.push('removeLink');\r\n                        break;\r\n                    default:\r\n                        formattedItems.push(item);\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                formattedItems.push(item);\r\n            }\r\n        });\r\n        return formattedItems;\r\n    };\r\n    QuickToolbar.prototype.getQTBarOptions = function (popType, mode, items, type) {\r\n        return {\r\n            popupType: popType,\r\n            toolbarItems: items,\r\n            mode: mode,\r\n            renderType: type\r\n        };\r\n    };\r\n    QuickToolbar.prototype.createQTBar = function (popupType, mode, items, type) {\r\n        if (items.length < 1) {\r\n            return null;\r\n        }\r\n        var qTBar = new BaseQuickToolbar(this.parent, this.locator);\r\n        qTBar.render(this.getQTBarOptions(popupType, mode, this.formatItems(items), type));\r\n        return qTBar;\r\n    };\r\n    QuickToolbar.prototype.initializeQuickToolbars = function () {\r\n        this.parent.quickToolbarModule = this;\r\n        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\r\n    };\r\n    QuickToolbar.prototype.onMouseDown = function (e) {\r\n        this.parent.isBlur = false;\r\n        this.parent.isRTE = true;\r\n    };\r\n    QuickToolbar.prototype.renderQuickToolbars = function () {\r\n        if (this.linkQTBar || this.imageQTBar || this.textQTBar || this.tableQTBar) {\r\n            return;\r\n        }\r\n        this.linkQTBar = this.createQTBar('Link', 'Scrollable', this.parent.quickToolbarSettings.link, RenderType.LinkToolbar);\r\n        this.renderFactory.addRenderer(RenderType.LinkToolbar, this.linkQTBar);\r\n        this.textQTBar = this.createQTBar('Text', 'Scrollable', this.parent.quickToolbarSettings.text, RenderType.TextToolbar);\r\n        this.renderFactory.addRenderer(RenderType.TextToolbar, this.textQTBar);\r\n        this.imageQTBar = this.createQTBar('Image', 'MultiRow', this.parent.quickToolbarSettings.image, RenderType.ImageToolbar);\r\n        this.renderFactory.addRenderer(RenderType.ImageToolbar, this.imageQTBar);\r\n        this.tableQTBar = this.createQTBar('Table', 'MultiRow', this.parent.quickToolbarSettings.table, RenderType.TableToolbar);\r\n        this.renderFactory.addRenderer(RenderType.TableToolbar, this.tableQTBar);\r\n        if (this.linkQTBar) {\r\n            EventHandler.add(this.linkQTBar.element, 'mousedown', this.onMouseDown, this);\r\n        }\r\n        if (this.imageQTBar) {\r\n            EventHandler.add(this.imageQTBar.element, 'mousedown', this.onMouseDown, this);\r\n        }\r\n        if (this.textQTBar) {\r\n            EventHandler.add(this.textQTBar.element, 'mousedown', this.onMouseDown, this);\r\n        }\r\n        if (this.tableQTBar) {\r\n            EventHandler.add(this.tableQTBar.element, 'mousedown', this.onMouseDown, this);\r\n        }\r\n    };\r\n    QuickToolbar.prototype.renderInlineQuickToolbar = function () {\r\n        addClass([this.parent.element], [CLS_INLINE]);\r\n        this.inlineQTBar = this.createQTBar('Inline', 'MultiRow', this.parent.toolbarSettings.items, RenderType.InlineToolbar);\r\n        this.renderFactory.addRenderer(RenderType.InlineToolbar, this.inlineQTBar);\r\n        EventHandler.add(this.inlineQTBar.element, 'mousedown', this.onMouseDown, this);\r\n    };\r\n    QuickToolbar.prototype.showInlineQTBar = function (x, y, target) {\r\n        this.inlineQTBar.showPopup(x, y, target);\r\n    };\r\n    QuickToolbar.prototype.hideInlineQTBar = function () {\r\n        if (this.inlineQTBar && !hasClass(this.inlineQTBar.element, 'e-popup-close')) {\r\n            this.inlineQTBar.hidePopup();\r\n        }\r\n    };\r\n    QuickToolbar.prototype.hideQuickToolbars = function () {\r\n        if (this.linkQTBar && !hasClass(this.linkQTBar.element, 'e-popup-close')) {\r\n            this.linkQTBar.hidePopup();\r\n        }\r\n        if (this.textQTBar && !hasClass(this.textQTBar.element, 'e-popup-close')) {\r\n            this.textQTBar.hidePopup();\r\n        }\r\n        if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close')) {\r\n            this.imageQTBar.hidePopup();\r\n        }\r\n        if (this.tableQTBar && !hasClass(this.tableQTBar.element, 'e-popup-close')) {\r\n            this.tableQTBar.hidePopup();\r\n        }\r\n        if (this.parent.inlineMode.enable && !Browser.isDevice) {\r\n            this.hideInlineQTBar();\r\n        }\r\n    };\r\n    QuickToolbar.prototype.deBounce = function (x, y, target) {\r\n        var _this = this;\r\n        clearTimeout(this.deBouncer);\r\n        this.deBouncer = window.setTimeout(function () { _this.showInlineQTBar(x, y, target); }, 1000);\r\n    };\r\n    QuickToolbar.prototype.mouseUpHandler = function (e) {\r\n        var args = e.args;\r\n        var range = this.parent.getRange();\r\n        var target = args.target;\r\n        if (isNullOrUndefined(select('.' + CLS_INLINE_POP, document.body))) {\r\n            this.hideInlineQTBar();\r\n            this.offsetX = args.pageX;\r\n            this.offsetY = pageYOffset(args, this.parent.element, this.parent.iframeSettings.enable);\r\n            if (target.nodeName === 'TEXTAREA') {\r\n                this.showInlineQTBar(this.offsetX, this.offsetY, target);\r\n            }\r\n            else {\r\n                if (target.tagName !== 'IMG' && target.tagName !== 'A' && (!closest(target, 'td,th') || !range.collapsed)) {\r\n                    if (this.parent.inlineMode.onSelection && range.collapsed) {\r\n                        return;\r\n                    }\r\n                    this.target = target;\r\n                    this.showInlineQTBar(this.offsetX, this.offsetY, target);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    QuickToolbar.prototype.keyDownHandler = function () {\r\n        if (!isNullOrUndefined(select('.' + CLS_INLINE_POP, document))) {\r\n            this.hideInlineQTBar();\r\n        }\r\n    };\r\n    QuickToolbar.prototype.inlineQTBarMouseDownHandler = function () {\r\n        if (!isNullOrUndefined(select('.' + CLS_INLINE_POP, document))) {\r\n            this.hideInlineQTBar();\r\n        }\r\n    };\r\n    QuickToolbar.prototype.keyUpHandler = function (e) {\r\n        if (this.parent.inlineMode.onSelection) {\r\n            return;\r\n        }\r\n        var args = e.args;\r\n        this.deBounce(this.offsetX, this.offsetY, args.target);\r\n    };\r\n    QuickToolbar.prototype.getInlineBaseToolbar = function () {\r\n        return this.inlineQTBar && this.inlineQTBar.quickTBarObj;\r\n    };\r\n    /**\r\n     * Destroys the ToolBar.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    QuickToolbar.prototype.destroy = function () {\r\n        if (this.linkQTBar) {\r\n            EventHandler.remove(this.linkQTBar.element, 'mousedown', this.onMouseDown);\r\n            this.linkQTBar.destroy();\r\n        }\r\n        if (this.textQTBar) {\r\n            EventHandler.remove(this.textQTBar.element, 'mousedown', this.onMouseDown);\r\n            this.textQTBar.destroy();\r\n        }\r\n        if (this.imageQTBar) {\r\n            EventHandler.remove(this.imageQTBar.element, 'mousedown', this.onMouseDown);\r\n            this.imageQTBar.destroy();\r\n        }\r\n        if (this.tableQTBar) {\r\n            EventHandler.remove(this.tableQTBar.element, 'mousedown', this.onMouseDown);\r\n            this.tableQTBar.destroy();\r\n        }\r\n        if (this.inlineQTBar) {\r\n            EventHandler.remove(this.inlineQTBar.element, 'mousedown', this.onMouseDown);\r\n            this.inlineQTBar.destroy();\r\n        }\r\n        this.removeEventListener();\r\n    };\r\n    QuickToolbar.prototype.wireInlineQTBarEvents = function () {\r\n        this.parent.on(events.mouseUp, this.mouseUpHandler, this);\r\n        this.parent.on(events.mouseDown, this.inlineQTBarMouseDownHandler, this);\r\n        this.parent.on(events.keyDown, this.keyDownHandler, this);\r\n        this.parent.on(events.keyUp, this.keyUpHandler, this);\r\n        this.parent.on(events.sourceCodeMouseDown, this.mouseUpHandler, this);\r\n        this.parent.on(events.renderInlineToolbar, this.renderInlineQuickToolbar, this);\r\n    };\r\n    QuickToolbar.prototype.unWireInlineQTBarEvents = function () {\r\n        this.parent.off(events.mouseUp, this.mouseUpHandler);\r\n        this.parent.off(events.mouseDown, this.inlineQTBarMouseDownHandler);\r\n        this.parent.off(events.keyDown, this.keyDownHandler);\r\n        this.parent.off(events.keyUp, this.keyUpHandler);\r\n        this.parent.off(events.sourceCodeMouseDown, this.mouseUpHandler);\r\n        this.parent.off(events.renderInlineToolbar, this.renderInlineQuickToolbar);\r\n    };\r\n    QuickToolbar.prototype.toolbarUpdated = function (args) {\r\n        if (this.linkQTBar && !hasClass(this.linkQTBar.element, 'e-popup-close')) {\r\n            this.linkQTBar.hidePopup();\r\n        }\r\n        if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close')) {\r\n            this.imageQTBar.hidePopup();\r\n        }\r\n        if (this.tableQTBar && !hasClass(this.tableQTBar.element, 'e-popup-close')) {\r\n            this.tableQTBar.hidePopup();\r\n        }\r\n    };\r\n    QuickToolbar.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.on(events.initialEnd, this.initializeQuickToolbars, this);\r\n        this.parent.on(events.mouseDown, this.renderQuickToolbars, this);\r\n        this.parent.on(events.toolbarUpdated, this.toolbarUpdated, this);\r\n        if (this.parent.inlineMode.enable && !Browser.isDevice) {\r\n            this.wireInlineQTBarEvents();\r\n        }\r\n        this.parent.on(events.modelChanged, this.onPropertyChanged, this);\r\n        if (this.parent.quickToolbarSettings.actionOnScroll === 'hide') {\r\n            this.parent.on(events.scroll, this.hideQuickToolbars, this);\r\n        }\r\n        this.parent.on(events.focusChange, this.hideQuickToolbars, this);\r\n        this.parent.on(events.iframeMouseDown, this.onIframeMouseDown, this);\r\n        this.parent.on(events.destroy, this.destroy, this);\r\n        this.parent.on(events.keyDown, this.onKeyDown, this);\r\n        this.parent.on(events.rtlMode, this.setRtl, this);\r\n    };\r\n    QuickToolbar.prototype.onKeyDown = function (e) {\r\n        var args = e.args;\r\n        if (args.which === 8 || args.which === 46) {\r\n            if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close')) {\r\n                this.imageQTBar.hidePopup();\r\n            }\r\n        }\r\n    };\r\n    QuickToolbar.prototype.onIframeMouseDown = function () {\r\n        this.hideQuickToolbars();\r\n        this.hideInlineQTBar();\r\n    };\r\n    QuickToolbar.prototype.setRtl = function (args) {\r\n        if (this.inlineQTBar) {\r\n            this.inlineQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n        if (this.imageQTBar) {\r\n            this.imageQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n        if (this.linkQTBar) {\r\n            this.imageQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n    };\r\n    QuickToolbar.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.initialEnd, this.initializeQuickToolbars);\r\n        this.parent.off(events.mouseDown, this.renderQuickToolbars);\r\n        this.parent.off(events.toolbarUpdated, this.toolbarUpdated);\r\n        if (this.parent.inlineMode.enable && !Browser.isDevice) {\r\n            this.unWireInlineQTBarEvents();\r\n        }\r\n        this.parent.off(events.modelChanged, this.onPropertyChanged);\r\n        if (this.parent.quickToolbarSettings.actionOnScroll === 'hide') {\r\n            this.parent.off(events.scroll, this.hideQuickToolbars);\r\n        }\r\n        this.parent.off(events.focusChange, this.hideQuickToolbars);\r\n        this.parent.off(events.destroy, this.destroy);\r\n        this.parent.off(events.iframeMouseDown, this.onIframeMouseDown);\r\n        this.parent.off(events.keyDown, this.onKeyDown);\r\n        this.parent.off(events.rtlMode, this.setRtl);\r\n    };\r\n    /**\r\n     * Called internally if any of the property value changed.\r\n     * @hidden\r\n     */\r\n    QuickToolbar.prototype.onPropertyChanged = function (e) {\r\n        if (!isNullOrUndefined(e.newProp.quickToolbarSettings)) {\r\n            for (var _i = 0, _a = Object.keys(e.newProp.quickToolbarSettings); _i < _a.length; _i++) {\r\n                var prop = _a[_i];\r\n                switch (prop) {\r\n                    case 'actionOnScroll':\r\n                        if (e.newProp.quickToolbarSettings.actionOnScroll === 'none') {\r\n                            this.parent.off(events.scroll, this.hideQuickToolbars);\r\n                        }\r\n                        else {\r\n                            this.parent.on(events.scroll, this.hideQuickToolbars, this);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (e.module !== this.getModuleName()) {\r\n            return;\r\n        }\r\n        if (this.inlineQTBar) {\r\n            removeClass([this.parent.element], [CLS_INLINE]);\r\n            this.unWireInlineQTBarEvents();\r\n            this.hideInlineQTBar();\r\n            if (this.parent.inlineMode.enable && !Browser.isDevice) {\r\n                addClass([this.parent.element], [CLS_INLINE]);\r\n                this.wireInlineQTBarEvents();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * For internal use only - Get the module name.\r\n     */\r\n    QuickToolbar.prototype.getModuleName = function () {\r\n        return 'quickToolbar';\r\n    };\r\n    return QuickToolbar;\r\n}());\r\nexport { QuickToolbar };\r\n",null]}