{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\link-module.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\link-module.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { EventHandler, detach, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { closest, addClass, removeClass, Browser } from '@syncfusion/ej2-base';\r\nimport * as events from '../base/constant';\r\nimport { CLS_RTE_ELEMENTS } from '../base/classes';\r\nimport { Dialog } from '@syncfusion/ej2-popups';\r\nimport { CheckBox } from '@syncfusion/ej2-buttons';\r\nimport { RenderType } from '../base/enum';\r\nimport { dispatchEvent, parseHtml } from '../base/util';\r\n/**\r\n * `Link` module is used to handle undo actions.\r\n */\r\nvar Link = /*@__PURE__*/ (function () {\r\n    function Link(parent, serviceLocator) {\r\n        this.parent = parent;\r\n        this.rteID = parent.element.id;\r\n        this.i10n = serviceLocator.getService('rteLocale');\r\n        this.addEventListener();\r\n        this.serviceLocator = serviceLocator;\r\n        this.rendererFactory = serviceLocator.getService('rendererFactory');\r\n    }\r\n    Link.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.on(events.insertLink, this.linkDialog, this);\r\n        this.parent.on(events.keyDown, this.onKeyDown, this);\r\n        this.parent.on(events.insertCompleted, this.showLinkQuickToolbar, this);\r\n        this.parent.on(events.linkToolbarAction, this.onToolbarAction, this);\r\n        this.parent.on(events.iframeMouseDown, this.onIframeMouseDown, this);\r\n        this.parent.on(events.unLink, this.removeLink, this);\r\n        this.parent.on(events.editLink, this.editLink, this);\r\n        this.parent.on(events.openLink, this.openLink, this);\r\n        this.parent.on(events.editAreaClick, this.editAreaClickHandler, this);\r\n    };\r\n    Link.prototype.onToolbarAction = function (args) {\r\n        var item = args.args.item;\r\n        switch (item.subCommand) {\r\n            case 'OpenLink':\r\n                this.parent.notify(events.openLink, args);\r\n                break;\r\n            case 'EditLink':\r\n                this.parent.notify(events.editLink, args);\r\n                break;\r\n            case 'RemoveLink':\r\n                this.parent.notify(events.unLink, args);\r\n                break;\r\n        }\r\n    };\r\n    Link.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.insertLink, this.linkDialog);\r\n        this.parent.off(events.keyDown, this.onKeyDown);\r\n        this.parent.off(events.insertCompleted, this.showLinkQuickToolbar);\r\n        this.parent.off(events.linkToolbarAction, this.onToolbarAction);\r\n        this.parent.off(events.unLink, this.removeLink);\r\n        this.parent.off(events.iframeMouseDown, this.onIframeMouseDown);\r\n        this.parent.off(events.editLink, this.editLink);\r\n        this.parent.off(events.openLink, this.openLink);\r\n        this.parent.off(events.editAreaClick, this.editAreaClickHandler);\r\n    };\r\n    Link.prototype.onIframeMouseDown = function () {\r\n        if (this.dialogObj) {\r\n            this.dialogObj.hide({ returnValue: true });\r\n        }\r\n    };\r\n    Link.prototype.showLinkQuickToolbar = function (e) {\r\n        var pageX;\r\n        var pageY;\r\n        if (e.type !== 'Links' || isNullOrUndefined(this.parent.quickToolbarModule) ||\r\n            isNullOrUndefined(this.parent.quickToolbarModule.linkQTBar)) {\r\n            return;\r\n        }\r\n        this.quickToolObj = this.parent.quickToolbarModule;\r\n        var parentTop = this.parent.element.getBoundingClientRect().top;\r\n        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\r\n        var args = e.args;\r\n        var target;\r\n        [].forEach.call(e.elements, function (element, index) {\r\n            if (index === 0) {\r\n                target = ((element.nodeName === '#text') ? (element.parentNode) : element);\r\n            }\r\n        });\r\n        if (e.isNotify) {\r\n            pageX = target.getBoundingClientRect().left;\r\n            var tbElement = this.parent.toolbarModule.getToolbarElement();\r\n            var linkTop = target.getBoundingClientRect().top;\r\n            var linkPos = linkTop - parentTop;\r\n            var tbHeight = (tbElement) ? (tbElement.offsetHeight + this.parent.toolbarModule.getExpandTBarPopHeight()) : 0;\r\n            pageY = window.pageYOffset + ((this.parent.iframeSettings.enable) ? (parentTop + tbHeight + linkTop) : (parentTop + linkPos));\r\n        }\r\n        else {\r\n            pageX = args.pageX;\r\n            pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset + parentTop + args.clientY : args.pageY;\r\n        }\r\n        if (this.quickToolObj.linkQTBar) {\r\n            this.quickToolObj.linkQTBar.showPopup(pageX, pageY, range.endContainer);\r\n        }\r\n    };\r\n    Link.prototype.hideLinkQuickToolbar = function () {\r\n        if (this.quickToolObj && this.quickToolObj.linkQTBar && document.body.contains(this.quickToolObj.linkQTBar.element)) {\r\n            this.quickToolObj.linkQTBar.hidePopup();\r\n        }\r\n    };\r\n    Link.prototype.editAreaClickHandler = function (e) {\r\n        var args = e.args;\r\n        if (args.which === 2 || args.which === 3) {\r\n            return;\r\n        }\r\n        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.linkQTBar) {\r\n            this.quickToolObj = this.parent.quickToolbarModule;\r\n            var target = args.target;\r\n            this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\r\n            var isPopupOpen = this.quickToolObj.linkQTBar.element.classList.contains('e-rte-pop');\r\n            if (target.nodeName === 'A' && !target.contains(target.querySelector('img'))) {\r\n                if (isPopupOpen) {\r\n                    return;\r\n                }\r\n                this.showLinkQuickToolbar({\r\n                    args: args,\r\n                    isNotify: false,\r\n                    type: 'Links',\r\n                    elements: [args.target]\r\n                });\r\n            }\r\n            else {\r\n                this.hideLinkQuickToolbar();\r\n            }\r\n        }\r\n    };\r\n    Link.prototype.onKeyDown = function (event) {\r\n        var originalEvent = event.args;\r\n        switch (originalEvent.action) {\r\n            case 'escape':\r\n                if (!isNullOrUndefined(this.dialogObj)) {\r\n                    this.dialogObj.close();\r\n                }\r\n                break;\r\n            case 'insert-link':\r\n                if (this.parent.editorMode === 'HTML') {\r\n                    var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\r\n                    var save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());\r\n                    var selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);\r\n                    var selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\r\n                    var eventArgs = {\r\n                        args: event.args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle\r\n                    };\r\n                    this.linkDialog(eventArgs);\r\n                }\r\n                else {\r\n                    var textArea = this.parent.contentModule.getEditPanel();\r\n                    this.parent.formatter.editorManager.markdownSelection.save(textArea.selectionStart, textArea.selectionEnd);\r\n                    this.linkDialog({\r\n                        args: {\r\n                            item: { command: 'Links', subCommand: 'Link' },\r\n                            originalEvent: originalEvent\r\n                        },\r\n                        member: 'link',\r\n                        text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),\r\n                        module: 'Markdown',\r\n                        name: 'insertLink'\r\n                    });\r\n                }\r\n                originalEvent.preventDefault();\r\n                break;\r\n        }\r\n    };\r\n    Link.prototype.linkDialog = function (e, inputDetails) {\r\n        var _this = this;\r\n        if (this.dialogObj) {\r\n            this.dialogObj.hide({ returnValue: true });\r\n            return;\r\n        }\r\n        if (this.parent.editorMode === 'HTML' && (e.selectParent.length > 0 &&\r\n            !isNullOrUndefined(e.selectParent[0].classList) &&\r\n            e.selectParent[0].classList.contains('e-rte-anchor')) && isNullOrUndefined(inputDetails)) {\r\n            this.editLink(e);\r\n            return;\r\n        }\r\n        var selectText;\r\n        var linkWebAddress = this.i10n.getConstant('linkWebUrl');\r\n        var linkDisplayText = this.i10n.getConstant('linkText');\r\n        var linkTooltip = this.i10n.getConstant('linkTooltipLabel');\r\n        var urlPlace = this.i10n.getConstant('linkurl');\r\n        var textPlace = this.i10n.getConstant('textPlaceholder');\r\n        var title = this.i10n.getConstant('linkTitle');\r\n        var linkDialogEle = this.parent.createElement('div', { className: 'e-rte-link-dialog', id: this.rteID + '_rtelink' });\r\n        this.parent.element.appendChild(linkDialogEle);\r\n        var linkContent = this.parent.createElement('div', {\r\n            className: 'e-rte-linkcontent', id: this.rteID + '_linkContent'\r\n        });\r\n        var htmlTextbox = (this.parent.editorMode === 'HTML') ? '<label>' + linkTooltip +\r\n            '</label></div><div class=\"e-rte-field\">' +\r\n            '<input type=\"text\" data-role =\"none\" spellcheck=\"false\" placeholder = \"' + title + '\" class=\"e-input e-rte-linkTitle\"></div>' +\r\n            '<div class=\"e-rte-label\"></div>' + '<div class=\"e-rte-field\">' +\r\n            '<input type=\"checkbox\" class=\"e-rte-linkTarget\"  data-role =\"none\"></div>' : '';\r\n        var content = '<div class=\"e-rte-label\"><label>' + linkWebAddress + '</label></div>' + '<div class=\"e-rte-field\">' +\r\n            '<input type=\"text\" data-role =\"none\" spellcheck=\"false\" placeholder=\"' + urlPlace + '\" class=\"e-input e-rte-linkurl\"/></div>' +\r\n            '<div class=\"e-rte-label\">' + '<label>' + linkDisplayText + '</label></div><div class=\"e-rte-field\"> ' +\r\n            '<input type=\"text\" data-role =\"none\" spellcheck=\"false\" class=\"e-input e-rte-linkText\" placeholder=\"' + textPlace + '\">' +\r\n            '</div><div class=\"e-rte-label\">' + htmlTextbox;\r\n        var contentElem = parseHtml(content);\r\n        linkContent.appendChild(contentElem);\r\n        var linkTarget = linkContent.querySelector('.e-rte-linkTarget');\r\n        var linkUrl = linkContent.querySelector('.e-rte-linkurl');\r\n        var linkText = linkContent.querySelector('.e-rte-linkText');\r\n        var linkTitle = linkContent.querySelector('.e-rte-linkTitle');\r\n        var linkOpenLabel = this.i10n.getConstant('linkOpenInNewWindow');\r\n        this.checkBoxObj = new CheckBox({ label: linkOpenLabel, checked: true, enableRtl: this.parent.enableRtl });\r\n        this.checkBoxObj.createElement = this.parent.createElement;\r\n        this.checkBoxObj.appendTo(linkTarget);\r\n        selectText = (this.parent.editorMode === 'HTML') ? e.selection.getRange(this.parent.contentModule.getDocument()).toString() :\r\n            e.text;\r\n        var linkInsert = this.i10n.getConstant('dialogInsert');\r\n        var linkCancel = this.i10n.getConstant('dialogCancel');\r\n        var selection = e.selection;\r\n        var selectObj = { selfLink: this, selection: e.selection, selectParent: e.selectParent, args: e.args };\r\n        this.dialogObj = new Dialog({\r\n            header: this.i10n.getConstant('linkHeader'),\r\n            content: linkContent,\r\n            cssClass: CLS_RTE_ELEMENTS,\r\n            enableRtl: this.parent.enableRtl,\r\n            locale: this.parent.locale,\r\n            showCloseIcon: true, closeOnEscape: true, width: (Browser.isDevice) ? '290px' : '310px', height: 'initial',\r\n            isModal: Browser.isDevice,\r\n            buttons: [{\r\n                    click: this.insertlink.bind(selectObj),\r\n                    buttonModel: { content: linkInsert, cssClass: 'e-flat e-insertLink', isPrimary: true }\r\n                },\r\n                { click: function (e) { _this.cancelDialog(e); }, buttonModel: { cssClass: 'e-flat', content: linkCancel } }],\r\n            target: (Browser.isDevice) ? document.body : this.parent.element,\r\n            animationSettings: { effect: 'None' },\r\n            close: function (event) {\r\n                _this.parent.isBlur = false;\r\n                if (event && event.event.returnValue) {\r\n                    if (_this.parent.editorMode === 'HTML') {\r\n                        selection.restore();\r\n                    }\r\n                    else {\r\n                        _this.parent.formatter.editorManager.markdownSelection.restore(_this.parent.contentModule.getEditPanel());\r\n                    }\r\n                }\r\n                _this.dialogObj.destroy();\r\n                detach(_this.dialogObj.element);\r\n                _this.dialogObj = null;\r\n            },\r\n        });\r\n        this.dialogObj.createElement = this.parent.createElement;\r\n        this.dialogObj.appendTo(linkDialogEle);\r\n        linkDialogEle.style.maxHeight = 'initial';\r\n        if (!isNullOrUndefined(inputDetails)) {\r\n            linkUrl.value = inputDetails.url;\r\n            linkText.value = inputDetails.text;\r\n            linkTitle.value = inputDetails.title;\r\n            (inputDetails.target) ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;\r\n            this.dialogObj.header = inputDetails.header;\r\n            this.dialogObj.element.querySelector('.e-insertLink').textContent = inputDetails.btnText;\r\n        }\r\n        this.checkUrl(false);\r\n        if ((this.parent.editorMode === 'HTML' && ((!isNullOrUndefined(selectText) && selectText !== '') &&\r\n            (e.selection.range.startOffset === 0) || e.selection.range.startOffset !== e.selection.range.endOffset))\r\n            || e.module === 'Markdown') {\r\n            linkText.value = selectText;\r\n        }\r\n        EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\r\n        if (this.quickToolObj) {\r\n            this.hideLinkQuickToolbar();\r\n            if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {\r\n                this.quickToolObj.inlineQTBar.hidePopup();\r\n            }\r\n        }\r\n    };\r\n    Link.prototype.insertlink = function (e) {\r\n        var linkEle = this.selfLink.dialogObj.element;\r\n        var linkUrl = linkEle.querySelector('.e-rte-linkurl').value;\r\n        var linkText = linkEle.querySelector('.e-rte-linkText').value;\r\n        var linkTitle;\r\n        if (this.selfLink.parent.editorMode === 'HTML') {\r\n            linkTitle = linkEle.querySelector('.e-rte-linkTitle').value;\r\n        }\r\n        var target = (this.selfLink.checkBoxObj.checked) ? '_blank' : null;\r\n        if (linkUrl === '') {\r\n            this.selfLink.checkUrl(true);\r\n            return;\r\n        }\r\n        if (!this.selfLink.isUrl(linkUrl)) {\r\n            linkText = (linkText === '') ? linkUrl : linkText;\r\n            linkUrl = 'http://' + linkUrl;\r\n        }\r\n        else {\r\n            this.selfLink.checkUrl(false);\r\n        }\r\n        var proxy = this.selfLink;\r\n        if (proxy.parent.editorMode === 'HTML' && isNullOrUndefined(closest(this.selection.range.startContainer.parentNode, '#' + proxy.parent.contentModule.getPanel().id))) {\r\n            proxy.parent.contentModule.getEditPanel().focus();\r\n            var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());\r\n            this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.parent.contentModule.getDocument());\r\n            this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\r\n        }\r\n        var value = {\r\n            url: linkUrl, text: linkText, title: linkTitle, target: target,\r\n            selection: this.selection, selectParent: this.selectParent\r\n        };\r\n        if (proxy.parent.editorMode === 'HTML') {\r\n            this.selection.restore();\r\n        }\r\n        if (proxy.parent.formatter.getUndoRedoStack().length === 0) {\r\n            proxy.parent.formatter.saveData();\r\n        }\r\n        this.selfLink.parent.formatter.process(this.selfLink.parent, this.args, this.args.originalEvent, value);\r\n        if (document.body.contains(proxy.dialogObj.element)) {\r\n            this.selfLink.dialogObj.hide({ returnValue: false });\r\n        }\r\n        this.selfLink.parent.contentModule.getEditPanel().focus();\r\n    };\r\n    Link.prototype.isUrl = function (url) {\r\n        var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/gi;\r\n        return regexp.test(url);\r\n    };\r\n    Link.prototype.checkUrl = function (e) {\r\n        var linkEle = this.dialogObj.element;\r\n        var linkUrl = linkEle.querySelector('.e-rte-linkurl');\r\n        if (e) {\r\n            addClass([linkUrl], 'e-error');\r\n            linkUrl.setSelectionRange(0, linkUrl.value.length);\r\n            linkUrl.focus();\r\n        }\r\n        else {\r\n            removeClass([linkUrl], 'e-error');\r\n        }\r\n    };\r\n    Link.prototype.removeLink = function (e) {\r\n        if (this.parent.formatter.getUndoRedoStack().length === 0) {\r\n            this.parent.formatter.saveData();\r\n        }\r\n        this.parent.formatter.process(this.parent, e.args, e.args, {\r\n            selectNode: e.selectNode, selectParent: e.selectParent, selection: e.selection,\r\n            subCommand: e.args.item.subCommand\r\n        });\r\n        this.contentModule.getEditPanel().focus();\r\n        this.hideLinkQuickToolbar();\r\n    };\r\n    Link.prototype.openLink = function (e) {\r\n        if (e.selectParent[0].classList.contains('e-rte-anchor') || e.selectParent[0].tagName === 'A') {\r\n            this.parent.formatter.process(this.parent, e.args, e.args, {\r\n                url: e.selectParent[0].href,\r\n                target: e.selectParent[0].target === '' ? '_self' : '_blank', selectNode: e.selectNode,\r\n                subCommand: e.args.item.subCommand\r\n            });\r\n        }\r\n    };\r\n    Link.prototype.editLink = function (e) {\r\n        if (e.selectParent[0].classList.contains('e-rte-anchor') || e.selectParent[0].tagName === 'A') {\r\n            var selectParentEle = e.selectParent[0];\r\n            var linkUpdate = this.i10n.getConstant('dialogUpdate');\r\n            var inputDetails = {\r\n                url: selectParentEle.href, text: selectParentEle.innerHTML,\r\n                title: selectParentEle.title, target: selectParentEle.target,\r\n                header: this.i10n.getConstant('editLink'), btnText: linkUpdate\r\n            };\r\n            this.linkDialog(e, inputDetails);\r\n        }\r\n    };\r\n    Link.prototype.cancelDialog = function (e) {\r\n        this.parent.isBlur = false;\r\n        this.dialogObj.hide({ returnValue: true });\r\n        this.parent.contentModule.getEditPanel().focus();\r\n    };\r\n    Link.prototype.onDocumentClick = function (e) {\r\n        var target = e.target;\r\n        if (!isNullOrUndefined(this.dialogObj) && ((!closest(target, '#' + this.dialogObj.element.id) && this.parent.toolbarSettings.enable &&\r\n            this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target)) ||\r\n            (this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) &&\r\n                !closest(target, '#' + this.parent.getID() + '_toolbar_CreateLink') &&\r\n                !target.querySelector('#' + this.parent.getID() + '_toolbar_CreateLink')))) {\r\n            this.dialogObj.hide({ returnValue: true });\r\n            this.parent.isBlur = true;\r\n            dispatchEvent(this.parent.element, 'focusout');\r\n        }\r\n    };\r\n    /**\r\n     * Destroys the ToolBar.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    Link.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    /**\r\n     * For internal use only - Get the module name.\r\n     */\r\n    Link.prototype.getModuleName = function () {\r\n        return 'link';\r\n    };\r\n    return Link;\r\n}());\r\nexport { Link };\r\n",null]}