{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\color-picker.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\color-picker.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { select, detach, extend } from '@syncfusion/ej2-base';\r\nimport { RenderType } from '../base/enum';\r\nimport * as events from '../base/constant';\r\nimport * as classes from '../base/classes';\r\nimport { getIndex, toObjectLowerCase } from '../base/util';\r\nimport { templateItems, tools } from '../models/items';\r\n/**\r\n * `Color Picker` module is used to handle ColorPicker actions.\r\n */\r\nvar ColorPickerInput = /*@__PURE__*/ (function () {\r\n    function ColorPickerInput(parent, serviceLocator) {\r\n        this.tools = {};\r\n        this.parent = parent;\r\n        this.locator = serviceLocator;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        this.addEventListener();\r\n        if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {\r\n            extend(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);\r\n        }\r\n        else {\r\n            this.tools = tools;\r\n        }\r\n    }\r\n    ColorPickerInput.prototype.initializeInstance = function () {\r\n        this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);\r\n    };\r\n    ColorPickerInput.prototype.renderColorPickerInput = function (args) {\r\n        var _this = this;\r\n        this.initializeInstance();\r\n        var suffixID = args.containerType;\r\n        var tbElement = args.container;\r\n        templateItems.forEach(function (item) {\r\n            if (getIndex(item, args.items) !== -1) {\r\n                switch (item) {\r\n                    case 'fontcolor':\r\n                        var targetID = _this.parent.getID() + '_' + suffixID + '_FontColor_Target';\r\n                        var fontNode = _this.parent.createElement('input');\r\n                        fontNode.id = targetID;\r\n                        fontNode.classList.add(classes.CLS_FONT_COLOR_TARGET);\r\n                        document.body.appendChild(fontNode);\r\n                        var args_1 = {\r\n                            cssClass: _this.tools[item.toLocaleLowerCase()].icon\r\n                                + ' ' + classes.CLS_RTE_ELEMENTS + ' ' + classes.CLS_ICONS,\r\n                            value: _this.tools[item.toLocaleLowerCase()].value,\r\n                            command: _this.tools[item.toLocaleLowerCase()].command,\r\n                            subCommand: _this.tools[item.toLocaleLowerCase()].subCommand,\r\n                            element: select('#' + _this.parent.getID() + '_' + suffixID + '_FontColor', tbElement),\r\n                            target: ('#' + targetID)\r\n                        };\r\n                        _this.fontColorPicker = _this.toolbarRenderer.renderColorPicker(args_1, 'fontcolor');\r\n                        _this.fontColorDropDown = _this.toolbarRenderer.renderColorPickerDropDown(args_1, 'fontcolor', _this.fontColorPicker);\r\n                        break;\r\n                    case 'backgroundcolor':\r\n                        targetID = _this.parent.getID() + '_' + suffixID + '_BackgroundColor_Target';\r\n                        var backNode = _this.parent.createElement('input');\r\n                        backNode.id = targetID;\r\n                        backNode.classList.add(classes.CLS_BACKGROUND_COLOR_TARGET);\r\n                        document.body.appendChild(backNode);\r\n                        args_1 = {\r\n                            cssClass: _this.tools[item.toLocaleLowerCase()].icon\r\n                                + ' ' + classes.CLS_RTE_ELEMENTS + ' ' + classes.CLS_ICONS,\r\n                            value: _this.tools[item.toLocaleLowerCase()].value,\r\n                            command: _this.tools[item.toLocaleLowerCase()].command,\r\n                            subCommand: _this.tools[item.toLocaleLowerCase()].subCommand,\r\n                            element: select('#' + _this.parent.getID() + '_' + suffixID + '_BackgroundColor', tbElement),\r\n                            target: ('#' + targetID)\r\n                        };\r\n                        _this.backgroundColorPicker = _this.toolbarRenderer.renderColorPicker(args_1, 'backgroundcolor');\r\n                        _this.backgroundColorDropDown = _this.toolbarRenderer.renderColorPickerDropDown(args_1, 'backgroundcolor', _this.backgroundColorPicker);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ColorPickerInput.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n        this.destroyColorPicker();\r\n    };\r\n    ColorPickerInput.prototype.destroyColorPicker = function () {\r\n        if (this.fontColorPicker && !this.fontColorPicker.isDestroyed) {\r\n            this.fontColorPicker.destroy();\r\n        }\r\n        if (this.backgroundColorPicker && !this.backgroundColorPicker.isDestroyed) {\r\n            this.backgroundColorPicker.destroy();\r\n        }\r\n        if (this.fontColorDropDown && !this.fontColorDropDown.isDestroyed) {\r\n            var innerEle = this.fontColorDropDown.element.querySelector('.e-rte-color-content');\r\n            if (innerEle) {\r\n                detach(innerEle);\r\n            }\r\n            this.fontColorDropDown.destroy();\r\n        }\r\n        if (this.backgroundColorDropDown && !this.backgroundColorDropDown.isDestroyed) {\r\n            var innerEle = this.backgroundColorDropDown.element.querySelector('.e-rte-color-content');\r\n            if (innerEle) {\r\n                detach(innerEle);\r\n            }\r\n            this.backgroundColorDropDown.destroy();\r\n        }\r\n    };\r\n    ColorPickerInput.prototype.setRtl = function (args) {\r\n        if (this.fontColorPicker) {\r\n            this.fontColorPicker.setProperties({ enableRtl: args.enableRtl });\r\n            this.fontColorDropDown.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n        if (this.backgroundColorPicker) {\r\n            this.backgroundColorPicker.setProperties({ enableRtl: args.enableRtl });\r\n            this.backgroundColorDropDown.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n    };\r\n    ColorPickerInput.prototype.addEventListener = function () {\r\n        this.parent.on(events.toolbarRenderComplete, this.renderColorPickerInput, this);\r\n        this.parent.on(events.rtlMode, this.setRtl, this);\r\n        this.parent.on(events.destroy, this.destroy, this);\r\n        this.parent.on(events.destroyColorPicker, this.destroyColorPicker, this);\r\n        this.parent.on(events.modelChanged, this.onPropertyChanged, this);\r\n    };\r\n    ColorPickerInput.prototype.onPropertyChanged = function (model) {\r\n        var newProp = model.newProp;\r\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\r\n            var prop = _a[_i];\r\n            switch (prop) {\r\n                case 'fontColor':\r\n                    if (this.fontColorPicker) {\r\n                        for (var _b = 0, _c = Object.keys(newProp.fontColor); _b < _c.length; _b++) {\r\n                            var font = _c[_b];\r\n                            switch (font) {\r\n                                case 'default':\r\n                                    this.fontColorPicker.setProperties({ value: newProp.fontColor.default });\r\n                                    var element = this.fontColorDropDown.element;\r\n                                    var fontBorder = element.querySelector('.' + this.tools['fontcolor'].icon);\r\n                                    fontBorder.style.borderBottomColor = newProp.fontColor.default;\r\n                                    break;\r\n                                case 'mode':\r\n                                    this.fontColorPicker.setProperties({ mode: newProp.fontColor.mode });\r\n                                    break;\r\n                                case 'columns':\r\n                                    this.fontColorPicker.setProperties({ columns: newProp.fontColor.columns });\r\n                                    break;\r\n                                case 'colorCode':\r\n                                    this.fontColorPicker.setProperties({ presetColors: newProp.fontColor.colorCode });\r\n                                    break;\r\n                                case 'modeSwitcher':\r\n                                    this.fontColorPicker.setProperties({ modeSwitcher: newProp.fontColor.modeSwitcher });\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'backgroundColor':\r\n                    if (this.backgroundColorPicker) {\r\n                        for (var _d = 0, _e = Object.keys(newProp.backgroundColor); _d < _e.length; _d++) {\r\n                            var background = _e[_d];\r\n                            switch (background) {\r\n                                case 'default':\r\n                                    this.backgroundColorPicker.setProperties({ value: newProp.backgroundColor.default });\r\n                                    var element = this.backgroundColorDropDown.element;\r\n                                    var backgroundBorder = element.querySelector('.' + this.tools['backgroundcolor'].icon);\r\n                                    backgroundBorder.style.borderBottomColor = newProp.backgroundColor.default;\r\n                                    break;\r\n                                case 'mode':\r\n                                    this.backgroundColorPicker.setProperties({ mode: newProp.backgroundColor.mode });\r\n                                    break;\r\n                                case 'columns':\r\n                                    this.backgroundColorPicker.setProperties({ columns: newProp.backgroundColor.columns });\r\n                                    break;\r\n                                case 'colorCode':\r\n                                    this.backgroundColorPicker.setProperties({ presetColors: newProp.backgroundColor.colorCode });\r\n                                    break;\r\n                                case 'modeSwitcher':\r\n                                    this.backgroundColorPicker.setProperties({ modeSwitcher: newProp.backgroundColor.modeSwitcher });\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    ColorPickerInput.prototype.removeEventListener = function () {\r\n        this.parent.off(events.toolbarRenderComplete, this.renderColorPickerInput);\r\n        this.parent.off(events.destroy, this.destroy);\r\n        this.parent.off(events.rtlMode, this.setRtl);\r\n        this.parent.off(events.destroyColorPicker, this.destroyColorPicker);\r\n        this.parent.off(events.modelChanged, this.onPropertyChanged);\r\n    };\r\n    return ColorPickerInput;\r\n}());\r\nexport { ColorPickerInput };\r\n",null]}