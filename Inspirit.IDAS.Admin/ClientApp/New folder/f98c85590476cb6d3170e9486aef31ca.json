{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\nodecutter.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\nodecutter.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { NodeSelection } from './../../selection/index';\r\nimport { InsertMethods } from './insert-methods';\r\n/**\r\n * Split the Node based on selection\r\n * @hidden\r\n */\r\nvar NodeCutter = /*@__PURE__*/ (function () {\r\n    function NodeCutter() {\r\n        this.position = -1;\r\n        this.nodeSelection = new NodeSelection();\r\n    }\r\n    // Split Selection Node\r\n    NodeCutter.prototype.GetSpliceNode = function (range, node) {\r\n        node = this.SplitNode(range, node, true);\r\n        node = this.SplitNode(range, node, false);\r\n        return node;\r\n    };\r\n    NodeCutter.prototype.SplitNode = function (range, node, isCollapsed) {\r\n        if (node) {\r\n            var clone = range.cloneRange();\r\n            var parent_1 = node.parentNode;\r\n            var index = this.nodeSelection.getIndex(node);\r\n            clone.collapse(isCollapsed);\r\n            (isCollapsed) ? clone.setStartBefore(node) : clone.setEndAfter(node);\r\n            var fragment = clone.extractContents();\r\n            if (isCollapsed) {\r\n                node = parent_1.childNodes[index];\r\n                fragment = this.spliceEmptyNode(fragment, false);\r\n                if (fragment && fragment.textContent !== '') {\r\n                    if (node) {\r\n                        InsertMethods.AppendBefore(fragment, node);\r\n                    }\r\n                    else {\r\n                        parent_1.appendChild(fragment);\r\n                        var divNode = document.createElement('div');\r\n                        divNode.innerHTML = '&#65279;&#65279;';\r\n                        node = divNode.firstChild;\r\n                        parent_1.appendChild(node);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                node = parent_1.childNodes.length > 1 ? parent_1.childNodes[index] :\r\n                    parent_1.childNodes[0];\r\n                fragment = this.spliceEmptyNode(fragment, true);\r\n                if (fragment && fragment.textContent !== '') {\r\n                    if (node) {\r\n                        InsertMethods.AppendBefore(fragment, node, true);\r\n                    }\r\n                    else {\r\n                        parent_1.appendChild(fragment);\r\n                        var divNode = document.createElement('div');\r\n                        divNode.innerHTML = '&#65279;&#65279;';\r\n                        parent_1.insertBefore(divNode.firstChild, parent_1.firstChild);\r\n                        node = parent_1.firstChild;\r\n                    }\r\n                }\r\n            }\r\n            return node;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    NodeCutter.prototype.spliceEmptyNode = function (fragment, isStart) {\r\n        var len = fragment.childNodes.length - 1;\r\n        if (len > -1 && !isStart) {\r\n            this.spliceEmptyNode(fragment.childNodes[len], isStart);\r\n        }\r\n        else if (len > -1) {\r\n            this.spliceEmptyNode(fragment.childNodes[0], isStart);\r\n        }\r\n        else if (fragment.nodeType !== 3 && fragment.nodeType !== 11) {\r\n            fragment.parentNode.removeChild(fragment);\r\n        }\r\n        return fragment;\r\n    };\r\n    // Cursor Position split\r\n    NodeCutter.prototype.GetCursorStart = function (indexes, index, isStart) {\r\n        indexes = (isStart) ? indexes : indexes.reverse();\r\n        var position = indexes[0];\r\n        for (var num = 0; num < indexes.length && ((isStart) ? (indexes[num] < index) : (indexes[num] >= index)); num++) {\r\n            position = indexes[num];\r\n        }\r\n        return position;\r\n    };\r\n    NodeCutter.prototype.GetCursorRange = function (docElement, range, node) {\r\n        var cursorRange = docElement.createRange();\r\n        var indexes = [];\r\n        indexes.push(0);\r\n        var str = this.TrimLineBreak(node.data);\r\n        var index = str.indexOf(' ', 0);\r\n        while (index !== -1) {\r\n            if (indexes.indexOf(index) < 0) {\r\n                indexes.push(index);\r\n            }\r\n            if (new RegExp('\\\\s').test(str[index - 1]) && (indexes.indexOf(index - 1) < 0)) {\r\n                indexes.push(index - 1);\r\n            }\r\n            if (new RegExp('\\\\s').test(str[index + 1])) {\r\n                indexes.push(index + 1);\r\n            }\r\n            index = str.indexOf(' ', (index + 1));\r\n        }\r\n        indexes.push(str.length);\r\n        if ((indexes.indexOf(range.startOffset) >= 0)\r\n            || ((indexes.indexOf(range.startOffset - 1) >= 0) && (range.startOffset !== 1\r\n                || (range.startOffset === 1 && new RegExp('\\\\s').test(str[0])))\r\n                || ((indexes[indexes.length - 1] - 1) === range.startOffset))) {\r\n            cursorRange = range;\r\n            this.position = 1;\r\n        }\r\n        else {\r\n            var startOffset = this.GetCursorStart(indexes, range.startOffset, true);\r\n            this.position = range.startOffset - startOffset;\r\n            cursorRange.setStart(range.startContainer, startOffset);\r\n            cursorRange.setEnd(range.startContainer, this.GetCursorStart(indexes, range.startOffset, false));\r\n        }\r\n        return cursorRange;\r\n    };\r\n    NodeCutter.prototype.GetCursorNode = function (docElement, range, node) {\r\n        return this.GetSpliceNode(this.GetCursorRange(docElement, range, node), node);\r\n    };\r\n    NodeCutter.prototype.TrimLineBreak = function (line) {\r\n        return line.replace(/(\\r\\n\\t|\\n|\\r\\t)/gm, ' ');\r\n    };\r\n    return NodeCutter;\r\n}());\r\nexport { NodeCutter };\r\n",null]}