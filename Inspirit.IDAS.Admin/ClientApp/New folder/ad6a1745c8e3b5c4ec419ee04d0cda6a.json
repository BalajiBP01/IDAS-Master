{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\undo.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\undo.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { debounce, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport * as EVENTS from './../../common/constant';\r\n/**\r\n * `Undo` module is used to handle undo actions.\r\n */\r\nvar UndoRedoCommands = /*@__PURE__*/ (function () {\r\n    function UndoRedoCommands(parent, options) {\r\n        this.undoRedoStack = [];\r\n        this.parent = parent;\r\n        this.undoRedoSteps = !isNullOrUndefined(options) ? options.undoRedoSteps : 30;\r\n        this.undoRedoTimer = !isNullOrUndefined(options) ? options.undoRedoTimer : 300;\r\n        this.selection = this.parent.markdownSelection;\r\n        this.addEventListener();\r\n    }\r\n    UndoRedoCommands.prototype.addEventListener = function () {\r\n        var debounceListener = debounce(this.keyUp, this.undoRedoTimer);\r\n        this.parent.observer.on(EVENTS.KEY_UP_HANDLER, debounceListener, this);\r\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.keyDown, this);\r\n        this.parent.observer.on(EVENTS.ACTION, this.onAction, this);\r\n        this.parent.observer.on(EVENTS.MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);\r\n    };\r\n    UndoRedoCommands.prototype.onPropertyChanged = function (props) {\r\n        for (var _i = 0, _a = Object.keys(props.newProp); _i < _a.length; _i++) {\r\n            var prop = _a[_i];\r\n            switch (prop) {\r\n                case 'undoRedoSteps':\r\n                    this.undoRedoSteps = props.newProp.undoRedoSteps;\r\n                    break;\r\n                case 'undoRedoTimer':\r\n                    this.undoRedoTimer = props.newProp.undoRedoTimer;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    UndoRedoCommands.prototype.removeEventListener = function () {\r\n        var debounceListener = debounce(this.keyUp, 300);\r\n        this.parent.observer.off(EVENTS.KEY_UP_HANDLER, debounceListener);\r\n        this.parent.observer.off(EVENTS.KEY_DOWN_HANDLER, this.keyDown);\r\n        this.parent.observer.off(EVENTS.ACTION, this.onAction);\r\n        this.parent.observer.off(EVENTS.MODEL_CHANGED_PLUGIN, this.onPropertyChanged);\r\n    };\r\n    /**\r\n     * Destroys the ToolBar.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    UndoRedoCommands.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    UndoRedoCommands.prototype.onAction = function (e) {\r\n        if (e.subCommand === 'Undo') {\r\n            this.undo(e);\r\n        }\r\n        else {\r\n            this.redo(e);\r\n        }\r\n    };\r\n    UndoRedoCommands.prototype.keyDown = function (e) {\r\n        var event = e.event;\r\n        var proxy = this;\r\n        switch (event.action) {\r\n            case 'undo':\r\n                event.preventDefault();\r\n                proxy.undo(e);\r\n                break;\r\n            case 'redo':\r\n                event.preventDefault();\r\n                proxy.redo(e);\r\n                break;\r\n        }\r\n    };\r\n    UndoRedoCommands.prototype.keyUp = function (e) {\r\n        if (e.event.keyCode !== 17 && !e.event.ctrlKey) {\r\n            this.saveData(e);\r\n        }\r\n    };\r\n    /**\r\n     * MD collection stored string format.\r\n     * @method saveData\r\n     * @return {void}\r\n     */\r\n    UndoRedoCommands.prototype.saveData = function (e) {\r\n        var textArea = this.parent.element;\r\n        this.selection.save(textArea.selectionStart, textArea.selectionEnd);\r\n        var start = textArea.selectionStart;\r\n        var end = textArea.selectionEnd;\r\n        var textValue = this.parent.element.value;\r\n        var changEle = { text: textValue, start: start, end: end };\r\n        if (this.undoRedoStack.length >= this.steps) {\r\n            this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1);\r\n        }\r\n        if (this.undoRedoStack.length > 1 && (this.undoRedoStack[this.undoRedoStack.length - 1].start === start) &&\r\n            (this.undoRedoStack[this.undoRedoStack.length - 1].end === end)) {\r\n            return;\r\n        }\r\n        this.undoRedoStack.push(changEle);\r\n        this.steps = this.undoRedoStack.length - 1;\r\n        if (this.steps > this.undoRedoSteps) {\r\n            this.undoRedoStack.shift();\r\n            this.steps--;\r\n        }\r\n        if (e && e.callBack) {\r\n            e.callBack();\r\n        }\r\n    };\r\n    /**\r\n     * Undo the editable text.\r\n     * @method undo\r\n     * @return {void}\r\n     */\r\n    UndoRedoCommands.prototype.undo = function (e) {\r\n        if (this.steps > 0) {\r\n            this.currentAction = 'Undo';\r\n            var start = this.undoRedoStack[this.steps - 1].start;\r\n            var end = this.undoRedoStack[this.steps - 1].end;\r\n            var removedContent = this.undoRedoStack[this.steps - 1].text;\r\n            this.parent.element.value = removedContent;\r\n            this.parent.element.focus();\r\n            this.steps--;\r\n            this.restore(this.parent.element, start, end, e);\r\n        }\r\n    };\r\n    /**\r\n     * Redo the editable text.\r\n     * @method redo\r\n     * @return {void}\r\n     */\r\n    UndoRedoCommands.prototype.redo = function (e) {\r\n        if (this.undoRedoStack[this.steps + 1] != null) {\r\n            this.currentAction = 'Redo';\r\n            var start = this.undoRedoStack[this.steps + 1].start;\r\n            var end = this.undoRedoStack[this.steps + 1].end;\r\n            this.parent.element.value = this.undoRedoStack[this.steps + 1].text;\r\n            this.parent.element.focus();\r\n            this.steps++;\r\n            this.restore(this.parent.element, start, end, e);\r\n        }\r\n    };\r\n    UndoRedoCommands.prototype.restore = function (textArea, start, end, event) {\r\n        this.selection.save(start, end);\r\n        this.selection.restore(textArea);\r\n        if (event && event.callBack) {\r\n            event.callBack({\r\n                requestType: this.currentAction,\r\n                selectedText: this.selection.getSelectedText(textArea),\r\n                editorMode: 'Markdown',\r\n                event: event.event\r\n            });\r\n        }\r\n    };\r\n    UndoRedoCommands.prototype.getUndoStatus = function () {\r\n        var status = { undo: false, redo: false };\r\n        if (this.steps > 0) {\r\n            status.undo = true;\r\n        }\r\n        if (this.undoRedoStack[this.steps + 1] != null) {\r\n            status.redo = true;\r\n        }\r\n        return status;\r\n    };\r\n    return UndoRedoCommands;\r\n}());\r\nexport { UndoRedoCommands };\r\n",null]}