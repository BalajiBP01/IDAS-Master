{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\markdown-renderer.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\markdown-renderer.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["/**\r\n * Markdown module is used to render RichTextEditor as Markdown editor content\r\n * @hidden\r\n */\r\nvar MarkdownRender = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for content renderer module\r\n     */\r\n    function MarkdownRender(parent) {\r\n        this.parent = parent;\r\n        this.rteID = this.parent.element.id;\r\n    }\r\n    /**\r\n     * The function is used to render RichTextEditor content div\r\n     */\r\n    MarkdownRender.prototype.renderPanel = function () {\r\n        var rteObj = this.parent;\r\n        var div = this.parent.createElement('div', { id: this.rteID + '_view', className: 'e-rte-content' });\r\n        this.editableElement = this.parent.createElement('textarea', {\r\n            className: 'e-content',\r\n            id: this.rteID + '_editable-content'\r\n        });\r\n        div.appendChild(this.editableElement);\r\n        this.setPanel(div);\r\n        rteObj.element.appendChild(div);\r\n    };\r\n    /**\r\n     * Get the content div element of RichTextEditor\r\n     * @return {Element}\r\n     */\r\n    MarkdownRender.prototype.getPanel = function () {\r\n        return this.contentPanel;\r\n    };\r\n    /**\r\n     * Get the editable element of RichTextEditor\r\n     * @return {Element}\r\n     */\r\n    MarkdownRender.prototype.getEditPanel = function () {\r\n        return this.editableElement;\r\n    };\r\n    /**\r\n     * Returns the text content as string.\r\n     * @return {string}\r\n     */\r\n    MarkdownRender.prototype.getText = function () {\r\n        return this.getEditPanel().value;\r\n    };\r\n    /**\r\n     * Set the content div element of RichTextEditor\r\n     * @param  {Element} panel\r\n     */\r\n    MarkdownRender.prototype.setPanel = function (panel) {\r\n        this.contentPanel = panel;\r\n    };\r\n    /**\r\n     * Get the document of RichTextEditor\r\n     * @param  {Document}\r\n     */\r\n    MarkdownRender.prototype.getDocument = function () {\r\n        return this.getEditPanel().ownerDocument;\r\n    };\r\n    return MarkdownRender;\r\n}());\r\nexport { MarkdownRender };\r\n",null]}