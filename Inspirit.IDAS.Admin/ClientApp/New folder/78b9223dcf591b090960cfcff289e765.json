{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\image-module.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\image-module.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { addClass, detach, EventHandler, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { Browser, closest, removeClass } from '@syncfusion/ej2-base';\r\nimport * as events from '../base/constant';\r\nimport * as classes from '../base/classes';\r\nimport { Uploader, NumericTextBox } from '@syncfusion/ej2-inputs';\r\nimport { Dialog } from '@syncfusion/ej2-popups';\r\nimport { Button, CheckBox } from '@syncfusion/ej2-buttons';\r\nimport { RenderType } from '../base/enum';\r\nimport { dispatchEvent, parseHtml } from '../base/util';\r\n/**\r\n * `Image` module is used to handle image actions.\r\n */\r\nvar Image = /*@__PURE__*/ (function () {\r\n    function Image(parent, serviceLocator) {\r\n        this.pageX = null;\r\n        this.pageY = null;\r\n        this.parent = parent;\r\n        this.rteID = parent.element.id;\r\n        this.i10n = serviceLocator.getService('rteLocale');\r\n        this.rendererFactory = serviceLocator.getService('rendererFactory');\r\n        this.addEventListener();\r\n    }\r\n    Image.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.on(events.keyDown, this.onKeyDown, this);\r\n        this.parent.on(events.insertImage, this.insertImage, this);\r\n        this.parent.on(events.insertCompleted, this.showImageQuickToolbar, this);\r\n        this.parent.on(events.imageToolbarAction, this.onToolbarAction, this);\r\n        this.parent.on(events.imageCaption, this.caption, this);\r\n        this.parent.on(events.imageDelete, this.deleteImg, this);\r\n        this.parent.on(events.imageLink, this.insertImgLink, this);\r\n        this.parent.on(events.imageAlt, this.insertAltText, this);\r\n        this.parent.on(events.editAreaClick, this.editAreaClickHandler, this);\r\n        this.parent.on(events.iframeMouseDown, this.onIframeMouseDown, this);\r\n        this.parent.on(events.imageSize, this.imageSize, this);\r\n        this.parent.on(events.dropDownSelect, this.alignmentSelect, this);\r\n        this.parent.on(events.initialEnd, this.afterRender, this);\r\n        this.parent.on(events.paste, this.imagePaste, this);\r\n    };\r\n    Image.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.keyDown, this.onKeyDown);\r\n        this.parent.off(events.insertImage, this.insertImage);\r\n        this.parent.off(events.insertCompleted, this.showImageQuickToolbar);\r\n        this.parent.off(events.imageCaption, this.caption);\r\n        this.parent.off(events.imageToolbarAction, this.onToolbarAction);\r\n        this.parent.off(events.imageDelete, this.deleteImg);\r\n        this.parent.off(events.imageLink, this.insertImgLink);\r\n        this.parent.off(events.imageAlt, this.insertAltText);\r\n        this.parent.off(events.editAreaClick, this.editAreaClickHandler);\r\n        this.parent.off(events.iframeMouseDown, this.onIframeMouseDown);\r\n        this.parent.off(events.imageSize, this.imageSize);\r\n        this.parent.off(events.dropDownSelect, this.alignmentSelect);\r\n        this.parent.off(events.initialEnd, this.afterRender);\r\n        this.parent.off(events.paste, this.imagePaste);\r\n        if (!isNullOrUndefined(this.contentModule)) {\r\n            EventHandler.remove(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.imageClick);\r\n            this.parent.formatter.editorManager.observer.off(events.checkUndo, this.undoStack);\r\n            if (this.parent.insertImageSettings.resize) {\r\n                EventHandler.remove(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart);\r\n                EventHandler.remove(this.contentModule.getDocument(), 'mousedown', this.onDocumentClick);\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.onIframeMouseDown = function () {\r\n        if (this.dialogObj) {\r\n            this.dialogObj.hide({ returnValue: true });\r\n        }\r\n    };\r\n    Image.prototype.afterRender = function () {\r\n        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\r\n        EventHandler.add(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.imageClick, this);\r\n        if (this.parent.insertImageSettings.resize) {\r\n            EventHandler.add(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);\r\n            EventHandler.add(this.contentModule.getDocument(), 'mousedown', this.onDocumentClick, this);\r\n        }\r\n    };\r\n    Image.prototype.undoStack = function (args) {\r\n        if (args.subCommand.toLowerCase() === 'undo' || args.subCommand.toLowerCase() === 'redo') {\r\n            for (var i = 0; i < this.parent.formatter.getUndoRedoStack().length; i++) {\r\n                var temp = this.parent.createElement('div');\r\n                var contentElem = parseHtml(this.parent.formatter.getUndoRedoStack()[i].text);\r\n                temp.appendChild(contentElem);\r\n                var img = temp.querySelectorAll('img');\r\n                if (temp.querySelector('.e-img-resize') && img.length > 0) {\r\n                    for (var j = 0; j < img.length; j++) {\r\n                        img[j].style.outline = '';\r\n                    }\r\n                    detach(temp.querySelector('.e-img-resize'));\r\n                    this.parent.formatter.getUndoRedoStack()[i].text = temp.innerHTML;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.resizeEnd = function (e) {\r\n        this.resizeBtnInit();\r\n        this.imgEle.parentElement.style.cursor = 'auto';\r\n        if (Browser.isDevice) {\r\n            removeClass([e.target.parentElement], 'e-mob-span');\r\n        }\r\n        var args = { event: e, requestType: 'images' };\r\n        this.parent.trigger(events.resizeStop, args);\r\n        var pageX = this.getPointX(e);\r\n        var pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset +\r\n            this.parent.element.getBoundingClientRect().top + e.clientY : e.pageY;\r\n        this.parent.formatter.editorManager.observer.on(events.checkUndo, this.undoStack, this);\r\n        this.parent.formatter.saveData();\r\n    };\r\n    Image.prototype.resizeStart = function (e) {\r\n        if (e.target.tagName === 'IMG') {\r\n            this.parent.preventDefaultResize(e);\r\n            var img = e.target;\r\n            if (this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {\r\n                detach(this.imgResizeDiv);\r\n            }\r\n            this.imageResize(img);\r\n        }\r\n        if (e.target.classList.contains('e-rte-imageboxmark')) {\r\n            if (this.parent.formatter.getUndoRedoStack().length === 0) {\r\n                this.parent.formatter.saveData();\r\n            }\r\n            this.pageX = this.getPointX(e);\r\n            this.pageY = this.getPointY(e);\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            this.resizeBtnInit();\r\n            if (this.quickToolObj) {\r\n                this.quickToolObj.imageQTBar.hidePopup();\r\n            }\r\n            if (e.target.classList.contains('e-rte-topLeft')) {\r\n                this.resizeBtnStat.topLeft = true;\r\n            }\r\n            if (e.target.classList.contains('e-rte-topRight')) {\r\n                this.resizeBtnStat.topRight = true;\r\n            }\r\n            if (e.target.classList.contains('e-rte-botLeft')) {\r\n                this.resizeBtnStat.botLeft = true;\r\n            }\r\n            if (e.target.classList.contains('e-rte-botRight')) {\r\n                this.resizeBtnStat.botRight = true;\r\n            }\r\n            if (Browser.isDevice && this.contentModule.getEditPanel().contains(this.imgResizeDiv) &&\r\n                !this.imgResizeDiv.classList.contains('e-mob-span')) {\r\n                addClass([this.imgResizeDiv], 'e-mob-span');\r\n            }\r\n            else {\r\n                var args = { event: e, requestType: 'images' };\r\n                this.parent.trigger(events.resizeStart, args);\r\n                if (args.cancel) {\r\n                    this.cancelResizeAction();\r\n                    return;\r\n                }\r\n            }\r\n            EventHandler.add(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);\r\n        }\r\n    };\r\n    Image.prototype.imageClick = function (e) {\r\n        if (Browser.isDevice) {\r\n            if ((e.target.tagName === 'IMG' &&\r\n                e.target.parentElement.tagName === 'A') ||\r\n                (e.target.tagName === 'IMG')) {\r\n                this.contentModule.getEditPanel().setAttribute('contenteditable', 'false');\r\n                e.target.focus();\r\n            }\r\n            else {\r\n                this.contentModule.getEditPanel().setAttribute('contenteditable', 'true');\r\n            }\r\n        }\r\n        if (e.target.tagName === 'A' ||\r\n            e.target.parentElement.tagName === 'A') {\r\n            e.preventDefault();\r\n        }\r\n    };\r\n    Image.prototype.imageResize = function (e) {\r\n        this.resizeBtnInit();\r\n        this.imgEle = e;\r\n        addClass([this.imgEle], 'e-resize');\r\n        this.imgResizeDiv = this.parent.createElement('span', { className: 'e-img-resize', id: this.rteID + '_imgResize' });\r\n        this.imgResizeDiv.appendChild(this.parent.createElement('span', {\r\n            className: 'e-rte-imageboxmark e-rte-topLeft', styles: 'cursor: nwse-resize'\r\n        }));\r\n        this.imgResizeDiv.appendChild(this.parent.createElement('span', {\r\n            className: 'e-rte-imageboxmark e-rte-topRight', styles: 'cursor: nesw-resize'\r\n        }));\r\n        this.imgResizeDiv.appendChild(this.parent.createElement('span', {\r\n            className: 'e-rte-imageboxmark e-rte-botLeft', styles: 'cursor: nesw-resize'\r\n        }));\r\n        this.imgResizeDiv.appendChild(this.parent.createElement('span', {\r\n            className: 'e-rte-imageboxmark e-rte-botRight', styles: 'cursor: nwse-resize'\r\n        }));\r\n        if (Browser.isDevice) {\r\n            addClass([this.imgResizeDiv], 'e-mob-rte');\r\n        }\r\n        e.style.outline = '2px solid #4a90e2';\r\n        this.imgResizePos(e, this.imgResizeDiv);\r\n        this.resizeImgDupPos(e);\r\n        this.contentModule.getEditPanel().appendChild(this.imgResizeDiv);\r\n        EventHandler.add(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing, this);\r\n    };\r\n    Image.prototype.getPointX = function (e) {\r\n        if (e.touches && e.touches.length) {\r\n            return e.touches[0].pageX;\r\n        }\r\n        else {\r\n            return e.pageX;\r\n        }\r\n    };\r\n    Image.prototype.getPointY = function (e) {\r\n        if (e.touches && e.touches.length) {\r\n            return e.touches[0].pageY;\r\n        }\r\n        else {\r\n            return e.pageY;\r\n        }\r\n    };\r\n    Image.prototype.imgResizePos = function (e, imgResizeDiv) {\r\n        var pos = this.calcPos(e);\r\n        var top = pos.top;\r\n        var left = pos.left;\r\n        var imgWid = e.width;\r\n        var imgHgt = e.height;\r\n        var borWid = (Browser.isDevice) ? (4 * parseInt((e.style.outline.slice(-3)), 10)) + 2 :\r\n            (2 * parseInt((e.style.outline.slice(-3)), 10)) + 2; //span border width + image outline width\r\n        var devWid = ((Browser.isDevice) ? 0 : 2); // span border width\r\n        imgResizeDiv.querySelector('.e-rte-botLeft').style.left = (left - borWid) + 'px';\r\n        imgResizeDiv.querySelector('.e-rte-botLeft').style.top = ((imgHgt - borWid) + top) + 'px';\r\n        imgResizeDiv.querySelector('.e-rte-botRight').style.left = ((imgWid - (borWid - devWid)) + left) + 'px';\r\n        imgResizeDiv.querySelector('.e-rte-botRight').style.top = ((imgHgt - borWid) + top) + 'px';\r\n        imgResizeDiv.querySelector('.e-rte-topRight').style.left = ((imgWid - (borWid - devWid)) + left) + 'px';\r\n        imgResizeDiv.querySelector('.e-rte-topRight').style.top = (top - (borWid)) + 'px';\r\n        imgResizeDiv.querySelector('.e-rte-topLeft').style.left = (left - borWid) + 'px';\r\n        imgResizeDiv.querySelector('.e-rte-topLeft').style.top = (top - borWid) + 'px';\r\n    };\r\n    Image.prototype.calcPos = function (elem) {\r\n        var parentOffset = { top: 0, left: 0 };\r\n        var offset = elem.getBoundingClientRect();\r\n        var doc = elem.ownerDocument;\r\n        var offsetParent = ((elem.offsetParent && elem.offsetParent.classList.contains('e-img-caption')) ?\r\n            closest(elem, '#' + this.parent.getID() + '_rte-edit-view') : elem.offsetParent) || doc.documentElement;\r\n        while (offsetParent &&\r\n            (offsetParent === doc.body || offsetParent === doc.documentElement) &&\r\n            offsetParent.style.position === 'static') {\r\n            offsetParent = offsetParent.parentNode;\r\n        }\r\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\r\n            parentOffset = offsetParent.getBoundingClientRect();\r\n        }\r\n        return {\r\n            top: offset.top - parentOffset.top,\r\n            left: offset.left - parentOffset.left\r\n        };\r\n    };\r\n    Image.prototype.setAspectRatio = function (img, expectedX, expectedY) {\r\n        if (isNullOrUndefined(img.width)) {\r\n            return;\r\n        }\r\n        var width = img.style.width !== '' ? parseInt(img.style.width, 10) : img.width;\r\n        var height = img.style.height !== '' ? parseInt(img.style.height, 10) : img.height;\r\n        if (width > height) {\r\n            if (this.parent.insertImageSettings.resizeByPercent) {\r\n                img.style.width = this.pixToPerc((width / height * expectedY), (img.previousElementSibling || img.parentElement)) + '%';\r\n                img.style.height = null;\r\n                img.removeAttribute('height');\r\n            }\r\n            else if (img.style.width !== '') {\r\n                img.style.width = (width / height * expectedY) + 'px';\r\n                img.style.height = expectedY + 'px';\r\n            }\r\n            else {\r\n                img.setAttribute('width', (width / height * expectedY).toString());\r\n                img.setAttribute('height', expectedY.toString());\r\n            }\r\n        }\r\n        else if (height > width) {\r\n            if (this.parent.insertImageSettings.resizeByPercent) {\r\n                img.style.width = this.pixToPerc(expectedX, (img.previousElementSibling || img.parentElement)) + '%';\r\n                img.style.height = null;\r\n                img.removeAttribute('height');\r\n            }\r\n            else if (img.style.width !== '') {\r\n                img.style.width = expectedX + 'px';\r\n                img.style.height = (height / width * expectedX) + 'px';\r\n            }\r\n            else {\r\n                img.setAttribute('width', expectedX.toString());\r\n                img.setAttribute('height', (height / width * expectedX).toString());\r\n            }\r\n        }\r\n        else {\r\n            if (this.parent.insertImageSettings.resizeByPercent) {\r\n                img.style.width = this.pixToPerc(expectedX, (img.previousElementSibling || img.parentElement)) + '%';\r\n                img.style.height = null;\r\n                img.removeAttribute('height');\r\n            }\r\n            else if (img.style.width !== '') {\r\n                img.style.width = expectedX + 'px';\r\n                img.style.height = expectedX + 'px';\r\n            }\r\n            else {\r\n                img.setAttribute('width', expectedX.toString());\r\n                img.setAttribute('height', expectedX.toString());\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.pixToPerc = function (expected, parentEle) {\r\n        return expected / parseFloat(getComputedStyle(parentEle).width) * 100;\r\n    };\r\n    Image.prototype.imgDupMouseMove = function (width, height, e) {\r\n        var args = { event: e, requestType: 'images' };\r\n        this.parent.trigger(events.onResize, args);\r\n        if (args.cancel) {\r\n            this.cancelResizeAction();\r\n            return;\r\n        }\r\n        if ((parseInt(this.parent.insertImageSettings.minWidth, 10) >= parseInt(width, 10) ||\r\n            parseInt(this.parent.insertImageSettings.maxWidth, 10) <= parseInt(width, 10))) {\r\n            return;\r\n        }\r\n        if (!this.parent.insertImageSettings.resizeByPercent &&\r\n            (parseInt(this.parent.insertImageSettings.minHeight, 10) >= parseInt(height, 10) ||\r\n                parseInt(this.parent.insertImageSettings.maxHeight, 10) <= parseInt(height, 10))) {\r\n            return;\r\n        }\r\n        this.imgEle.parentElement.style.cursor = 'pointer';\r\n        this.setAspectRatio(this.imgEle, parseInt(width, 10), parseInt(height, 10));\r\n        this.resizeImgDupPos(this.imgEle);\r\n        this.imgResizePos(this.imgEle, this.imgResizeDiv);\r\n        this.parent.setContentHeight('', false);\r\n    };\r\n    Image.prototype.resizing = function (e) {\r\n        var pageX = this.getPointX(e);\r\n        var pageY = this.getPointY(e);\r\n        var mouseX = (this.resizeBtnStat.botLeft || this.resizeBtnStat.topLeft) ? -(pageX - this.pageX) : (pageX - this.pageX);\r\n        var mouseY = (this.resizeBtnStat.topLeft || this.resizeBtnStat.topRight) ? -(pageY - this.pageY) : (pageY - this.pageY);\r\n        var width = parseInt(this.imgDupPos.width, 10) + mouseX;\r\n        var height = parseInt(this.imgDupPos.height, 10) + mouseY;\r\n        this.pageX = pageX;\r\n        this.pageY = pageY;\r\n        if (this.resizeBtnStat.botRight) {\r\n            this.imgDupMouseMove(width + 'px', height + 'px', e);\r\n        }\r\n        else if (this.resizeBtnStat.botLeft) {\r\n            this.imgDupMouseMove(width + 'px', height + 'px', e);\r\n        }\r\n        else if (this.resizeBtnStat.topRight) {\r\n            this.imgDupMouseMove(width + 'px', height + 'px', e);\r\n        }\r\n        else if (this.resizeBtnStat.topLeft) {\r\n            this.imgDupMouseMove(width + 'px', height + 'px', e);\r\n        }\r\n    };\r\n    Image.prototype.cancelResizeAction = function () {\r\n        EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);\r\n        EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);\r\n        if (this.imgEle && this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {\r\n            detach(this.imgResizeDiv);\r\n            this.imgEle.style.outline = '';\r\n            this.imgResizeDiv = null;\r\n            this.pageX = null;\r\n            this.pageY = null;\r\n        }\r\n    };\r\n    Image.prototype.resizeImgDupPos = function (e) {\r\n        this.imgDupPos = {\r\n            width: (e.style.height !== '') ? this.imgEle.style.width : e.width + 'px',\r\n            height: (e.style.height !== '') ? this.imgEle.style.height : e.height + 'px'\r\n        };\r\n    };\r\n    Image.prototype.resizeBtnInit = function () {\r\n        return this.resizeBtnStat = { botLeft: false, botRight: false, topRight: false, topLeft: false };\r\n    };\r\n    Image.prototype.onToolbarAction = function (args) {\r\n        var item = args.args.item;\r\n        switch (item.subCommand) {\r\n            case 'Replace':\r\n                this.parent.notify(events.insertImage, args);\r\n                break;\r\n            case 'Caption':\r\n                this.parent.notify(events.imageCaption, args);\r\n                break;\r\n            case 'InsertLink':\r\n                this.parent.notify(events.imageLink, args);\r\n                break;\r\n            case 'AltText':\r\n                this.parent.notify(events.imageAlt, args);\r\n                break;\r\n            case 'Remove':\r\n                this.parent.notify(events.imageDelete, args);\r\n                break;\r\n            case 'Dimension':\r\n                this.parent.notify(events.imageSize, args);\r\n                break;\r\n            case 'OpenImageLink':\r\n                this.openImgLink(args);\r\n                break;\r\n            case 'EditImageLink':\r\n                this.editImgLink(args);\r\n                break;\r\n            case 'RemoveImageLink':\r\n                this.removeImgLink(args);\r\n                break;\r\n        }\r\n    };\r\n    Image.prototype.openImgLink = function (e) {\r\n        var target = e.selectParent[0].parentNode.target === '' ? '_self' : '_blank';\r\n        this.parent.formatter.process(this.parent, e.args, e.args, {\r\n            url: e.selectParent[0].parentNode.href, target: target, selectNode: e.selectNode,\r\n            subCommand: e.args.item.subCommand\r\n        });\r\n    };\r\n    Image.prototype.editImgLink = function (e) {\r\n        var selectParentEle = e.selectParent[0].parentNode;\r\n        var linkUpdate = this.i10n.getConstant('dialogUpdate');\r\n        var inputDetails = {\r\n            url: selectParentEle.href, target: selectParentEle.target,\r\n            header: 'Edit Link', btnText: linkUpdate\r\n        };\r\n        this.insertImgLink(e, inputDetails);\r\n    };\r\n    Image.prototype.removeImgLink = function (e) {\r\n        e.selection.restore();\r\n        var insertEle = (this.contentModule.getEditPanel().contains(this.captionEle) && closest(this.captionEle, 'a')) ?\r\n            this.captionEle : e.selectNode[0];\r\n        this.parent.formatter.process(this.parent, e.args, e.args, {\r\n            insertElement: insertEle, selectParent: e.selectParent,\r\n            subCommand: e.args.item.subCommand\r\n        });\r\n        if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {\r\n            this.quickToolObj.imageQTBar.hidePopup();\r\n            if (!isNullOrUndefined(e.selectParent)) {\r\n                removeClass([e.selectParent[0]], 'e-img-focus');\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.onKeyDown = function (event) {\r\n        var originalEvent = event.args;\r\n        var range;\r\n        var save;\r\n        var selectNodeEle;\r\n        var selectParentEle;\r\n        if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {\r\n            range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\r\n            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());\r\n            selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);\r\n            selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\r\n            if (!originalEvent.ctrlKey && originalEvent.key && (originalEvent.key.length === 1 || originalEvent.action === 'enter') &&\r\n                (selectParentEle[0].tagName === 'IMG') && selectParentEle[0].parentElement) {\r\n                var prev = selectParentEle[0].parentElement.childNodes[0];\r\n                if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {\r\n                    this.remvoeResizEle();\r\n                }\r\n                this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), prev, prev, prev.textContent.length, prev.textContent.length);\r\n                removeClass([selectParentEle[0]], 'e-img-focus');\r\n                this.quickToolObj.imageQTBar.hidePopup();\r\n            }\r\n        }\r\n        if (originalEvent.ctrlKey && (originalEvent.keyCode === 89 || originalEvent.keyCode === 90)) {\r\n            this.undoStack({ subCommand: (originalEvent.keyCode === 90 ? 'undo' : 'redo') });\r\n        }\r\n        if (originalEvent.keyCode === 8 || originalEvent.keyCode === 46) {\r\n            if (selectNodeEle && selectNodeEle[0].nodeName === 'IMG') {\r\n                originalEvent.preventDefault();\r\n                var event_1 = {\r\n                    selectNode: selectNodeEle, selection: save, selectParent: selectParentEle,\r\n                    args: {\r\n                        item: { command: 'Images', subCommand: 'Remove' },\r\n                        originalEvent: originalEvent\r\n                    }\r\n                };\r\n                this.deleteImg(event_1);\r\n            }\r\n            if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {\r\n                this.remvoeResizEle();\r\n            }\r\n        }\r\n        switch (originalEvent.action) {\r\n            case 'escape':\r\n                if (!isNullOrUndefined(this.dialogObj)) {\r\n                    this.dialogObj.close();\r\n                }\r\n                break;\r\n            case 'insert-image':\r\n                if (this.parent.editorMode === 'HTML') {\r\n                    this.insertImage({\r\n                        args: {\r\n                            item: { command: 'Images', subCommand: 'Image' },\r\n                            originalEvent: originalEvent\r\n                        },\r\n                        selectNode: selectNodeEle,\r\n                        selection: save,\r\n                        selectParent: selectParentEle\r\n                    });\r\n                }\r\n                else {\r\n                    this.insertImage({\r\n                        args: {\r\n                            item: { command: 'Images', subCommand: 'Image' },\r\n                            originalEvent: originalEvent\r\n                        },\r\n                        member: 'image',\r\n                        text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),\r\n                        module: 'Markdown',\r\n                        name: 'insertImage'\r\n                    });\r\n                }\r\n                originalEvent.preventDefault();\r\n                break;\r\n        }\r\n    };\r\n    Image.prototype.alignmentSelect = function (e) {\r\n        var item = e.item;\r\n        if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || item.command !== 'Images') {\r\n            return;\r\n        }\r\n        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\r\n        var selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);\r\n        selectNodeEle = (selectNodeEle[0].nodeName === 'IMG') ? selectNodeEle : [this.imgEle];\r\n        var args = { args: e, selectNode: selectNodeEle };\r\n        if (this.parent.formatter.getUndoRedoStack().length === 0) {\r\n            this.parent.formatter.saveData();\r\n        }\r\n        switch (item.subCommand) {\r\n            case 'JustifyLeft':\r\n                this.justifyImageLeft(args);\r\n                break;\r\n            case 'JustifyCenter':\r\n                this.justifyImageCenter(args);\r\n                break;\r\n            case 'JustifyRight':\r\n                this.justifyImageRight(args);\r\n                break;\r\n            case 'Inline':\r\n                this.inline(args);\r\n                break;\r\n            case 'Break':\r\n                this.break(args);\r\n                break;\r\n        }\r\n        if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {\r\n            this.quickToolObj.imageQTBar.hidePopup();\r\n            removeClass([selectNodeEle[0]], 'e-img-focus');\r\n        }\r\n        this.cancelResizeAction();\r\n    };\r\n    Image.prototype.imageWithLinkQTBarItemUpdate = function () {\r\n        var separator;\r\n        var items = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item');\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (items[i].getAttribute('title') === this.i10n.getConstant('openLink') ||\r\n                items[i].getAttribute('title') === this.i10n.getConstant('editLink') ||\r\n                items[i].getAttribute('title') === this.i10n.getConstant('removeLink')) {\r\n                addClass([items[i]], 'e-link-groups');\r\n                items[i].style.display = 'none';\r\n            }\r\n            else if (items[i].getAttribute('title') === 'Insert Link') {\r\n                items[i].style.display = '';\r\n            }\r\n            else if (items[i].classList.contains('e-rte-horizontal-separator')) {\r\n                separator = items[i];\r\n                detach(items[i]);\r\n            }\r\n        }\r\n        var newItems = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item:not(.e-link-groups)');\r\n        this.quickToolObj.imageQTBar.addQTBarItem(['-'], Math.round(newItems.length / 2));\r\n    };\r\n    Image.prototype.showImageQuickToolbar = function (e) {\r\n        var _this = this;\r\n        if (e.type !== 'Images' || isNullOrUndefined(this.parent.quickToolbarModule)\r\n            || isNullOrUndefined(this.parent.quickToolbarModule.imageQTBar)) {\r\n            return;\r\n        }\r\n        this.quickToolObj = this.parent.quickToolbarModule;\r\n        var args = e.args;\r\n        var target;\r\n        [].forEach.call(e.elements, function (element, index) {\r\n            if (index === 0) {\r\n                target = element;\r\n            }\r\n        });\r\n        if (target && !closest(target, 'a')) {\r\n            this.imageWithLinkQTBarItemUpdate();\r\n        }\r\n        if (target.nodeName === 'IMG') {\r\n            addClass([target], ['e-img-focus']);\r\n        }\r\n        var pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset +\r\n            this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;\r\n        if (this.parent.quickToolbarModule.imageQTBar) {\r\n            if (e.isNotify) {\r\n                setTimeout(function () { _this.quickToolObj.imageQTBar.showPopup(args.pageX, pageY, target); }, 400);\r\n            }\r\n            else {\r\n                this.quickToolObj.imageQTBar.showPopup(args.pageX, pageY, target);\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.hideImageQuickToolbar = function () {\r\n        if (!isNullOrUndefined(this.contentModule.getEditPanel().querySelector('.e-img-focus'))) {\r\n            removeClass([this.contentModule.getEditPanel().querySelector('.e-img-focus')], 'e-img-focus');\r\n            if (this.quickToolObj && this.quickToolObj.imageQTBar && document.body.contains(this.quickToolObj.imageQTBar.element)) {\r\n                this.quickToolObj.imageQTBar.hidePopup();\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.editAreaClickHandler = function (e) {\r\n        var args = e.args;\r\n        if (args.which === 2 || args.which === 3) {\r\n            return;\r\n        }\r\n        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.imageQTBar) {\r\n            this.quickToolObj = this.parent.quickToolbarModule;\r\n            var target = args.target;\r\n            this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\r\n            var isPopupOpen = this.quickToolObj.imageQTBar.element.classList.contains('e-rte-pop');\r\n            if (target.nodeName === 'IMG' && this.parent.quickToolbarModule) {\r\n                if (isPopupOpen) {\r\n                    return;\r\n                }\r\n                this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());\r\n                this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), target);\r\n                addClass([target], 'e-img-focus');\r\n                var items = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item');\r\n                var separator = void 0;\r\n                if (closest(target, 'a')) {\r\n                    for (var i = 0; i < items.length; i++) {\r\n                        if (items[i].getAttribute('title') === this.i10n.getConstant('openLink') ||\r\n                            items[i].getAttribute('title') === this.i10n.getConstant('editLink') ||\r\n                            items[i].getAttribute('title') === this.i10n.getConstant('removeLink')) {\r\n                            items[i].style.display = '';\r\n                            removeClass([items[i]], 'e-link-groups');\r\n                        }\r\n                        else if (items[i].getAttribute('title') === 'Insert Link') {\r\n                            items[i].style.display = 'none';\r\n                        }\r\n                        else if (items[i].classList.contains('e-rte-horizontal-separator')) {\r\n                            separator = items[i];\r\n                            detach(items[i]);\r\n                        }\r\n                    }\r\n                    var newItems = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item:not(.e-link-groups)');\r\n                    this.quickToolObj.imageQTBar.addQTBarItem(['-'], Math.round(newItems.length / 2));\r\n                }\r\n                else if (!closest(target, 'a')) {\r\n                    this.imageWithLinkQTBarItemUpdate();\r\n                }\r\n                this.showImageQuickToolbar({ args: args, type: 'Images', elements: [args.target] });\r\n            }\r\n            else {\r\n                this.hideImageQuickToolbar();\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.insertImgLink = function (e, inputDetails) {\r\n        var _this = this;\r\n        if (e.selectNode[0].nodeName !== 'IMG') {\r\n            return;\r\n        }\r\n        this.imagDialog(e);\r\n        if (!isNullOrUndefined(this.dialogObj)) {\r\n            var linkWrap = this.parent.createElement('div', { className: 'e-img-linkwrap' });\r\n            var linkUrl = this.i10n.getConstant('linkurl');\r\n            var content = '<div class=\"e-rte-field\">' +\r\n                '<input type=\"text\" data-role =\"none\" class=\"e-input e-img-link\" spellcheck=\"false\" placeholder=\"' + linkUrl + '\"/></div>' +\r\n                '<div class=\"e-rte-label\"></div>' + '<div class=\"e-rte-field\">' +\r\n                '<input type=\"checkbox\" class=\"e-rte-linkTarget\"  data-role =\"none\"></div>';\r\n            var contentElem = parseHtml(content);\r\n            linkWrap.appendChild(contentElem);\r\n            var linkTarget = linkWrap.querySelector('.e-rte-linkTarget');\r\n            var inputLink = linkWrap.querySelector('.e-img-link');\r\n            var linkOpenLabel = this.i10n.getConstant('linkOpenInNewWindow');\r\n            this.checkBoxObj = new CheckBox({\r\n                label: linkOpenLabel, checked: true, enableRtl: this.parent.enableRtl, change: function (e) {\r\n                    if (e.checked) {\r\n                        target_1 = '_blank';\r\n                    }\r\n                    else {\r\n                        target_1 = '';\r\n                    }\r\n                }\r\n            });\r\n            this.checkBoxObj.createElement = this.parent.createElement;\r\n            this.checkBoxObj.appendTo(linkTarget);\r\n            var target_1 = this.checkBoxObj.checked ? '_blank' : '';\r\n            var linkUpdate = this.i10n.getConstant('dialogUpdate');\r\n            var linkargs_1 = {\r\n                args: e.args,\r\n                selfImage: this, selection: e.selection,\r\n                selectNode: e.selectNode, selectParent: e.selectParent, link: inputLink, target: target_1\r\n            };\r\n            this.dialogObj.setProperties({\r\n                height: 'initial',\r\n                width: '290px',\r\n                header: this.parent.localeObj.getConstant('imageInsertLinkHeader'),\r\n                content: linkWrap,\r\n                position: { X: 'center', Y: 'center' },\r\n                buttons: [{\r\n                        click: function (e) { _this.insertlink(linkargs_1); },\r\n                        buttonModel: {\r\n                            content: linkUpdate, cssClass: 'e-flat e-update-link', isPrimary: true\r\n                        }\r\n                    }]\r\n            });\r\n            if (!isNullOrUndefined(inputDetails)) {\r\n                inputLink.value = inputDetails.url;\r\n                (inputDetails.target) ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;\r\n                this.dialogObj.header = inputDetails.header;\r\n            }\r\n            this.dialogObj.element.style.maxHeight = 'none';\r\n            this.dialogObj.content.querySelector('input').focus();\r\n        }\r\n    };\r\n    Image.prototype.insertAltText = function (e) {\r\n        var _this = this;\r\n        if (e.selectNode[0].nodeName !== 'IMG') {\r\n            return;\r\n        }\r\n        this.imagDialog(e);\r\n        var altText = this.i10n.getConstant('altText');\r\n        if (!isNullOrUndefined(this.dialogObj)) {\r\n            var altWrap = this.parent.createElement('div', { className: 'e-img-altwrap' });\r\n            var altHeader = this.i10n.getConstant('alternateHeader');\r\n            var linkUpdate = this.i10n.getConstant('dialogUpdate');\r\n            var getAlt = (e.selectNode[0].getAttribute('alt') === null) ? '' :\r\n                e.selectNode[0].getAttribute('alt');\r\n            var content = '<div class=\"e-rte-field\">' +\r\n                '<input type=\"text\" spellcheck=\"false\" value=\"' + getAlt + '\" class=\"e-input e-img-alt\" placeholder=\"' + altText + '\"/>' +\r\n                '</div>';\r\n            var contentElem = parseHtml(content);\r\n            altWrap.appendChild(contentElem);\r\n            var inputAlt = altWrap.querySelector('.e-img-alt');\r\n            var altArgs_1 = {\r\n                args: e.args, selfImage: this, selection: e.selection, selectNode: e.selectNode,\r\n                alt: inputAlt\r\n            };\r\n            this.dialogObj.setProperties({\r\n                height: 'initial', width: '290px', header: altHeader, content: altWrap, position: { X: 'center', Y: 'center' },\r\n                buttons: [{\r\n                        click: function (e) { _this.insertAlt(altArgs_1); },\r\n                        buttonModel: {\r\n                            content: linkUpdate, cssClass: 'e-flat e-update-alt', isPrimary: true\r\n                        }\r\n                    }]\r\n            });\r\n            this.dialogObj.element.style.maxHeight = 'none';\r\n            this.dialogObj.content.querySelector('input').focus();\r\n        }\r\n    };\r\n    Image.prototype.insertAlt = function (e) {\r\n        if (!isNullOrUndefined(e.alt)) {\r\n            e.selection.restore();\r\n            if (this.parent.formatter.getUndoRedoStack().length === 0) {\r\n                this.parent.formatter.saveData();\r\n            }\r\n            var altText = e.alt.value;\r\n            this.parent.formatter.process(this.parent, e.args, e.args, {\r\n                altText: altText, selectNode: e.selectNode,\r\n                subCommand: e.args.item.subCommand\r\n            });\r\n            this.dialogObj.hide({ returnValue: false });\r\n        }\r\n    };\r\n    Image.prototype.insertlink = function (e) {\r\n        if (e.selectNode[0].nodeName !== 'IMG') {\r\n            return;\r\n        }\r\n        var url = e.link.value;\r\n        if (url === '') {\r\n            addClass([e.link], 'e-error');\r\n            e.link.setSelectionRange(0, url.length);\r\n            e.link.focus();\r\n            return;\r\n        }\r\n        if (!this.isUrl(url)) {\r\n            url = 'http://' + url;\r\n        }\r\n        else {\r\n            removeClass([e.link], 'e-error');\r\n        }\r\n        var proxy = e.selfImage;\r\n        if (proxy.parent.editorMode === 'HTML') {\r\n            e.selection.restore();\r\n        }\r\n        if (proxy.parent.formatter.getUndoRedoStack().length === 0) {\r\n            proxy.parent.formatter.saveData();\r\n        }\r\n        if (e.selectNode[0].parentElement.nodeName === 'A') {\r\n            proxy.parent.formatter.process(proxy.parent, e.args, e.args, {\r\n                url: url, target: proxy.checkBoxObj.checked ? '_blank' : '', selectNode: e.selectNode,\r\n                subCommand: e.args.item.subCommand\r\n            });\r\n            proxy.dialogObj.hide({ returnValue: true });\r\n            return;\r\n        }\r\n        proxy.parent.formatter.process(proxy.parent, e.args, e.args, {\r\n            url: url, target: e.target, selectNode: e.selectNode,\r\n            subCommand: e.args.item.subCommand\r\n        });\r\n        proxy.dialogObj.hide({ returnValue: false });\r\n    };\r\n    Image.prototype.isUrl = function (url) {\r\n        var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/gi;\r\n        return regexp.test(url);\r\n    };\r\n    Image.prototype.deleteImg = function (e) {\r\n        if (e.selectNode[0].nodeName !== 'IMG') {\r\n            return;\r\n        }\r\n        if (this.parent.formatter.getUndoRedoStack().length === 0) {\r\n            this.parent.formatter.saveData();\r\n        }\r\n        e.selection.restore();\r\n        if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {\r\n            this.remvoeResizEle();\r\n        }\r\n        this.parent.formatter.process(this.parent, e.args, e.args, {\r\n            selectNode: e.selectNode,\r\n            captionClass: classes.CLS_CAPTION,\r\n            subCommand: e.args.item.subCommand\r\n        });\r\n        if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {\r\n            this.quickToolObj.imageQTBar.hidePopup();\r\n        }\r\n        this.cancelResizeAction();\r\n    };\r\n    Image.prototype.caption = function (e) {\r\n        var selectNode = e.selectNode[0];\r\n        if (selectNode.nodeName !== 'IMG') {\r\n            return;\r\n        }\r\n        e.selection.restore();\r\n        if (this.parent.formatter.getUndoRedoStack().length === 0) {\r\n            this.parent.formatter.saveData();\r\n        }\r\n        this.cancelResizeAction();\r\n        addClass([selectNode], 'e-rte-image');\r\n        var subCommand = (e.args.item) ?\r\n            e.args.item.subCommand : 'Caption';\r\n        if (!isNullOrUndefined(closest(selectNode, '.' + classes.CLS_CAPTION))) {\r\n            detach(closest(selectNode, '.' + classes.CLS_CAPTION));\r\n            if (selectNode.parentElement.tagName === 'A') {\r\n                this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: selectNode.parentElement, selectNode: e.selectNode, subCommand: subCommand });\r\n            }\r\n            else {\r\n                this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: selectNode, selectNode: e.selectNode, subCommand: subCommand });\r\n            }\r\n        }\r\n        else {\r\n            this.captionEle = this.parent.createElement('span', {\r\n                className: classes.CLS_CAPTION,\r\n                attrs: { contenteditable: 'false', draggable: 'false' }\r\n            });\r\n            var imgWrap = this.parent.createElement('span', { className: 'e-img-wrap' });\r\n            var imgInner = this.parent.createElement('span', { className: 'e-img-inner', attrs: { contenteditable: 'true' } });\r\n            imgWrap.appendChild(e.selectNode[0]);\r\n            imgWrap.appendChild(imgInner);\r\n            var imgCaption = this.i10n.getConstant('imageCaption');\r\n            imgInner.innerHTML = imgCaption;\r\n            this.captionEle.appendChild(imgWrap);\r\n            if (selectNode.classList.contains(classes.CLS_IMGINLINE)) {\r\n                addClass([this.captionEle], classes.CLS_CAPINLINE);\r\n            }\r\n            if (selectNode.classList.contains(classes.CLS_IMGBREAK)) {\r\n                addClass([this.captionEle], classes.CLS_IMGBREAK);\r\n            }\r\n            if (selectNode.classList.contains(classes.CLS_IMGLEFT)) {\r\n                addClass([this.captionEle], classes.CLS_IMGLEFT);\r\n            }\r\n            if (selectNode.classList.contains(classes.CLS_IMGRIGHT)) {\r\n                addClass([this.captionEle], classes.CLS_IMGRIGHT);\r\n            }\r\n            if (selectNode.classList.contains(classes.CLS_IMGCENTER)) {\r\n                addClass([this.captionEle], classes.CLS_IMGCENTER);\r\n            }\r\n            this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: this.captionEle, selectNode: e.selectNode, subCommand: subCommand });\r\n            this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), imgInner.childNodes[0], imgInner.childNodes[0], 0, imgInner.childNodes[0].textContent.length);\r\n        }\r\n        if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {\r\n            this.quickToolObj.imageQTBar.hidePopup();\r\n            removeClass([selectNode], 'e-img-focus');\r\n        }\r\n    };\r\n    Image.prototype.imageSize = function (e) {\r\n        var _this = this;\r\n        if (e.selectNode[0].nodeName !== 'IMG') {\r\n            return;\r\n        }\r\n        this.imagDialog(e);\r\n        if (!isNullOrUndefined(this.dialogObj)) {\r\n            var imgSizeHeader = this.i10n.getConstant('imageSizeHeader');\r\n            var linkUpdate = this.i10n.getConstant('dialogUpdate');\r\n            var dialogContent = this.imgsizeInput(e);\r\n            var selectObj_1 = { args: e.args, selfImage: this, selection: e.selection, selectNode: e.selectNode };\r\n            this.dialogObj.setProperties({\r\n                height: 'initial', width: '290px', header: imgSizeHeader, content: dialogContent, position: { X: 'center', Y: 'center' },\r\n                buttons: [{\r\n                        click: function (e) { _this.insertSize(selectObj_1); },\r\n                        buttonModel: {\r\n                            content: linkUpdate, cssClass: 'e-flat e-update-size', isPrimary: true\r\n                        }\r\n                    }]\r\n            });\r\n            this.dialogObj.element.style.maxHeight = 'none';\r\n            this.dialogObj.content.querySelector('input').focus();\r\n        }\r\n    };\r\n    Image.prototype.break = function (e) {\r\n        if (e.selectNode[0].nodeName !== 'IMG') {\r\n            return;\r\n        }\r\n        var subCommand = (e.args.item) ?\r\n            e.args.item.subCommand : 'Break';\r\n        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });\r\n    };\r\n    Image.prototype.inline = function (e) {\r\n        if (e.selectNode[0].nodeName !== 'IMG') {\r\n            return;\r\n        }\r\n        var subCommand = (e.args.item) ?\r\n            e.args.item.subCommand : 'Inline';\r\n        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });\r\n    };\r\n    Image.prototype.justifyImageLeft = function (e) {\r\n        var subCommand = (e.args.item) ?\r\n            e.args.item.subCommand : 'JustifyLeft';\r\n        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });\r\n    };\r\n    Image.prototype.justifyImageRight = function (e) {\r\n        var subCommand = (e.args.item) ?\r\n            e.args.item.subCommand : 'JustifyRight';\r\n        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });\r\n    };\r\n    Image.prototype.justifyImageCenter = function (e) {\r\n        var subCommand = (e.args.item) ?\r\n            e.args.item.subCommand : 'JustifyCenter';\r\n        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });\r\n    };\r\n    Image.prototype.imagDialog = function (e) {\r\n        var _this = this;\r\n        if (this.dialogObj) {\r\n            this.dialogObj.hide({ returnValue: true });\r\n            return;\r\n        }\r\n        var imgDialog = this.parent.createElement('div', { className: 'e-rte-img-dialog', id: this.rteID + '_image' });\r\n        this.parent.element.appendChild(imgDialog);\r\n        var imgInsert = this.i10n.getConstant('dialogInsert');\r\n        var imglinkCancel = this.i10n.getConstant('dialogCancel');\r\n        var imgHeader = this.i10n.getConstant('imageHeader');\r\n        var selection = e.selection;\r\n        var selectObj = { selfImage: this, selection: e.selection, args: e.args, selectParent: e.selectParent };\r\n        this.dialogObj = new Dialog({\r\n            header: imgHeader,\r\n            cssClass: classes.CLS_RTE_ELEMENTS,\r\n            enableRtl: this.parent.enableRtl,\r\n            locale: this.parent.locale,\r\n            showCloseIcon: true, closeOnEscape: true, width: (Browser.isDevice) ? '290px' : '340px', height: 'initial',\r\n            position: { X: 'center', Y: (Browser.isDevice) ? 'center' : 'top' },\r\n            isModal: Browser.isDevice,\r\n            buttons: [{\r\n                    click: this.insertImageUrl.bind(selectObj),\r\n                    buttonModel: { content: imgInsert, cssClass: 'e-flat e-insertImage', isPrimary: true }\r\n                },\r\n                {\r\n                    click: function (e) { _this.cancelDialog(e); },\r\n                    buttonModel: { cssClass: 'e-flat e-cancel', content: imglinkCancel }\r\n                }],\r\n            target: (Browser.isDevice) ? document.body : this.parent.element,\r\n            animationSettings: { effect: 'None' },\r\n            close: function (event) {\r\n                _this.parent.isBlur = false;\r\n                if (event && event.event.returnValue) {\r\n                    if (_this.parent.editorMode === 'HTML') {\r\n                        selection.restore();\r\n                    }\r\n                    else {\r\n                        _this.parent.formatter.editorManager.markdownSelection.restore(_this.parent.contentModule.getEditPanel());\r\n                    }\r\n                }\r\n                _this.dialogObj.destroy();\r\n                detach(_this.dialogObj.element);\r\n                _this.dialogObj = null;\r\n            },\r\n        });\r\n        this.dialogObj.createElement = this.parent.createElement;\r\n        this.dialogObj.appendTo(imgDialog);\r\n        imgDialog.style.maxHeight = 'none';\r\n        if (this.quickToolObj) {\r\n            if (this.quickToolObj.imageQTBar && document.body.contains(this.quickToolObj.imageQTBar.element)) {\r\n                this.quickToolObj.imageQTBar.hidePopup();\r\n                if (!isNullOrUndefined(e.selectParent)) {\r\n                    removeClass([e.selectParent[0]], 'e-img-focus');\r\n                }\r\n            }\r\n            if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {\r\n                this.quickToolObj.inlineQTBar.hidePopup();\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.cancelDialog = function (e) {\r\n        this.parent.isBlur = false;\r\n        this.dialogObj.hide({ returnValue: true });\r\n    };\r\n    Image.prototype.onDocumentClick = function (e) {\r\n        var target = e.target;\r\n        if (target.nodeName === 'IMG') {\r\n            this.imgEle = target;\r\n        }\r\n        if (!isNullOrUndefined(this.dialogObj) && ((!closest(target, '#' + this.dialogObj.element.id) && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() &&\r\n            !this.parent.getToolbarElement().contains(e.target)) ||\r\n            (this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) &&\r\n                !closest(target, '#' + this.parent.getID() + '_toolbar_Image') &&\r\n                !target.querySelector('#' + this.parent.getID() + '_toolbar_Image')))) {\r\n            this.dialogObj.hide({ returnValue: true });\r\n            this.parent.isBlur = true;\r\n            dispatchEvent(this.parent.element, 'focusout');\r\n        }\r\n        if (e.target.tagName !== 'IMG' && this.imgResizeDiv && !(this.quickToolObj &&\r\n            this.quickToolObj.imageQTBar && this.quickToolObj.imageQTBar.element.contains(e.target)) &&\r\n            this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {\r\n            this.cancelResizeAction();\r\n        }\r\n        if (target.tagName !== 'IMG' && this.contentModule.getEditPanel().querySelector('.e-img-resize')) {\r\n            this.remvoeResizEle();\r\n            this.contentModule.getEditPanel().querySelector('img').style.outline = '';\r\n        }\r\n    };\r\n    Image.prototype.remvoeResizEle = function () {\r\n        EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);\r\n        EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);\r\n        detach(this.contentModule.getEditPanel().querySelector('.e-img-resize'));\r\n    };\r\n    Image.prototype.imageUrlPopup = function (e) {\r\n        var imgUrl = this.parent.createElement('div', { className: 'imgUrl' });\r\n        var placeUrl = this.i10n.getConstant('imageUrl');\r\n        this.inputUrl = this.parent.createElement('input', {\r\n            className: 'e-input e-img-url',\r\n            attrs: { placeholder: placeUrl, spellcheck: 'false' }\r\n        });\r\n        imgUrl.appendChild(this.inputUrl);\r\n        return imgUrl;\r\n    };\r\n    Image.prototype.insertImageUrl = function (e) {\r\n        var proxy = this.selfImage;\r\n        var url = proxy.inputUrl.value;\r\n        if (proxy.parent.formatter.getUndoRedoStack().length === 0) {\r\n            proxy.parent.formatter.saveData();\r\n        }\r\n        if (!isNullOrUndefined(proxy.uploadUrl) && proxy.uploadUrl.url !== '') {\r\n            proxy.uploadUrl.cssClass = (proxy.parent.insertImageSettings.display === 'inline' ?\r\n                classes.CLS_IMGINLINE : classes.CLS_IMGBREAK);\r\n            proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, proxy.uploadUrl);\r\n            proxy.dialogObj.hide({ returnValue: false });\r\n            proxy.uploadUrl.url = '';\r\n        }\r\n        else if (url !== '') {\r\n            if (proxy.parent.editorMode === 'HTML' && isNullOrUndefined(closest(this.selection.range.startContainer.parentNode, '#' + proxy.contentModule.getPanel().id))) {\r\n                proxy.contentModule.getEditPanel().focus();\r\n                var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());\r\n                this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());\r\n                this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\r\n            }\r\n            var regex = /[\\w-]+.(jpg|png|jpeg|gif)/g;\r\n            var matchUrl = (!isNullOrUndefined(url.match(regex)) && proxy.parent.editorMode === 'HTML') ? url.match(regex)[0] : '';\r\n            var value = {\r\n                cssClass: (proxy.parent.insertImageSettings.display === 'inline' ? classes.CLS_IMGINLINE : classes.CLS_IMGBREAK),\r\n                url: url, selection: this.selection, altText: matchUrl,\r\n                selectParent: this.selectParent, width: {\r\n                    width: proxy.parent.insertImageSettings.width, minWidth: proxy.parent.insertImageSettings.minWidth,\r\n                    maxWidth: proxy.parent.insertImageSettings.maxWidth\r\n                },\r\n                height: {\r\n                    height: proxy.parent.insertImageSettings.height, minHeight: proxy.parent.insertImageSettings.minHeight,\r\n                    maxHeight: proxy.parent.insertImageSettings.maxHeight\r\n                }\r\n            };\r\n            proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, value);\r\n            proxy.dialogObj.hide({ returnValue: false });\r\n        }\r\n    };\r\n    Image.prototype.imgsizeInput = function (e) {\r\n        var selectNode = e.selectNode[0];\r\n        var imgHeight = this.i10n.getConstant('imageHeight');\r\n        var imgWidth = this.i10n.getConstant('imageWidth');\r\n        var imgSizeWrap = this.parent.createElement('div', { className: 'e-img-sizewrap' });\r\n        var widthVal = (selectNode.getAttribute('width') === 'auto' ||\r\n            isNullOrUndefined(selectNode.getAttribute('width'))) ? selectNode.width : selectNode.getClientRects()[0].width;\r\n        var heightVal = (selectNode.getAttribute('height') === 'auto' ||\r\n            isNullOrUndefined(selectNode.getAttribute('height'))) ? selectNode.height : selectNode.getClientRects()[0].height;\r\n        var content = '<div class=\"e-rte-label\"><label>' + imgWidth +\r\n            '</label></div><div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"imgwidth\" class=\"e-img-width\" value=' +\r\n            widthVal\r\n            + ' /></div>' +\r\n            '<div class=\"e-rte-label\">' + '<label>' + imgHeight + '</label></div><div class=\"e-rte-field\"> ' +\r\n            '<input type=\"text\" data-role =\"none\" id=\"imgheight\" class=\"e-img-height\" value=' +\r\n            heightVal\r\n            + ' /></div>';\r\n        var contentElem = parseHtml(content);\r\n        imgSizeWrap.appendChild(contentElem);\r\n        var widthNum = new NumericTextBox({\r\n            format: '###.### px', min: this.parent.insertImageSettings.minWidth,\r\n            max: this.parent.insertImageSettings.maxWidth,\r\n            enableRtl: this.parent.enableRtl, locale: this.parent.locale\r\n        });\r\n        widthNum.createElement = this.parent.createElement;\r\n        widthNum.appendTo(imgSizeWrap.querySelector('#imgwidth'));\r\n        var heightNum = new NumericTextBox({\r\n            format: '###.### px', min: this.parent.insertImageSettings.minHeight,\r\n            max: this.parent.insertImageSettings.maxHeight,\r\n            enableRtl: this.parent.enableRtl, locale: this.parent.locale\r\n        });\r\n        heightNum.createElement = this.parent.createElement;\r\n        heightNum.appendTo(imgSizeWrap.querySelector('#imgheight'));\r\n        return imgSizeWrap;\r\n    };\r\n    Image.prototype.insertSize = function (e) {\r\n        e.selection.restore();\r\n        var proxy = e.selfImage;\r\n        if (proxy.parent.formatter.getUndoRedoStack().length === 0) {\r\n            proxy.parent.formatter.saveData();\r\n        }\r\n        var dialogEle = proxy.dialogObj.element;\r\n        var width = parseFloat(dialogEle.querySelector('.e-img-width').value);\r\n        var height = parseFloat(dialogEle.parentElement.querySelector('.e-img-height').value);\r\n        proxy.parent.formatter.process(this.parent, e.args, e.args, {\r\n            width: width, height: height, selectNode: e.selectNode,\r\n            subCommand: e.args.item.subCommand\r\n        });\r\n        if (this.imgResizeDiv) {\r\n            proxy.imgResizePos(e.selectNode[0], this.imgResizeDiv);\r\n        }\r\n        proxy.dialogObj.hide({ returnValue: true });\r\n    };\r\n    Image.prototype.insertImage = function (e) {\r\n        this.imagDialog(e);\r\n        if (!isNullOrUndefined(this.dialogObj)) {\r\n            var dialogContent = this.parent.createElement('div', { className: 'e-img-content' });\r\n            if ((!isNullOrUndefined(this.parent.insertImageSettings.path) && this.parent.editorMode === 'Markdown')\r\n                || this.parent.editorMode === 'HTML') {\r\n                dialogContent.appendChild(this.imgUpload(e));\r\n            }\r\n            var linkHeader = this.parent.createElement('div', { className: 'e-linkheader' });\r\n            var linkHeaderText = this.i10n.getConstant('imageLinkHeader');\r\n            if (this.parent.editorMode === 'HTML') {\r\n                linkHeader.innerHTML = linkHeaderText;\r\n            }\r\n            else {\r\n                linkHeader.innerHTML = this.i10n.getConstant('mdimageLink');\r\n            }\r\n            dialogContent.appendChild(linkHeader);\r\n            dialogContent.appendChild(this.imageUrlPopup(e));\r\n            if (e.selectNode && e.selectNode[0].nodeName === 'IMG') {\r\n                this.dialogObj.setProperties({\r\n                    header: this.parent.localeObj.getConstant('editImageHeader'), content: dialogContent\r\n                });\r\n                this.dialogObj.element.querySelector('.e-insertImage').textContent = this.parent.localeObj.getConstant('dialogUpdate');\r\n            }\r\n            else {\r\n                this.dialogObj.setProperties({ content: dialogContent }, false);\r\n            }\r\n            this.dialogObj.element.style.maxHeight = 'none';\r\n            if ((!isNullOrUndefined(this.parent.insertImageSettings.path) && this.parent.editorMode === 'Markdown')\r\n                || this.parent.editorMode === 'HTML') {\r\n                dialogContent.querySelector('#' + this.rteID + '_insertImage').focus();\r\n            }\r\n            else {\r\n                dialogContent.querySelector('.e-img-url').focus();\r\n            }\r\n        }\r\n    };\r\n    Image.prototype.imgUpload = function (e) {\r\n        var _this = this;\r\n        var save;\r\n        var selectParent;\r\n        var proxy = this;\r\n        if (proxy.parent.editorMode === 'HTML' &&\r\n            isNullOrUndefined(closest(e.selection.range.startContainer.parentNode, '#' + this.contentModule.getPanel().id))) {\r\n            this.contentModule.getEditPanel().focus();\r\n            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\r\n            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());\r\n            selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\r\n        }\r\n        else {\r\n            save = e.selection;\r\n            selectParent = e.selectParent;\r\n        }\r\n        var uploadParentEle = this.parent.createElement('div', { className: 'e-img-uploadwrap e-droparea' });\r\n        var deviceImgUpMsg = this.i10n.getConstant('imageDeviceUploadMessage');\r\n        var imgUpMsg = this.i10n.getConstant('imageUploadMessage');\r\n        var span = this.parent.createElement('span', { className: 'e-droptext' });\r\n        var spanMsg = this.parent.createElement('span', {\r\n            className: 'e-rte-upload-text',\r\n            innerHTML: ((Browser.isDevice) ? deviceImgUpMsg : imgUpMsg)\r\n        });\r\n        span.appendChild(spanMsg);\r\n        var btnEle = this.parent.createElement('button', {\r\n            className: 'e-browsebtn', id: this.rteID + '_insertImage',\r\n            attrs: { autofocus: 'true', type: 'button' }\r\n        });\r\n        span.appendChild(btnEle);\r\n        uploadParentEle.appendChild(span);\r\n        var browserMsg = this.i10n.getConstant('browse');\r\n        var button = new Button({ content: browserMsg, enableRtl: this.parent.enableRtl });\r\n        button.createElement = this.parent.createElement;\r\n        button.appendTo(btnEle);\r\n        var btnClick = (Browser.isDevice) ? span : btnEle;\r\n        EventHandler.add(btnClick, 'click', this.fileSelect, this);\r\n        var uploadEle = this.parent.createElement('input', {\r\n            id: this.rteID + '_upload', attrs: { type: 'File', name: 'UploadFiles' }\r\n        });\r\n        uploadParentEle.appendChild(uploadEle);\r\n        var altText;\r\n        this.uploadObj = new Uploader({\r\n            asyncSettings: {\r\n                saveUrl: this.parent.insertImageSettings.saveUrl,\r\n            },\r\n            dropArea: span,\r\n            multiple: false,\r\n            enableRtl: this.parent.enableRtl,\r\n            allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),\r\n            selected: function (e) {\r\n                altText = e.filesData[0].name;\r\n                if (_this.parent.editorMode === 'HTML' && isNullOrUndefined(_this.parent.insertImageSettings.path)) {\r\n                    var reader_1 = new FileReader();\r\n                    reader_1.addEventListener('load', function (e) {\r\n                        var url = URL.createObjectURL(proxy.url(reader_1.result));\r\n                        proxy.uploadUrl = {\r\n                            url: url, selection: save, altText: altText, selectParent: selectParent,\r\n                            width: {\r\n                                width: proxy.parent.insertImageSettings.width, minWidth: proxy.parent.insertImageSettings.minWidth,\r\n                                maxWidth: proxy.parent.insertImageSettings.maxWidth\r\n                            },\r\n                            height: {\r\n                                height: proxy.parent.insertImageSettings.height, minHeight: proxy.parent.insertImageSettings.minHeight,\r\n                                maxHeight: proxy.parent.insertImageSettings.maxHeight\r\n                            }\r\n                        };\r\n                        proxy.inputUrl.setAttribute('disabled', 'true');\r\n                    });\r\n                    reader_1.readAsDataURL(e.filesData[0].rawFile);\r\n                }\r\n            },\r\n            success: function (e) {\r\n                if (!isNullOrUndefined(_this.parent.insertImageSettings.path)) {\r\n                    var url = _this.parent.insertImageSettings.path + e.file.name;\r\n                    var value = { url: url, selection: save };\r\n                    proxy.uploadUrl = {\r\n                        url: url, selection: save, altText: altText, selectParent: selectParent,\r\n                        width: {\r\n                            width: proxy.parent.insertImageSettings.width, minWidth: proxy.parent.insertImageSettings.minWidth,\r\n                            maxWidth: proxy.parent.insertImageSettings.maxWidth\r\n                        },\r\n                        height: {\r\n                            height: proxy.parent.insertImageSettings.height, minHeight: proxy.parent.insertImageSettings.minHeight,\r\n                            maxHeight: proxy.parent.insertImageSettings.maxHeight\r\n                        }\r\n                    };\r\n                    proxy.inputUrl.setAttribute('disabled', 'true');\r\n                }\r\n            },\r\n            removing: function () {\r\n                proxy.inputUrl.removeAttribute('disabled');\r\n                proxy.uploadUrl.url = '';\r\n            }\r\n        });\r\n        this.uploadObj.createElement = this.parent.createElement;\r\n        this.uploadObj.appendTo(uploadEle);\r\n        return uploadParentEle;\r\n    };\r\n    Image.prototype.fileSelect = function () {\r\n        document.body.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();\r\n        return false;\r\n    };\r\n    Image.prototype.imagePaste = function (args) {\r\n        if (args.text.length === 0) {\r\n            var proxy_1 = this;\r\n            var reader_2 = new FileReader();\r\n            args.args.preventDefault();\r\n            reader_2.addEventListener('load', function (e) {\r\n                var url = {\r\n                    cssClass: (proxy_1.parent.insertImageSettings.display === 'inline' ? classes.CLS_IMGINLINE : classes.CLS_IMGBREAK),\r\n                    url: URL.createObjectURL(proxy_1.url(reader_2.result)),\r\n                    width: {\r\n                        width: proxy_1.parent.insertImageSettings.width, minWidth: proxy_1.parent.insertImageSettings.minWidth,\r\n                        maxWidth: proxy_1.parent.insertImageSettings.maxWidth\r\n                    },\r\n                    height: {\r\n                        height: proxy_1.parent.insertImageSettings.height, minHeight: proxy_1.parent.insertImageSettings.minHeight,\r\n                        maxHeight: proxy_1.parent.insertImageSettings.maxHeight\r\n                    }\r\n                };\r\n                proxy_1.parent.formatter.process(proxy_1.parent, { item: { command: 'Images', subCommand: 'Image' } }, args.args, url);\r\n            });\r\n            reader_2.readAsDataURL(args.file);\r\n        }\r\n    };\r\n    Image.prototype.url = function (dataurl) {\r\n        var arr = dataurl.split(',');\r\n        var mime = arr[0].match(/:(.*?);/)[1];\r\n        var bstr = atob(arr[1]);\r\n        var n = bstr.length;\r\n        var u8arr = new Uint8Array(n);\r\n        while (n--) {\r\n            u8arr[n] = bstr.charCodeAt(n);\r\n        }\r\n        return new Blob([u8arr], { type: mime });\r\n    };\r\n    /**\r\n     * Destroys the ToolBar.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    Image.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    /**\r\n     * For internal use only - Get the module name.\r\n     */\r\n    Image.prototype.getModuleName = function () {\r\n        return 'image';\r\n    };\r\n    return Image;\r\n}());\r\nexport { Image };\r\n",null]}