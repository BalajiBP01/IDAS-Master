{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\popup-renderer.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\popup-renderer.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { Popup } from '@syncfusion/ej2-popups';\r\nimport { CLS_QUICK_POP } from '../base/classes';\r\nimport { popupOpen } from '../base/constant';\r\n/**\r\n * `Popup renderer` module is used to render popup in RichTextEditor.\r\n * @hidden\r\n */\r\nvar PopupRenderer = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for popup renderer module\r\n     */\r\n    function PopupRenderer(parent) {\r\n        this.parent = parent;\r\n    }\r\n    PopupRenderer.prototype.popupOpen = function () {\r\n        this.parent.notify(popupOpen, this);\r\n    };\r\n    PopupRenderer.prototype.renderPopup = function (args) {\r\n        this.setPanel(args.element);\r\n        this.renderPanel();\r\n        args.popupObj = new Popup(args.element, {\r\n            targetType: 'relative',\r\n            relateTo: this.parent.element,\r\n            open: this.popupOpen.bind(this)\r\n        });\r\n        this.popupObj = args.popupObj;\r\n        args.popupObj.hide();\r\n    };\r\n    /**\r\n     * The function is used to add popup class in Quick Toolbar\r\n     */\r\n    PopupRenderer.prototype.renderPanel = function () {\r\n        this.getPanel().classList.add(CLS_QUICK_POP);\r\n    };\r\n    /**\r\n     * Get the popup element of RichTextEditor\r\n     * @return {Element}\r\n     */\r\n    PopupRenderer.prototype.getPanel = function () {\r\n        return this.popupPanel;\r\n    };\r\n    /**\r\n     * Set the popup element of RichTextEditor\r\n     * @param  {Element} panel\r\n     */\r\n    PopupRenderer.prototype.setPanel = function (panel) {\r\n        this.popupPanel = panel;\r\n    };\r\n    return PopupRenderer;\r\n}());\r\nexport { PopupRenderer };\r\n",null]}