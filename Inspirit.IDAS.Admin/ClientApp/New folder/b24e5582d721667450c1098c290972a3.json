{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\dropdown-buttons.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\dropdown-buttons.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import { addClass, isNullOrUndefined, removeClass, select, closest } from '@syncfusion/ej2-base';\r\nimport { RenderType } from '../base/enum';\r\nimport { getIndex } from '../base/util';\r\nimport * as events from '../base/constant';\r\nimport * as classes from '../base/classes';\r\nimport { getDropDownValue, getFormattedFontSize, getTooltipText } from '../base/util';\r\nimport * as model from '../models/items';\r\nimport { dispatchEvent } from '../base/util';\r\n/**\r\n * `Toolbar` module is used to handle Toolbar actions.\r\n */\r\nvar DropDownButtons = /*@__PURE__*/ (function () {\r\n    function DropDownButtons(parent, serviceLocator) {\r\n        this.parent = parent;\r\n        this.locator = serviceLocator;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        this.addEventListener();\r\n    }\r\n    DropDownButtons.prototype.initializeInstance = function () {\r\n        this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);\r\n    };\r\n    DropDownButtons.prototype.beforeRender = function (args) {\r\n        var item = args.item;\r\n        if (item.cssClass) {\r\n            addClass([args.element], item.cssClass);\r\n        }\r\n        if (item.command === 'Alignments' || item.subCommand === 'JustifyLeft'\r\n            || item.subCommand === 'JustifyRight' || item.subCommand === 'JustifyCenter') {\r\n            args.element.setAttribute('title', getTooltipText(item.subCommand.toLocaleLowerCase(), this.locator));\r\n        }\r\n    };\r\n    DropDownButtons.prototype.dropdownContent = function (width, type, content) {\r\n        return ('<span style=\"display: inline-flex;' + 'width:' + ((type === 'quick') ? 'auto' : width) + '\" >' +\r\n            '<span class=\"e-rte-dropdown-btn-text\">' + content + '</span></span>');\r\n    };\r\n    DropDownButtons.prototype.renderDropDowns = function (args) {\r\n        var _this = this;\r\n        this.initializeInstance();\r\n        var type = args.containerType;\r\n        var tbElement = args.container;\r\n        model.templateItems.forEach(function (item) {\r\n            var targetElement = undefined;\r\n            if (getIndex(item, args.items) !== -1) {\r\n                switch (item) {\r\n                    case 'formats':\r\n                        targetElement = select('#' + _this.parent.getID() + '_' + type + '_Formats', tbElement);\r\n                        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n                            return;\r\n                        }\r\n                        var formatItem = _this.parent.format.types.slice();\r\n                        formatItem.forEach(function (item) {\r\n                            Object.defineProperties(item, {\r\n                                command: { value: 'Formats', enumerable: true }, subCommand: { value: item.value, enumerable: true }\r\n                            });\r\n                        });\r\n                        var formatContent = isNullOrUndefined(_this.parent.format.default) ? formatItem[0].text :\r\n                            _this.parent.format.default;\r\n                        _this.formatDropDown = _this.toolbarRenderer.renderDropDownButton({\r\n                            iconCss: ((type === 'quick') ? 'e-formats e-icons' : ''),\r\n                            content: _this.dropdownContent(_this.parent.format.width, type, ((type === 'quick') ? '' : getDropDownValue(formatItem, formatContent, 'text', 'text'))),\r\n                            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ITEMS + ' ' + classes.CLS_FORMATS_TB_BTN,\r\n                            itemName: 'Formats', items: formatItem, element: targetElement\r\n                        });\r\n                        break;\r\n                    case 'fontname':\r\n                        targetElement = select('#' + _this.parent.getID() + '_' + type + '_FontName', tbElement);\r\n                        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n                            return;\r\n                        }\r\n                        var fontItem = _this.parent.fontFamily.items.slice();\r\n                        fontItem.forEach(function (item) {\r\n                            Object.defineProperties(item, {\r\n                                command: { value: 'Font', enumerable: true }, subCommand: { value: 'FontName', enumerable: true }\r\n                            });\r\n                        });\r\n                        var fontNameContent = isNullOrUndefined(_this.parent.fontFamily.default) ? fontItem[0].text :\r\n                            _this.parent.fontFamily.default;\r\n                        _this.fontNameDropDown = _this.toolbarRenderer.renderDropDownButton({\r\n                            iconCss: ((type === 'quick') ? 'e-font-name e-icons' : ''),\r\n                            content: _this.dropdownContent(_this.parent.fontFamily.width, type, ((type === 'quick') ? '' : getDropDownValue(fontItem, fontNameContent, 'text', 'text'))),\r\n                            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ITEMS + ' ' + classes.CLS_FONT_NAME_TB_BTN,\r\n                            itemName: 'FontName', items: fontItem, element: targetElement\r\n                        });\r\n                        if (!isNullOrUndefined(_this.parent.fontFamily.default)) {\r\n                            _this.getEditNode().style.fontFamily = _this.parent.fontFamily.default;\r\n                        }\r\n                        break;\r\n                    case 'fontsize':\r\n                        targetElement = select('#' + _this.parent.getID() + '_' + type + '_FontSize', tbElement);\r\n                        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n                            return;\r\n                        }\r\n                        var fontsize = _this.parent.fontSize.items.slice();\r\n                        fontsize.forEach(function (item) {\r\n                            Object.defineProperties(item, {\r\n                                command: { value: 'Font', enumerable: true }, subCommand: { value: 'FontSize', enumerable: true }\r\n                            });\r\n                        });\r\n                        var fontSizeContent = isNullOrUndefined(_this.parent.fontSize.default) ? fontsize[1].text :\r\n                            _this.parent.fontSize.default;\r\n                        _this.fontSizeDropDown = _this.toolbarRenderer.renderDropDownButton({\r\n                            content: _this.dropdownContent(_this.parent.fontSize.width, type, getFormattedFontSize(getDropDownValue(fontsize, fontSizeContent.replace(/\\s/g, ''), 'value', 'text'))),\r\n                            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ITEMS + ' ' + classes.CLS_FONT_SIZE_TB_BTN,\r\n                            itemName: 'FontSize', items: fontsize, element: targetElement\r\n                        });\r\n                        if (!isNullOrUndefined(_this.parent.fontSize.default)) {\r\n                            _this.getEditNode().style.fontSize = _this.parent.fontSize.default;\r\n                        }\r\n                        break;\r\n                    case 'alignments':\r\n                        targetElement = select('#' + _this.parent.getID() + '_' + type + '_Alignments', tbElement);\r\n                        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n                            return;\r\n                        }\r\n                        _this.alignDropDown = _this.toolbarRenderer.renderDropDownButton({\r\n                            iconCss: 'e-justify-left e-icons',\r\n                            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ITEMS,\r\n                            itemName: 'Alignments', items: model.alignmentItems, element: targetElement\r\n                        });\r\n                        break;\r\n                    case 'align':\r\n                        _this.imageAlignmentDropDown(type, tbElement, targetElement);\r\n                        break;\r\n                    case 'display':\r\n                        _this.imageDisplayDropDown(type, tbElement, targetElement);\r\n                        break;\r\n                    case 'tablerows':\r\n                        _this.rowDropDown(type, tbElement, targetElement);\r\n                        break;\r\n                    case 'tablecolumns':\r\n                        _this.columnDropDown(type, tbElement, targetElement);\r\n                        break;\r\n                    case 'tablecellverticalalign':\r\n                        _this.verticalAlignDropDown(type, tbElement, targetElement);\r\n                        break;\r\n                    case 'styles':\r\n                        _this.tableStylesDropDown(type, tbElement, targetElement);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    DropDownButtons.prototype.getUpdateItems = function (items, value) {\r\n        var dropDownItems = items.slice();\r\n        dropDownItems.forEach(function (item) {\r\n            Object.defineProperties(item, {\r\n                command: { value: (value === 'Format' ? 'Formats' : 'Font'), enumerable: true },\r\n                subCommand: { value: (value === 'Format' ? item.value : value), enumerable: true }\r\n            });\r\n        });\r\n        return dropDownItems;\r\n    };\r\n    DropDownButtons.prototype.onPropertyChanged = function (model) {\r\n        var newProp = model.newProp;\r\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\r\n            var prop = _a[_i];\r\n            switch (prop) {\r\n                case 'fontFamily':\r\n                    if (this.fontNameDropDown) {\r\n                        for (var _b = 0, _c = Object.keys(newProp.fontFamily); _b < _c.length; _b++) {\r\n                            var fontFamily = _c[_b];\r\n                            switch (fontFamily) {\r\n                                case 'default':\r\n                                case 'width':\r\n                                    var fontItems = this.fontNameDropDown.items;\r\n                                    var type = !isNullOrUndefined(closest(this.fontNameDropDown.element, '.' + classes.CLS_QUICK_TB)) ?\r\n                                        'quick' : 'toolbar';\r\n                                    var fontNameContent = isNullOrUndefined(this.parent.fontFamily.default) ? fontItems[0].text :\r\n                                        this.parent.fontFamily.default;\r\n                                    var content = this.dropdownContent(this.parent.fontFamily.width, type, ((type === 'quick') ? '' :\r\n                                        getDropDownValue(fontItems, fontNameContent, 'text', 'text')));\r\n                                    this.fontNameDropDown.setProperties({ content: content });\r\n                                    if (!isNullOrUndefined(this.parent.fontFamily.default)) {\r\n                                        this.getEditNode().style.fontFamily = this.parent.fontFamily.default;\r\n                                    }\r\n                                    else {\r\n                                        this.getEditNode().style.removeProperty('font-family');\r\n                                    }\r\n                                    break;\r\n                                case 'items':\r\n                                    this.fontNameDropDown.setProperties({\r\n                                        items: this.getUpdateItems(newProp.fontFamily.items, 'FontSize')\r\n                                    });\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'fontSize':\r\n                    if (this.fontSizeDropDown) {\r\n                        for (var _d = 0, _e = Object.keys(newProp.fontSize); _d < _e.length; _d++) {\r\n                            var fontSize = _e[_d];\r\n                            switch (fontSize) {\r\n                                case 'default':\r\n                                case 'width':\r\n                                    var fontsize = this.fontSizeDropDown.items;\r\n                                    var type = !isNullOrUndefined(closest(this.fontSizeDropDown.element, '.' + classes.CLS_QUICK_TB)) ? 'quick' : 'toolbar';\r\n                                    var fontSizeContent = isNullOrUndefined(this.parent.fontSize.default) ? fontsize[1].text :\r\n                                        this.parent.fontSize.default;\r\n                                    var content = this.dropdownContent(this.parent.fontSize.width, type, getFormattedFontSize(getDropDownValue(fontsize, fontSizeContent.replace(/\\s/g, ''), 'value', 'text')));\r\n                                    this.fontSizeDropDown.setProperties({ content: content });\r\n                                    if (!isNullOrUndefined(this.parent.fontSize.default)) {\r\n                                        this.getEditNode().style.fontSize = this.parent.fontSize.default;\r\n                                    }\r\n                                    else {\r\n                                        this.getEditNode().style.removeProperty('font-size');\r\n                                    }\r\n                                    break;\r\n                                case 'items':\r\n                                    this.fontSizeDropDown.setProperties({\r\n                                        items: this.getUpdateItems(newProp.fontSize.items, 'FontSize')\r\n                                    });\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'format':\r\n                    if (this.formatDropDown) {\r\n                        for (var _f = 0, _g = Object.keys(newProp.format); _f < _g.length; _f++) {\r\n                            var format = _g[_f];\r\n                            switch (format) {\r\n                                case 'default':\r\n                                case 'width':\r\n                                    var formatItems = this.formatDropDown.items;\r\n                                    var type = !isNullOrUndefined(closest(this.formatDropDown.element, '.' + classes.CLS_QUICK_TB)) ? 'quick' : 'toolbar';\r\n                                    var formatContent = isNullOrUndefined(this.parent.format.default) ? formatItems[0].text :\r\n                                        this.parent.format.default;\r\n                                    var content = this.dropdownContent(this.parent.format.width, type, ((type === 'quick') ? '' :\r\n                                        getDropDownValue(formatItems, formatContent, 'text', 'text')));\r\n                                    this.formatDropDown.setProperties({ content: content });\r\n                                    break;\r\n                                case 'types':\r\n                                    this.formatDropDown.setProperties({\r\n                                        items: this.getUpdateItems(newProp.format.types, 'Format')\r\n                                    });\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    DropDownButtons.prototype.getEditNode = function () {\r\n        return this.parent.contentModule.getEditPanel();\r\n    };\r\n    DropDownButtons.prototype.rowDropDown = function (type, tbElement, targetElement) {\r\n        targetElement = select('#' + this.parent.getID() + '_' + type + '_TableRows', tbElement);\r\n        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n            return;\r\n        }\r\n        this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({\r\n            iconCss: 'e-table-rows e-icons',\r\n            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ITEMS + ' ' + classes.CLS_QUICK_DROPDOWN,\r\n            itemName: 'TableRows',\r\n            items: model.tableRowsItems,\r\n            element: targetElement\r\n        });\r\n    };\r\n    DropDownButtons.prototype.columnDropDown = function (type, tbElement, targetElement) {\r\n        targetElement = select('#' + this.parent.getID() + '_' + type + '_TableColumns', tbElement);\r\n        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n            return;\r\n        }\r\n        this.tableColumnsDropDown = this.toolbarRenderer.renderDropDownButton({\r\n            iconCss: 'e-table-columns e-icons',\r\n            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ITEMS + ' ' + classes.CLS_QUICK_DROPDOWN,\r\n            itemName: 'TableColumns',\r\n            items: model.tableColumnsItems,\r\n            element: targetElement\r\n        });\r\n    };\r\n    DropDownButtons.prototype.verticalAlignDropDown = function (type, tbElement, targetElement) {\r\n        targetElement = select('#' + this.parent.getID() + '_' + type + '_TableCellVerticalAlign', tbElement);\r\n        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n            return;\r\n        }\r\n        this.tableCellVerticalAlignDropDown = this.toolbarRenderer.renderDropDownButton({\r\n            iconCss: 'e-table-cell-ver-align e-icons',\r\n            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ITEMS + ' ' + classes.CLS_QUICK_DROPDOWN,\r\n            itemName: 'TableCellVerticalAlign',\r\n            items: model.TableCellVerticalAlignItems,\r\n            element: targetElement\r\n        });\r\n    };\r\n    DropDownButtons.prototype.imageDisplayDropDown = function (type, tbElement, targetElement) {\r\n        targetElement = select('#' + this.parent.getID() + '_' + type + '_Display', tbElement);\r\n        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n            return;\r\n        }\r\n        this.displayDropDown = this.toolbarRenderer.renderDropDownButton({\r\n            iconCss: 'e-display e-icons',\r\n            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ITEMS + ' ' + classes.CLS_QUICK_DROPDOWN,\r\n            itemName: 'Display',\r\n            items: model.imageDisplayItems,\r\n            element: targetElement\r\n        });\r\n    };\r\n    DropDownButtons.prototype.imageAlignmentDropDown = function (type, tbElement, targetElement) {\r\n        targetElement = select('#' + this.parent.getID() + '_' + type + '_Align', tbElement);\r\n        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n            return;\r\n        }\r\n        this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({\r\n            iconCss: 'e-justify-left e-icons',\r\n            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ICONS + ' ' + classes.CLS_QUICK_DROPDOWN,\r\n            itemName: 'Align',\r\n            items: model.imageAlignItems,\r\n            element: targetElement\r\n        });\r\n    };\r\n    DropDownButtons.prototype.tableStylesDropDown = function (type, tbElement, targetElement) {\r\n        targetElement = select('#' + this.parent.getID() + '_' + type + '_Styles', tbElement);\r\n        if (targetElement.classList.contains(classes.CLS_DROPDOWN_BTN)) {\r\n            return;\r\n        }\r\n        this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({\r\n            iconCss: 'e-style e-icons',\r\n            cssClass: classes.CLS_DROPDOWN_POPUP + ' ' + classes.CLS_DROPDOWN_ICONS + ' ' + classes.CLS_QUICK_DROPDOWN,\r\n            itemName: 'Styles',\r\n            items: this.parent.tableSettings.styles,\r\n            element: targetElement\r\n        });\r\n    };\r\n    DropDownButtons.prototype.removeDropDownClasses = function (target) {\r\n        removeClass([target], [\r\n            classes.CLS_DROPDOWN_BTN,\r\n            classes.CLS_DROPDOWN_POPUP,\r\n            classes.CLS_DROPDOWN_ICONS,\r\n            classes.CLS_DROPDOWN_ITEMS\r\n        ]);\r\n    };\r\n    DropDownButtons.prototype.destroyDropDowns = function () {\r\n        if (this.formatDropDown) {\r\n            this.removeDropDownClasses(this.formatDropDown.element);\r\n            this.formatDropDown.destroy();\r\n        }\r\n        if (this.fontNameDropDown) {\r\n            this.removeDropDownClasses(this.fontNameDropDown.element);\r\n            this.fontNameDropDown.destroy();\r\n        }\r\n        if (this.fontSizeDropDown) {\r\n            this.removeDropDownClasses(this.fontSizeDropDown.element);\r\n            this.fontSizeDropDown.destroy();\r\n        }\r\n        if (this.alignDropDown) {\r\n            this.removeDropDownClasses(this.alignDropDown.element);\r\n            this.alignDropDown.destroy();\r\n        }\r\n        if (this.imageAlignDropDown) {\r\n            this.removeDropDownClasses(this.imageAlignDropDown.element);\r\n            this.imageAlignDropDown.destroy();\r\n        }\r\n        if (this.displayDropDown) {\r\n            this.removeDropDownClasses(this.displayDropDown.element);\r\n            this.displayDropDown.destroy();\r\n        }\r\n        if (this.tableRowsDropDown) {\r\n            this.removeDropDownClasses(this.tableRowsDropDown.element);\r\n            this.tableRowsDropDown.destroy();\r\n        }\r\n        if (this.tableColumnsDropDown) {\r\n            this.removeDropDownClasses(this.tableColumnsDropDown.element);\r\n            this.tableColumnsDropDown.destroy();\r\n        }\r\n        if (this.tableCellVerticalAlignDropDown) {\r\n            this.removeDropDownClasses(this.tableCellVerticalAlignDropDown.element);\r\n            this.tableCellVerticalAlignDropDown.destroy();\r\n        }\r\n    };\r\n    DropDownButtons.prototype.setRtl = function (args) {\r\n        if (this.formatDropDown) {\r\n            this.formatDropDown.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n        if (this.fontNameDropDown) {\r\n            this.fontNameDropDown.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n        if (this.fontSizeDropDown) {\r\n            this.fontSizeDropDown.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n        if (this.alignDropDown) {\r\n            this.alignDropDown.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n        if (this.imageAlignDropDown) {\r\n            this.imageAlignDropDown.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n        if (this.displayDropDown) {\r\n            this.displayDropDown.setProperties({ enableRtl: args.enableRtl });\r\n        }\r\n    };\r\n    DropDownButtons.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.on(events.beforeDropDownItemRender, this.beforeRender, this);\r\n        this.parent.on(events.iframeMouseDown, this.onIframeMouseDown, this);\r\n        this.parent.on(events.rtlMode, this.setRtl, this);\r\n        this.parent.on(events.destroy, this.removeEventListener, this);\r\n        this.parent.on(events.modelChanged, this.onPropertyChanged, this);\r\n    };\r\n    DropDownButtons.prototype.onIframeMouseDown = function () {\r\n        dispatchEvent(document, 'mousedown');\r\n    };\r\n    DropDownButtons.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.iframeMouseDown, this.onIframeMouseDown);\r\n        this.parent.off(events.rtlMode, this.setRtl);\r\n        this.parent.off(events.beforeDropDownItemRender, this.beforeRender);\r\n        this.parent.off(events.destroy, this.removeEventListener);\r\n        this.parent.off(events.modelChanged, this.onPropertyChanged);\r\n    };\r\n    return DropDownButtons;\r\n}());\r\nexport { DropDownButtons };\r\n",null]}