{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\inserthtml.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\inserthtml.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { NodeSelection } from './../../selection/index';\r\nimport { NodeCutter } from './nodecutter';\r\nimport * as CONSTANT from './../base/constant';\r\nimport { InsertMethods } from './insert-methods';\r\n/**\r\n * Insert a HTML Node or Text\r\n * @hidden\r\n */\r\nvar InsertHtml = /*@__PURE__*/ (function () {\r\n    function InsertHtml() {\r\n    }\r\n    InsertHtml.Insert = function (docElement, insertNode, editNode) {\r\n        var node;\r\n        if (typeof insertNode === 'string') {\r\n            var divNode = document.createElement('div');\r\n            divNode.innerHTML = insertNode;\r\n            node = divNode.firstChild;\r\n        }\r\n        else {\r\n            node = insertNode;\r\n        }\r\n        var nodeSelection = new NodeSelection();\r\n        var nodeCutter = new NodeCutter();\r\n        var range = nodeSelection.getRange(docElement);\r\n        var isCollapsed = range.collapsed;\r\n        var nodes = nodeSelection.getInsertNodeCollection(range);\r\n        var closestParentNode = (node.nodeName.toLowerCase() === 'table') ? this.closestEle(nodes[0].parentNode, editNode) : nodes[0];\r\n        if ((!isCollapsed && !(closestParentNode.nodeType === Node.ELEMENT_NODE &&\r\n            CONSTANT.TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) !== -1))\r\n            || (node.nodeName.toLowerCase() === 'table' && closestParentNode &&\r\n                CONSTANT.TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) === -1)) {\r\n            var preNode = nodeCutter.GetSpliceNode(range, closestParentNode);\r\n            var sibNode = preNode.previousSibling;\r\n            var parentNode = preNode.parentNode;\r\n            if (nodes.length === 1) {\r\n                nodeSelection.setSelectionContents(docElement, preNode);\r\n                range = nodeSelection.getRange(docElement);\r\n            }\r\n            else {\r\n                var lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1]);\r\n                nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, (lasNode.nodeType === 3) ?\r\n                    lasNode.textContent.length : lasNode.childNodes.length);\r\n                range = nodeSelection.getRange(docElement);\r\n            }\r\n            range.extractContents();\r\n            for (var index = 0; index < nodes.length; index++) {\r\n                if (nodes[index].nodeType !== 3 && nodes[index].parentNode != null) {\r\n                    nodes[index].parentNode.removeChild(nodes[index]);\r\n                }\r\n            }\r\n            if (sibNode) {\r\n                InsertMethods.AppendBefore(node, sibNode, true);\r\n            }\r\n            else {\r\n                if (parentNode.firstChild) {\r\n                    InsertMethods.AppendBefore(node, parentNode.firstChild, false);\r\n                }\r\n                else {\r\n                    parentNode.appendChild(node);\r\n                }\r\n            }\r\n            if (node.nodeType !== 3) {\r\n                nodeSelection.setSelectionText(docElement, node, node, 0, node.childNodes.length);\r\n            }\r\n            else {\r\n                nodeSelection.setSelectionText(docElement, node, node, 0, node.textContent.length);\r\n            }\r\n        }\r\n        else {\r\n            range.deleteContents();\r\n            range.insertNode(node);\r\n            if (node.nodeType !== 3 && node.childNodes.length > 0) {\r\n                nodeSelection.setSelectionText(docElement, node, node, 1, 1);\r\n            }\r\n            else if (node.nodeType !== 3) {\r\n                nodeSelection.setSelectionContents(docElement, node);\r\n            }\r\n            else {\r\n                nodeSelection.setSelectionText(docElement, node, node, node.textContent.length, node.textContent.length);\r\n            }\r\n        }\r\n    };\r\n    InsertHtml.closestEle = function (element, editNode) {\r\n        var el = element;\r\n        while (el && el.nodeType === 1) {\r\n            if (el.parentNode === editNode ||\r\n                CONSTANT.IGNORE_BLOCK_TAGS.indexOf(el.parentNode.tagName.toLocaleLowerCase()) !== -1) {\r\n                return el;\r\n            }\r\n            el = el.parentNode;\r\n        }\r\n        return null;\r\n    };\r\n    return InsertHtml;\r\n}());\r\nexport { InsertHtml };\r\n",null]}