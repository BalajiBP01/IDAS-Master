{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\markdown-selection.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\markdown-selection.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\r\n * MarkdownSelection internal module\r\n * @hidden\r\n */\r\nvar MarkdownSelection = /*@__PURE__*/ (function () {\r\n    function MarkdownSelection() {\r\n    }\r\n    MarkdownSelection.prototype.getLineNumber = function (textarea, point) {\r\n        return textarea.value.substr(0, point).split('\\n').length;\r\n    };\r\n    MarkdownSelection.prototype.getSelectedText = function (textarea) {\r\n        var start = textarea.selectionStart;\r\n        var end = textarea.selectionEnd;\r\n        return textarea.value.substring(start, end);\r\n    };\r\n    MarkdownSelection.prototype.getAllParents = function (value) {\r\n        return value.split('\\n');\r\n    };\r\n    MarkdownSelection.prototype.getSelectedLine = function (textarea) {\r\n        var lines = this.getAllParents(textarea.value);\r\n        var index = this.getLineNumber(textarea, textarea.selectionStart);\r\n        return lines[index - 1];\r\n    };\r\n    MarkdownSelection.prototype.getLine = function (textarea, index) {\r\n        var lines = this.getAllParents(textarea.value);\r\n        return lines[index];\r\n    };\r\n    MarkdownSelection.prototype.getSelectedParentPoints = function (textarea) {\r\n        var lines = this.getAllParents(textarea.value);\r\n        var start = this.getLineNumber(textarea, textarea.selectionStart);\r\n        var end = this.getLineNumber(textarea, textarea.selectionEnd);\r\n        var parents = this.getSelectedText(textarea).split('\\n');\r\n        var selectedPoints = [];\r\n        var selectedLine = lines[start - 1];\r\n        var startLength = lines.slice(0, start - 1).join('').length;\r\n        var firstPoint = {};\r\n        firstPoint.line = start - 1;\r\n        firstPoint.start = startLength + firstPoint.line;\r\n        firstPoint.end = selectedLine !== '' ? firstPoint.start +\r\n            selectedLine.length + 1 : firstPoint.start + selectedLine.length;\r\n        firstPoint.text = selectedLine;\r\n        selectedPoints.push(firstPoint);\r\n        if (parents.length > 1) {\r\n            for (var i = 1; i < parents.length - 1; i++) {\r\n                var points = {};\r\n                points.line = selectedPoints[i - 1].line + 1;\r\n                points.start = parents[i] !== '' ? selectedPoints[i - 1].end : selectedPoints[i - 1].end;\r\n                points.end = points.start + parents[i].length + 1;\r\n                points.text = parents[i];\r\n                selectedPoints.push(points);\r\n            }\r\n            var lastPoint = {};\r\n            lastPoint.line = selectedPoints[selectedPoints.length - 1].line + 1;\r\n            lastPoint.start = selectedPoints[selectedPoints.length - 1].end;\r\n            lastPoint.end = lastPoint.start + lines[end - 1].length + 1;\r\n            lastPoint.text = lines[end - 1];\r\n            selectedPoints.push(lastPoint);\r\n        }\r\n        return selectedPoints;\r\n    };\r\n    MarkdownSelection.prototype.setSelection = function (textarea, start, end) {\r\n        textarea.setSelectionRange(start, end);\r\n        textarea.focus();\r\n    };\r\n    MarkdownSelection.prototype.save = function (start, end) {\r\n        this.selectionStart = start;\r\n        this.selectionEnd = end;\r\n    };\r\n    MarkdownSelection.prototype.restore = function (textArea) {\r\n        this.setSelection(textArea, this.selectionStart, this.selectionEnd);\r\n    };\r\n    MarkdownSelection.prototype.isStartWith = function (line, command) {\r\n        var isStart = false;\r\n        if (line) {\r\n            var reg = line.trim() === command.trim() ?\r\n                new RegExp('^(' + this.replaceSpecialChar(command.trim()) + ')', 'gim') :\r\n                new RegExp('^(' + this.replaceSpecialChar(command) + ')', 'gim');\r\n            isStart = reg.test(line.trim());\r\n        }\r\n        return isStart;\r\n    };\r\n    MarkdownSelection.prototype.replaceSpecialChar = function (value) {\r\n        return value.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/g, '\\\\$&');\r\n    };\r\n    MarkdownSelection.prototype.isClear = function (parents, regex) {\r\n        var isClear = false;\r\n        for (var i = 0; i < parents.length; i++) {\r\n            if (new RegExp(regex, 'gim').test(parents[i].text)) {\r\n                return true;\r\n            }\r\n        }\r\n        return isClear;\r\n    };\r\n    MarkdownSelection.prototype.getRegex = function (syntax) {\r\n        syntax = this.replaceSpecialChar(syntax);\r\n        var regex = '^(' + syntax + ')|^(' + syntax.trim() + ')';\r\n        return new RegExp(regex);\r\n    };\r\n    MarkdownSelection.prototype.getSelectedInlinePoints = function (textarea) {\r\n        var start = textarea.selectionStart;\r\n        var end = textarea.selectionEnd;\r\n        var selection = this.getSelectedText(textarea);\r\n        return { start: start, end: end, text: selection };\r\n    };\r\n    return MarkdownSelection;\r\n}());\r\nexport { MarkdownSelection };\r\n",null]}