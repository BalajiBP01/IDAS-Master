{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\alignments.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\alignments.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import * as CONSTANT from './../base/constant';\r\nimport { setStyleAttribute } from '@syncfusion/ej2-base';\r\nimport * as EVENTS from './../../common/constant';\r\n/**\r\n * Formats internal component\r\n * @hidden\r\n */\r\nvar Alignments = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the Formats plugin\r\n     * @hidden\r\n     */\r\n    function Alignments(parent) {\r\n        this.alignments = {\r\n            'JustifyLeft': 'left',\r\n            'JustifyCenter': 'center',\r\n            'JustifyRight': 'right',\r\n            'JustifyFull': 'justify'\r\n        };\r\n        this.parent = parent;\r\n        this.addEventListener();\r\n    }\r\n    Alignments.prototype.addEventListener = function () {\r\n        this.parent.observer.on(CONSTANT.ALIGNMENT_TYPE, this.applyAlignment, this);\r\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.onKeyDown, this);\r\n    };\r\n    Alignments.prototype.onKeyDown = function (e) {\r\n        switch (e.event.action) {\r\n            case 'justify-center':\r\n                this.applyAlignment({ subCommand: 'JustifyCenter', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'justify-full':\r\n                this.applyAlignment({ subCommand: 'JustifyFull', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'justify-left':\r\n                this.applyAlignment({ subCommand: 'JustifyLeft', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'justify-right':\r\n                this.applyAlignment({ subCommand: 'JustifyRight', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n        }\r\n    };\r\n    Alignments.prototype.applyAlignment = function (e) {\r\n        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\r\n        var save = this.parent.nodeSelection.save(range, this.parent.currentDocument);\r\n        this.parent.domNode.setMarker(save);\r\n        var alignmentNodes = this.parent.domNode.blockNodes();\r\n        for (var i = 0; i < alignmentNodes.length; i++) {\r\n            var parentNode = alignmentNodes[i];\r\n            setStyleAttribute(parentNode, { 'text-align': this.alignments[e.subCommand] });\r\n        }\r\n        this.parent.editableElement.focus();\r\n        save = this.parent.domNode.saveMarker(save);\r\n        save.restore();\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.domNode.blockNodes()\r\n            });\r\n        }\r\n    };\r\n    return Alignments;\r\n}());\r\nexport { Alignments };\r\n",null]}