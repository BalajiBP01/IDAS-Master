{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\selection-exec.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\selection-exec.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import * as CONSTANT from './../base/constant';\r\nimport { SelectionCommands } from './selection-commands';\r\nimport * as EVENTS from './../../common/constant';\r\n/**\r\n * Selection EXEC internal component\r\n * @hidden\r\n */\r\nvar SelectionBasedExec = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the Formats plugin\r\n     * @hidden\r\n     */\r\n    function SelectionBasedExec(parent) {\r\n        this.parent = parent;\r\n        this.addEventListener();\r\n    }\r\n    SelectionBasedExec.prototype.addEventListener = function () {\r\n        this.parent.observer.on(CONSTANT.SELECTION_TYPE, this.applySelection, this);\r\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.keyDownHandler, this);\r\n    };\r\n    SelectionBasedExec.prototype.keyDownHandler = function (e) {\r\n        var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',\r\n            'subscript', 'uppercase', 'lowercase'];\r\n        if (e.event.ctrlKey && validFormats.indexOf(e.event.action) > -1) {\r\n            e.event.preventDefault();\r\n            SelectionCommands.applyFormat(this.parent.currentDocument, e.event.action, this.parent.editableElement);\r\n            this.callBack(e, e.event.action);\r\n        }\r\n    };\r\n    SelectionBasedExec.prototype.applySelection = function (e) {\r\n        SelectionCommands.applyFormat(this.parent.currentDocument, e.subCommand.toLocaleLowerCase(), this.parent.editableElement, e.value);\r\n        this.callBack(e, e.subCommand);\r\n    };\r\n    SelectionBasedExec.prototype.callBack = function (event, action) {\r\n        if (event.callBack) {\r\n            event.callBack({\r\n                requestType: action,\r\n                event: event.event,\r\n                editorMode: 'HTML',\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\r\n            });\r\n        }\r\n    };\r\n    return SelectionBasedExec;\r\n}());\r\nexport { SelectionBasedExec };\r\n",null]}