{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\selection\\selection.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\selection\\selection.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\r\n * `Selection` module is used to handle RTE Selections.\r\n */\r\nvar NodeSelection = /*@__PURE__*/ (function () {\r\n    function NodeSelection() {\r\n        this.startNodeName = [];\r\n        this.endNodeName = [];\r\n    }\r\n    NodeSelection.prototype.saveInstance = function (range, body) {\r\n        this.range = range.cloneRange();\r\n        this.rootNode = this.documentFromRange(range);\r\n        this.body = body;\r\n        this.startContainer = this.getNodeArray(range.startContainer, true);\r\n        this.endContainer = this.getNodeArray(range.endContainer, false);\r\n        this.startOffset = range.startOffset;\r\n        this.endOffset = range.endOffset;\r\n        this.html = this.body.innerHTML;\r\n        return this;\r\n    };\r\n    NodeSelection.prototype.documentFromRange = function (range) {\r\n        return (9 === range.startContainer.nodeType) ? range.startContainer : range.startContainer.ownerDocument;\r\n    };\r\n    NodeSelection.prototype.getRange = function (docElement) {\r\n        var select = this.get(docElement);\r\n        var range = select && select.rangeCount > 0 ? select.getRangeAt(select.rangeCount - 1) : docElement.createRange();\r\n        return (range.startContainer !== docElement || range.endContainer !== docElement\r\n            || range.startOffset || range.endOffset || (range.setStart(docElement.body, 0),\r\n            range.collapse(!0)),\r\n            range);\r\n    };\r\n    NodeSelection.prototype.get = function (docElement) {\r\n        return docElement.defaultView.getSelection();\r\n    };\r\n    NodeSelection.prototype.save = function (range, docElement) {\r\n        range = (range) ? range.cloneRange() : this.getRange(docElement);\r\n        return this.saveInstance(range, docElement.body);\r\n    };\r\n    NodeSelection.prototype.getIndex = function (node) {\r\n        var index;\r\n        var num = 0;\r\n        node = !node.previousSibling && node.tagName === 'BR' ? node : node.previousSibling;\r\n        if (node) {\r\n            for (var type = node.nodeType; node; null) {\r\n                index = node.nodeType;\r\n                num++;\r\n                type = index;\r\n                node = node.previousSibling;\r\n            }\r\n        }\r\n        return num;\r\n    };\r\n    NodeSelection.prototype.isChildNode = function (nodeCollection, parentNode) {\r\n        for (var index = 0; index < parentNode.childNodes.length; index++) {\r\n            if (nodeCollection.indexOf(parentNode.childNodes[index]) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    NodeSelection.prototype.getNode = function (startNode, endNode, nodeCollection) {\r\n        if (endNode === startNode &&\r\n            (startNode.nodeType === 3 || !startNode.firstChild || nodeCollection.indexOf(startNode.firstChild) !== -1\r\n                || this.isChildNode(nodeCollection, startNode))) {\r\n            return null;\r\n        }\r\n        if (nodeCollection.indexOf(startNode.firstChild) === -1 && startNode.firstChild && !this.isChildNode(nodeCollection, startNode)) {\r\n            return startNode.firstChild;\r\n        }\r\n        if (startNode.nextSibling) {\r\n            return startNode.nextSibling;\r\n        }\r\n        if (!startNode.parentNode) {\r\n            return null;\r\n        }\r\n        else {\r\n            return startNode.parentNode;\r\n        }\r\n    };\r\n    NodeSelection.prototype.getNodeCollection = function (range) {\r\n        var startNode = range.startContainer.childNodes[range.startOffset]\r\n            || range.startContainer;\r\n        var endNode = range.endContainer.childNodes[(range.endOffset > 0) ? (range.endOffset - 1) : range.endOffset]\r\n            || range.endContainer;\r\n        if (startNode === endNode && startNode.childNodes.length === 0) {\r\n            return [startNode];\r\n        }\r\n        var nodeCollection = [];\r\n        do {\r\n            if (nodeCollection.indexOf(startNode) === -1) {\r\n                nodeCollection.push(startNode);\r\n            }\r\n            startNode = this.getNode(startNode, endNode, nodeCollection);\r\n        } while (startNode);\r\n        return nodeCollection;\r\n    };\r\n    NodeSelection.prototype.getParentNodeCollection = function (range) {\r\n        return this.getParentNodes(this.getNodeCollection(range), range);\r\n    };\r\n    NodeSelection.prototype.getParentNodes = function (nodeCollection, range) {\r\n        nodeCollection = nodeCollection.reverse();\r\n        for (var index = 0; index < nodeCollection.length; index++) {\r\n            if ((nodeCollection.indexOf(nodeCollection[index].parentNode) !== -1)\r\n                || (nodeCollection[index].nodeType === 3 &&\r\n                    range.startContainer !== range.endContainer)) {\r\n                nodeCollection.splice(index, 1);\r\n                index--;\r\n            }\r\n            else if (nodeCollection[index].nodeType === 3) {\r\n                nodeCollection[index] = nodeCollection[index].parentNode;\r\n            }\r\n        }\r\n        return nodeCollection;\r\n    };\r\n    NodeSelection.prototype.getSelectionNodeCollection = function (range) {\r\n        return this.getSelectionNodes(this.getNodeCollection(range));\r\n    };\r\n    NodeSelection.prototype.getSelectionNodes = function (nodeCollection) {\r\n        nodeCollection = nodeCollection.reverse();\r\n        for (var index = 0; index < nodeCollection.length; index++) {\r\n            if (nodeCollection[index].nodeType !== 3 || nodeCollection[index].textContent.trim() === '') {\r\n                nodeCollection.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n        return nodeCollection.reverse();\r\n    };\r\n    NodeSelection.prototype.getInsertNodeCollection = function (range) {\r\n        return this.getInsertNodes(this.getNodeCollection(range));\r\n    };\r\n    NodeSelection.prototype.getInsertNodes = function (nodeCollection) {\r\n        nodeCollection = nodeCollection.reverse();\r\n        for (var index = 0; index < nodeCollection.length; index++) {\r\n            if ((nodeCollection[index].childNodes.length !== 0 &&\r\n                nodeCollection[index].nodeType !== 3) ||\r\n                (nodeCollection[index].nodeType === 3 &&\r\n                    nodeCollection[index].textContent === '')) {\r\n                nodeCollection.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n        return nodeCollection.reverse();\r\n    };\r\n    NodeSelection.prototype.getNodeArray = function (node, isStart, root) {\r\n        var array = [];\r\n        ((isStart) ? (this.startNodeName = []) : (this.endNodeName = []));\r\n        for (; node !== (root ? root : this.rootNode); null) {\r\n            (isStart) ? this.startNodeName.push(node.nodeName.toLowerCase()) : this.endNodeName.push(node.nodeName.toLowerCase());\r\n            array.push(this.getIndex(node));\r\n            node = node.parentNode;\r\n        }\r\n        return array;\r\n    };\r\n    NodeSelection.prototype.setRangePoint = function (range, isvalid, num, size) {\r\n        var node = this.rootNode;\r\n        var index = num.length;\r\n        var constant = size;\r\n        for (; index--; null) {\r\n            node = node.childNodes[num[index]];\r\n        }\r\n        if (node && constant >= 0) {\r\n            range[isvalid ? 'setStart' : 'setEnd'](node, constant);\r\n        }\r\n        return range;\r\n    };\r\n    NodeSelection.prototype.restore = function () {\r\n        var range = this.range.cloneRange();\r\n        range = this.setRangePoint(range, true, this.startContainer, this.startOffset);\r\n        range = this.setRangePoint(range, false, this.endContainer, this.endOffset);\r\n        this.selectRange(this.rootNode, range);\r\n        return range;\r\n    };\r\n    NodeSelection.prototype.selectRange = function (docElement, range) {\r\n        this.setRange(docElement, range);\r\n        this.save(range, docElement);\r\n    };\r\n    NodeSelection.prototype.setRange = function (docElement, range) {\r\n        var selection = this.get(docElement);\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n    };\r\n    NodeSelection.prototype.setSelectionText = function (docElement, startNode, endNode, startIndex, endIndex) {\r\n        var range = docElement.createRange();\r\n        range.setStart(startNode, startIndex);\r\n        range.setEnd(endNode, endIndex);\r\n        this.setRange(docElement, range);\r\n    };\r\n    NodeSelection.prototype.setSelectionContents = function (docElement, element) {\r\n        var range = docElement.createRange();\r\n        range.selectNode(element);\r\n        this.setRange(docElement, range);\r\n    };\r\n    NodeSelection.prototype.setSelectionNode = function (docElement, element) {\r\n        var range = docElement.createRange();\r\n        range.selectNodeContents(element);\r\n        this.setRange(docElement, range);\r\n    };\r\n    NodeSelection.prototype.getSelectedNodes = function (docElement) {\r\n        return this.getNodeCollection(this.getRange(docElement));\r\n    };\r\n    NodeSelection.prototype.Clear = function (docElement) {\r\n        this.get(docElement).removeAllRanges();\r\n    };\r\n    NodeSelection.prototype.insertParentNode = function (docElement, newNode, range) {\r\n        range.surroundContents(newNode);\r\n        this.selectRange(docElement, range);\r\n    };\r\n    NodeSelection.prototype.setCursorPoint = function (docElement, element, point) {\r\n        var range = docElement.createRange();\r\n        var selection = docElement.defaultView.getSelection();\r\n        range.setStart(element, point);\r\n        range.collapse(true);\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n    };\r\n    return NodeSelection;\r\n}());\r\nexport { NodeSelection };\r\n",null]}