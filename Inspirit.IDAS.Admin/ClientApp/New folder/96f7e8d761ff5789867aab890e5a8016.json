{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\markdown-toolbar-status.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\markdown-toolbar-status.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import { MarkdownSelection } from '../../markdown-parser/plugin/markdown-selection';\r\nimport * as events from '../base/constant';\r\n/**\r\n * MarkdownToolbarStatus module for refresh the toolbar status\r\n */\r\nvar MarkdownToolbarStatus = /*@__PURE__*/ (function () {\r\n    function MarkdownToolbarStatus(parent) {\r\n        this.toolbarStatus = {\r\n            bold: false,\r\n            italic: false,\r\n            subscript: false,\r\n            superscript: false,\r\n            strikethrough: false,\r\n            orderedlist: false,\r\n            uppercase: false,\r\n            inlinecode: false,\r\n            unorderedlist: false,\r\n            underline: false,\r\n            alignments: null,\r\n            backgroundcolor: null,\r\n            fontcolor: null,\r\n            fontname: null,\r\n            fontsize: null,\r\n            formats: null\r\n        };\r\n        this.selection = new MarkdownSelection();\r\n        this.parent = parent;\r\n        this.element = this.parent.contentModule.getEditPanel();\r\n        this.addEventListener();\r\n    }\r\n    MarkdownToolbarStatus.prototype.addEventListener = function () {\r\n        this.parent.on(events.toolbarRefresh, this.onRefreshHandler, this);\r\n        this.parent.on(events.destroy, this.removeEventListener, this);\r\n    };\r\n    MarkdownToolbarStatus.prototype.removeEventListener = function () {\r\n        this.parent.off(events.toolbarRefresh, this.onRefreshHandler);\r\n        this.parent.off(events.destroy, this.onRefreshHandler);\r\n    };\r\n    MarkdownToolbarStatus.prototype.onRefreshHandler = function (args) {\r\n        var parentsLines = this.selection.getSelectedParentPoints(this.element);\r\n        this.toolbarStatus = {\r\n            orderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'OL'),\r\n            unorderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'UL'),\r\n            formats: this.currentFormat(parentsLines, args.documentNode),\r\n            bold: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Bold'),\r\n            italic: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Italic'),\r\n            inlinecode: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode'),\r\n            strikethrough: args.documentNode ? false :\r\n                this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('StrikeThrough'),\r\n            subscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SubScript'),\r\n            superscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SuperScript'),\r\n            uppercase: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('UpperCase')\r\n        };\r\n        this.parent.notify(events.toolbarUpdated, this.toolbarStatus);\r\n    };\r\n    MarkdownToolbarStatus.prototype.isListsApplied = function (lines, type) {\r\n        var isApply = true;\r\n        for (var i = 0; i < lines.length; i++) {\r\n            if (!this.selection.isStartWith(lines[i].text, this.parent.formatter.listTags[type])) {\r\n                isApply = false;\r\n                break;\r\n            }\r\n        }\r\n        return isApply;\r\n    };\r\n    MarkdownToolbarStatus.prototype.currentFormat = function (lines, documentNode) {\r\n        var format = 'p';\r\n        var keys = Object.keys(this.parent.formatter.formatTags);\r\n        var direction = this.element.selectionDirection;\r\n        var checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;\r\n        for (var i = 0; !documentNode && i < keys.length; i++) {\r\n            if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.parent.formatter.formatTags[keys[i]])) {\r\n                format = keys[i];\r\n                break;\r\n            }\r\n            else if (keys[i] === 'pre') {\r\n                var parentLines = this.selection.getAllParents(this.element.value);\r\n                var firstPrevText = parentLines[lines[0].line - 1];\r\n                var lastNextText = parentLines[lines.length + 1];\r\n                if (this.selection.isStartWith(firstPrevText, this.parent.formatter.formatTags[keys[i]].split('\\n')[0]) &&\r\n                    this.selection.isStartWith(lastNextText, this.parent.formatter.formatTags[keys[i]].split('\\n')[0])) {\r\n                    format = keys[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return format;\r\n    };\r\n    return MarkdownToolbarStatus;\r\n}());\r\nexport { MarkdownToolbarStatus };\r\n",null]}