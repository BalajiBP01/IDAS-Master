{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\toolbar-status.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\toolbar-status.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import { IsFormatted } from './isformatted';\r\nimport * as CONSTANT from './../base/constant';\r\nimport { NodeSelection } from './../../selection/index';\r\n/**\r\n * Update Toolbar Status\r\n * @hidden\r\n */\r\nexport var statusCollection = {\r\n    bold: false,\r\n    italic: false,\r\n    subscript: false,\r\n    superscript: false,\r\n    strikethrough: false,\r\n    orderedlist: false,\r\n    unorderedlist: false,\r\n    underline: false,\r\n    alignments: null,\r\n    backgroundcolor: null,\r\n    fontcolor: null,\r\n    fontname: null,\r\n    fontsize: null,\r\n    formats: null,\r\n    createlink: false\r\n};\r\nvar ToolbarStatus = /*@__PURE__*/ (function () {\r\n    function ToolbarStatus() {\r\n    }\r\n    ToolbarStatus.get = function (docElement, targetNode, formatNode, fontSize, fontName, documentNode) {\r\n        var formatCollection = JSON.parse(JSON.stringify(statusCollection));\r\n        var nodeCollection = JSON.parse(JSON.stringify(statusCollection));\r\n        var nodeSelection = new NodeSelection();\r\n        var nodes = documentNode ? [documentNode] : nodeSelection.getNodeCollection(nodeSelection.getRange(docElement));\r\n        for (var index = 0; index < nodes.length; index++) {\r\n            if (nodes[index].nodeType !== 3) {\r\n                nodes.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n        for (var index = 0; index < nodes.length; index++) {\r\n            formatCollection = this.getFormatParent(docElement, formatCollection, nodes[index], targetNode, formatNode, fontSize, fontName);\r\n            if ((index === 0 && formatCollection.bold) || !formatCollection.bold) {\r\n                nodeCollection.bold = formatCollection.bold;\r\n            }\r\n            if ((index === 0 && formatCollection.italic) || !formatCollection.italic) {\r\n                nodeCollection.italic = formatCollection.italic;\r\n            }\r\n            if ((index === 0 && formatCollection.underline) || !formatCollection.underline) {\r\n                nodeCollection.underline = formatCollection.underline;\r\n            }\r\n            if ((index === 0 && formatCollection.strikethrough) || !formatCollection.strikethrough) {\r\n                nodeCollection.strikethrough = formatCollection.strikethrough;\r\n            }\r\n            if ((index === 0 && formatCollection.superscript) || !formatCollection.superscript) {\r\n                nodeCollection.superscript = formatCollection.superscript;\r\n            }\r\n            if ((index === 0 && formatCollection.subscript) || !formatCollection.subscript) {\r\n                nodeCollection.subscript = formatCollection.subscript;\r\n            }\r\n            if ((index === 0 && formatCollection.fontcolor) || !formatCollection.fontcolor) {\r\n                nodeCollection.fontcolor = formatCollection.fontcolor;\r\n            }\r\n            if ((index === 0 && formatCollection.fontname) || !formatCollection.fontname) {\r\n                nodeCollection.fontname = formatCollection.fontname;\r\n            }\r\n            if ((index === 0 && formatCollection.fontsize) || !formatCollection.fontsize) {\r\n                nodeCollection.fontsize = formatCollection.fontsize;\r\n            }\r\n            if ((index === 0 && formatCollection.backgroundcolor) || !formatCollection.backgroundcolor) {\r\n                nodeCollection.backgroundcolor = formatCollection.backgroundcolor;\r\n            }\r\n            if ((index === 0 && formatCollection.orderedlist) || !formatCollection.orderedlist) {\r\n                nodeCollection.orderedlist = formatCollection.orderedlist;\r\n            }\r\n            if ((index === 0 && formatCollection.unorderedlist) || !formatCollection.unorderedlist) {\r\n                nodeCollection.unorderedlist = formatCollection.unorderedlist;\r\n            }\r\n            if ((index === 0 && formatCollection.alignments) || !formatCollection.alignments) {\r\n                nodeCollection.alignments = formatCollection.alignments;\r\n            }\r\n            if ((index === 0 && formatCollection.formats) || !formatCollection.formats) {\r\n                nodeCollection.formats = formatCollection.formats;\r\n            }\r\n            if ((index === 0 && formatCollection.createlink) || !formatCollection.createlink) {\r\n                nodeCollection.createlink = formatCollection.createlink;\r\n            }\r\n            formatCollection = JSON.parse(JSON.stringify(statusCollection));\r\n        }\r\n        return nodeCollection;\r\n    };\r\n    ToolbarStatus.getFormatParent = function (docElement, formatCollection, node, targetNode, formatNode, fontSize, fontName) {\r\n        if (targetNode.contains(node) ||\r\n            (node.nodeType === 3 && targetNode.nodeType !== 3 && targetNode.contains(node.parentNode))) {\r\n            do {\r\n                formatCollection = this.isFormattedNode(docElement, formatCollection, node, formatNode, fontSize, fontName);\r\n                node = node.parentNode;\r\n            } while (node && (node !== targetNode));\r\n        }\r\n        return formatCollection;\r\n    };\r\n    ToolbarStatus.isFormattedNode = function (docElement, formatCollection, node, formatNode, fontSize, fontName) {\r\n        if (!formatCollection.bold) {\r\n            formatCollection.bold = IsFormatted.isBold(node);\r\n        }\r\n        if (!formatCollection.italic) {\r\n            formatCollection.italic = IsFormatted.isItalic(node);\r\n        }\r\n        if (!formatCollection.underline) {\r\n            formatCollection.underline = IsFormatted.isUnderline(node);\r\n        }\r\n        if (!formatCollection.strikethrough) {\r\n            formatCollection.strikethrough = IsFormatted.isStrikethrough(node);\r\n        }\r\n        if (!formatCollection.superscript) {\r\n            formatCollection.superscript = IsFormatted.isSuperscript(node);\r\n        }\r\n        if (!formatCollection.subscript) {\r\n            formatCollection.subscript = IsFormatted.isSubscript(node);\r\n        }\r\n        if (!formatCollection.fontcolor) {\r\n            formatCollection.fontcolor = this.isFontColor(docElement, node);\r\n        }\r\n        if (!formatCollection.fontname) {\r\n            formatCollection.fontname = this.isFontName(docElement, node, fontName);\r\n        }\r\n        if (!formatCollection.fontsize) {\r\n            formatCollection.fontsize = this.isFontSize(node, fontSize);\r\n        }\r\n        if (!formatCollection.backgroundcolor) {\r\n            formatCollection.backgroundcolor = this.isBackgroundColor(node);\r\n        }\r\n        if (!formatCollection.orderedlist) {\r\n            formatCollection.orderedlist = this.isOrderedList(node);\r\n        }\r\n        if (!formatCollection.unorderedlist) {\r\n            formatCollection.unorderedlist = this.isUnorderedList(node);\r\n        }\r\n        if (!formatCollection.alignments) {\r\n            formatCollection.alignments = this.isAlignment(node);\r\n        }\r\n        if (!formatCollection.formats) {\r\n            formatCollection.formats = this.isFormats(node, formatNode);\r\n        }\r\n        if (!formatCollection.createlink) {\r\n            formatCollection.createlink = this.isLink(node);\r\n        }\r\n        return formatCollection;\r\n    };\r\n    ToolbarStatus.isFontColor = function (docElement, node) {\r\n        var color = node.style && node.style.color;\r\n        if ((color === null || color === undefined || color === '') && node.nodeType !== 3) {\r\n            color = this.getComputedStyle(docElement, node, 'color');\r\n        }\r\n        if (color !== null && color !== '' && color !== undefined) {\r\n            return color;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ToolbarStatus.isLink = function (node) {\r\n        if (node.nodeName.toLocaleLowerCase() === 'a') {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    ToolbarStatus.isBackgroundColor = function (node) {\r\n        var backColor = node.style && node.style.backgroundColor;\r\n        if (backColor !== null && backColor !== '' && backColor !== undefined) {\r\n            return backColor;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ToolbarStatus.isFontSize = function (node, fontSize) {\r\n        var size = node.style && node.style.fontSize;\r\n        if ((size !== null && size !== '' && size !== undefined)\r\n            && (fontSize === null || fontSize === undefined || (fontSize.indexOf(size) > -1))) {\r\n            return size;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ToolbarStatus.isFontName = function (docElement, node, fontName) {\r\n        var name = node.style && node.style.fontFamily;\r\n        if ((name === null || name === undefined || name === '') && node.nodeType !== 3) {\r\n            name = this.getComputedStyle(docElement, node, 'font-family');\r\n        }\r\n        var index = null;\r\n        if ((name !== null && name !== '' && name !== undefined)\r\n            && (fontName === null || fontName === undefined || (fontName.filter(function (value, pos) {\r\n                var pattern = new RegExp(name, 'i');\r\n                if ((value.replace(/\"/g, '').replace(/ /g, '') === name.replace(/\"/g, '').replace(/ /g, '')) ||\r\n                    (value.search(pattern) > -1)) {\r\n                    index = pos;\r\n                }\r\n            }) && (index !== null)))) {\r\n            return (index !== null) ? fontName[index] : name.replace(/\"/g, '');\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ToolbarStatus.isOrderedList = function (node) {\r\n        if (node.nodeName.toLocaleLowerCase() === 'ol') {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    ToolbarStatus.isUnorderedList = function (node) {\r\n        if (node.nodeName.toLocaleLowerCase() === 'ul') {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    ToolbarStatus.isAlignment = function (node) {\r\n        var align = node.style && node.style.textAlign;\r\n        if (align === 'left') {\r\n            return 'justifyleft';\r\n        }\r\n        else if (align === 'center') {\r\n            return 'justifycenter';\r\n        }\r\n        else if (align === 'right') {\r\n            return 'justifyright';\r\n        }\r\n        else if (align === 'justify') {\r\n            return 'justifyfull';\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ToolbarStatus.isFormats = function (node, formatNode) {\r\n        if (((formatNode === undefined || formatNode === null)\r\n            && CONSTANT.BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) > -1)\r\n            || (formatNode !== null && formatNode !== undefined\r\n                && formatNode.indexOf(node.nodeName.toLocaleLowerCase()) > -1)) {\r\n            return node.nodeName.toLocaleLowerCase();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ToolbarStatus.getComputedStyle = function (docElement, node, prop) {\r\n        return docElement.defaultView.getComputedStyle(node, null).getPropertyValue(prop);\r\n    };\r\n    return ToolbarStatus;\r\n}());\r\nexport { ToolbarStatus };\r\n",null]}