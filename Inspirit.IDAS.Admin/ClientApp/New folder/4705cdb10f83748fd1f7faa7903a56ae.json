{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\clearformat.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\clearformat.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import * as CONSTANT from './../base/constant';\r\n/**\r\n * Link internal component\r\n * @hidden\r\n */\r\nvar ClearFormat = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the clear format plugin\r\n     * @hidden\r\n     */\r\n    function ClearFormat(parent) {\r\n        this.parent = parent;\r\n        this.selection = this.parent.markdownSelection;\r\n        this.addEventListener();\r\n    }\r\n    ClearFormat.prototype.addEventListener = function () {\r\n        this.parent.observer.on(CONSTANT.CLEAR_COMMAND, this.clear, this);\r\n    };\r\n    ClearFormat.prototype.replaceRegex = function (data) {\r\n        return data.replace(/\\*/ig, '\\\\*').replace(/\\&/ig, '\\\\&')\r\n            .replace(/\\-/ig, '\\\\-').replace(/\\^/ig, '\\\\^')\r\n            .replace(/\\$/ig, '\\\\$').replace(/\\./ig, '\\\\.')\r\n            .replace(/\\|/ig, '\\\\|').replace(/\\?/ig, '\\\\?')\r\n            .replace(/\\+/ig, '\\\\+').replace(/\\-/ig, '\\\\-')\r\n            .replace(/\\&/ig, '\\\\&');\r\n    };\r\n    ClearFormat.prototype.clearSelectionTags = function (text) {\r\n        var data = this.parent.selectionTags;\r\n        var keys = Object.keys(data);\r\n        for (var num = 0; num < keys.length; num++) {\r\n            var key = keys[num];\r\n            if (data.hasOwnProperty(key) && data[key] !== '') {\r\n                var expString = this.replaceRegex(data[key]);\r\n                var regExp = void 0;\r\n                var startExp = void 0;\r\n                var endExp = void 0;\r\n                if (data[key] === '<sup>') {\r\n                    regExp = new RegExp('<sup>(.*?)<\\/sup>', 'ig');\r\n                }\r\n                else if (data[key] === '<sub>') {\r\n                    regExp = new RegExp('<sub>(.*?)<\\/sub>', 'ig');\r\n                }\r\n                else {\r\n                    regExp = new RegExp(expString + '(.*?)' + expString, 'ig');\r\n                }\r\n                startExp = data[key].length;\r\n                endExp = (data[key] === '<sup>' || data[key] === '<sub>') ? data[key].length + 1 : data[key].length;\r\n                var val = text.match(regExp);\r\n                for (var index = 0; val && index < val.length && val[index] !== ''; index++) {\r\n                    text = text.replace(val[index], val[index].substr(startExp, val[index].length - endExp - startExp));\r\n                }\r\n            }\r\n        }\r\n        return text;\r\n    };\r\n    ClearFormat.prototype.clearFormatTags = function (text) {\r\n        var lines = text.split('\\n');\r\n        var tags = [this.parent.formatTags, this.parent.listTags];\r\n        var str = '';\r\n        for (var len = 0; len < lines.length; len++) {\r\n            for (var num = 0; num < tags.length; num++) {\r\n                var data = tags[num];\r\n                var keys = Object.keys(data);\r\n                for (var index = 0; index < keys.length; index++) {\r\n                    var key = keys[index];\r\n                    if (data.hasOwnProperty(key) && data[key] !== '') {\r\n                        if (lines[len].indexOf(data[key]) === 0) {\r\n                            lines[len] = lines[len].replace(data[key], '');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            str = str + lines[len] + ((len !== lines.length - 1) ? '\\n' : '');\r\n        }\r\n        return str;\r\n    };\r\n    ClearFormat.prototype.clear = function (e) {\r\n        var textArea = this.parent.element;\r\n        textArea.focus();\r\n        var start = textArea.selectionStart;\r\n        var end = textArea.selectionEnd;\r\n        var text = this.selection.getSelectedText(textArea);\r\n        text = this.clearSelectionTags(text);\r\n        text = this.clearFormatTags(text);\r\n        textArea.value = textArea.value.substr(0, start)\r\n            + text + textArea.value.substr(end, textArea.value.length);\r\n        this.parent.markdownSelection.setSelection(textArea, start, start + text.length);\r\n        this.restore(textArea, start, start + text.length, e);\r\n    };\r\n    ClearFormat.prototype.restore = function (textArea, start, end, event) {\r\n        this.selection.save(start, end);\r\n        this.selection.restore(textArea);\r\n        if (event && event.callBack) {\r\n            event.callBack({\r\n                requestType: event.subCommand,\r\n                selectedText: this.selection.getSelectedText(textArea),\r\n                editorMode: 'Markdown',\r\n                event: event.event\r\n            });\r\n        }\r\n    };\r\n    return ClearFormat;\r\n}());\r\nexport { ClearFormat };\r\n",null]}