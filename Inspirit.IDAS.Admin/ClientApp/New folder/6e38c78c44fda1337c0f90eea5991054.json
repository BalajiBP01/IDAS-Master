{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\markdown-editor.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\markdown-editor.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import * as events from '../base/constant';\r\nimport { isNullOrUndefined, addClass, removeClass } from '@syncfusion/ej2-base';\r\nimport { MarkdownFormatter } from '../formatter/markdown-formatter';\r\nimport { RenderType } from '../base/enum';\r\nimport * as classes from '../base/classes';\r\nimport { MarkdownToolbarStatus } from './markdown-toolbar-status';\r\nimport { MarkdownRender } from '../renderer/markdown-renderer';\r\nimport { MarkdownSelection } from './../../markdown-parser/plugin/markdown-selection';\r\n/**\r\n * `MarkdownEditor` module is used to markdown editor\r\n */\r\nvar MarkdownEditor = /*@__PURE__*/ (function () {\r\n    function MarkdownEditor(parent, serviceLocator) {\r\n        this.parent = parent;\r\n        this.locator = serviceLocator;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        this.addEventListener();\r\n    }\r\n    /**\r\n     * Destroys the Markdown.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    MarkdownEditor.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    MarkdownEditor.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.saveSelection = new MarkdownSelection();\r\n        this.parent.on(events.initialLoad, this.instantiateRenderer, this);\r\n        this.parent.on(events.initialEnd, this.render, this);\r\n        this.parent.on(events.modelChanged, this.onPropertyChanged, this);\r\n        this.parent.on(events.markdownToolbarClick, this.onToolbarClick, this);\r\n        this.parent.on(events.destroy, this.destroy, this);\r\n        this.parent.on(events.selectAll, this.selectAll, this);\r\n        this.parent.on(events.getSelectedHtml, this.getSelectedHtml, this);\r\n        this.parent.on(events.selectionSave, this.onSelectionSave, this);\r\n        this.parent.on(events.selectionRestore, this.onSelectionRestore, this);\r\n        this.parent.on(events.readOnlyMode, this.updateReadOnly, this);\r\n    };\r\n    MarkdownEditor.prototype.updateReadOnly = function () {\r\n        if (this.parent.readonly) {\r\n            this.parent.contentModule.getEditPanel().setAttribute('readonly', 'readonly');\r\n            addClass([this.parent.element], classes.CLS_RTE_READONLY);\r\n        }\r\n        else {\r\n            this.parent.contentModule.getEditPanel().removeAttribute('readonly');\r\n            removeClass([this.parent.element], classes.CLS_RTE_READONLY);\r\n        }\r\n    };\r\n    MarkdownEditor.prototype.onSelectionSave = function () {\r\n        var textArea = this.parent.contentModule.getEditPanel();\r\n        this.saveSelection.save(textArea.selectionStart, textArea.selectionEnd);\r\n    };\r\n    MarkdownEditor.prototype.onSelectionRestore = function (e) {\r\n        this.contentRenderer.getEditPanel().focus();\r\n        var textArea = this.parent.contentModule.getEditPanel();\r\n        this.saveSelection.restore(textArea);\r\n    };\r\n    MarkdownEditor.prototype.onToolbarClick = function (args) {\r\n        var text;\r\n        var startOffset;\r\n        var endOffset;\r\n        var item = args.item;\r\n        if (this.parent.editorMode === 'Markdown') {\r\n            var textArea = this.parent.contentModule.getEditPanel();\r\n            textArea.focus();\r\n            startOffset = textArea.selectionStart;\r\n            endOffset = textArea.selectionEnd;\r\n            text = textArea.value.substring(startOffset, endOffset);\r\n        }\r\n        switch (item.subCommand) {\r\n            case 'Maximize':\r\n                this.parent.notify(events.enableFullScreen, { args: args });\r\n                break;\r\n            case 'Minimize':\r\n                this.parent.notify(events.disableFullScreen, { args: args });\r\n                break;\r\n            case 'CreateLink':\r\n                this.parent.notify(events.insertLink, { member: 'link', args: args, text: text, module: 'Markdown' });\r\n                break;\r\n            case 'Image':\r\n                this.parent.notify(events.insertImage, { member: 'image', args: args, text: text, module: 'Markdown' });\r\n                break;\r\n            case 'CreateTable':\r\n                var tableConstant = {\r\n                    'headingText': this.parent.localeObj.getConstant('TableHeadingText'),\r\n                    'colText': this.parent.localeObj.getConstant('TableColText')\r\n                };\r\n                this.parent.formatter.process(this.parent, args, args.originalEvent, tableConstant);\r\n                break;\r\n            default:\r\n                this.parent.formatter.process(this.parent, args, args.originalEvent, null);\r\n                break;\r\n        }\r\n    };\r\n    MarkdownEditor.prototype.instantiateRenderer = function () {\r\n        this.renderFactory.addRenderer(RenderType.Content, new MarkdownRender(this.parent));\r\n    };\r\n    MarkdownEditor.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.initialEnd, this.render);\r\n        this.parent.off(events.modelChanged, this.onPropertyChanged);\r\n        this.parent.off(events.destroy, this.destroy);\r\n        this.parent.off(events.markdownToolbarClick, this.onToolbarClick);\r\n        this.parent.off(events.initialLoad, this.instantiateRenderer);\r\n        this.parent.off(events.selectAll, this.selectAll);\r\n        this.parent.off(events.getSelectedHtml, this.getSelectedHtml);\r\n        this.parent.off(events.selectionSave, this.onSelectionSave);\r\n        this.parent.off(events.selectionRestore, this.onSelectionRestore);\r\n        this.parent.off(events.readOnlyMode, this.updateReadOnly);\r\n    };\r\n    MarkdownEditor.prototype.render = function () {\r\n        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\r\n        var editElement = this.contentRenderer.getEditPanel();\r\n        var option = { undoRedoSteps: this.parent.undoRedoSteps, undoRedoTimer: this.parent.undoRedoTimer };\r\n        if (isNullOrUndefined(this.parent.formatter)) {\r\n            this.parent.formatter = new MarkdownFormatter({\r\n                element: editElement,\r\n                options: option\r\n            });\r\n        }\r\n        else {\r\n            this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);\r\n        }\r\n        if (this.parent.toolbarSettings.enable) {\r\n            this.toolbarUpdate = new MarkdownToolbarStatus(this.parent);\r\n        }\r\n        this.parent.notify(events.bindOnEnd, {});\r\n    };\r\n    /**\r\n     * Called internally if any of the property value changed.\r\n     * @hidden\r\n     */\r\n    MarkdownEditor.prototype.onPropertyChanged = function (e) {\r\n        // On property code change here\r\n    };\r\n    /**\r\n     * For internal use only - Get the module name.\r\n     */\r\n    MarkdownEditor.prototype.getModuleName = function () {\r\n        return 'markdownEditor';\r\n    };\r\n    /**\r\n     * For selecting all content in RTE\r\n     * @private\r\n     */\r\n    MarkdownEditor.prototype.selectAll = function () {\r\n        this.parent.formatter.editorManager.markdownSelection.setSelection(this.parent.contentModule.getEditPanel(), 0, this.parent.contentModule.getEditPanel().value.length);\r\n    };\r\n    /**\r\n     * For get a selected text in RTE\r\n     * @private\r\n     */\r\n    MarkdownEditor.prototype.getSelectedHtml = function (e) {\r\n        e.callBack(this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()));\r\n    };\r\n    return MarkdownEditor;\r\n}());\r\nexport { MarkdownEditor };\r\n",null]}