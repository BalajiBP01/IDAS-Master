{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\indents.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\indents.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import * as CONSTANT from './../base/constant';\r\nimport * as EVENTS from './../../common/constant';\r\n/**\r\n * Indents internal component\r\n * @hidden\r\n */\r\nvar Indents = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the Formats plugin\r\n     * @hidden\r\n     */\r\n    function Indents(parent) {\r\n        this.indentValue = 20;\r\n        this.parent = parent;\r\n        this.addEventListener();\r\n    }\r\n    Indents.prototype.addEventListener = function () {\r\n        this.parent.observer.on(CONSTANT.INDENT_TYPE, this.applyIndents, this);\r\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.onKeyDown, this);\r\n    };\r\n    Indents.prototype.onKeyDown = function (e) {\r\n        switch (e.event.action) {\r\n            case 'indents':\r\n                this.applyIndents({ subCommand: 'Indent', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'outdents':\r\n                this.applyIndents({ subCommand: 'Outdent', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n        }\r\n    };\r\n    Indents.prototype.applyIndents = function (e) {\r\n        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\r\n        var save = this.parent.nodeSelection.save(range, this.parent.currentDocument);\r\n        this.parent.domNode.setMarker(save);\r\n        var indentsNodes = this.parent.domNode.blockNodes();\r\n        var parentNodes = indentsNodes.slice();\r\n        var listsNodes = [];\r\n        for (var i = 0; i < parentNodes.length; i++) {\r\n            if (parentNodes[i].tagName !== 'LI' && 'LI' === parentNodes[i].parentNode.tagName) {\r\n                indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1);\r\n                listsNodes.push(parentNodes[i].parentNode);\r\n            }\r\n            else if (parentNodes[i].tagName === 'LI') {\r\n                indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1);\r\n                listsNodes.push(parentNodes[i]);\r\n            }\r\n        }\r\n        if (listsNodes.length > 0) {\r\n            this.parent.observer.notify(EVENTS.KEY_DOWN_HANDLER, {\r\n                event: {\r\n                    preventDefault: function () { return; },\r\n                    stopPropagation: function () { return; },\r\n                    shiftKey: (e.subCommand === 'Indent' ? false : true),\r\n                    which: 9,\r\n                    action: 'indent'\r\n                },\r\n                ignoreDefault: true\r\n            });\r\n        }\r\n        for (var i = 0; i < indentsNodes.length; i++) {\r\n            var parentNode = indentsNodes[i];\r\n            var marginLeft = parentNode.style.marginLeft;\r\n            var indentsValue = void 0;\r\n            if (e.subCommand === 'Indent') {\r\n                indentsValue = marginLeft === '' ? this.indentValue + 'px' : parseInt(marginLeft, null) + this.indentValue + 'px';\r\n                parentNode.style.marginLeft = indentsValue;\r\n            }\r\n            else {\r\n                indentsValue = (marginLeft === '' || marginLeft === '0px') ? '' : parseInt(marginLeft, null) - this.indentValue + 'px';\r\n                parentNode.style.marginLeft = indentsValue;\r\n            }\r\n        }\r\n        this.parent.editableElement.focus();\r\n        save = this.parent.domNode.saveMarker(save);\r\n        save.restore();\r\n        if (e.callBack) {\r\n            e.callBack({\r\n                requestType: e.subCommand,\r\n                editorMode: 'HTML',\r\n                event: e.event,\r\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\r\n                elements: this.parent.domNode.blockNodes()\r\n            });\r\n        }\r\n    };\r\n    return Indents;\r\n}());\r\nexport { Indents };\r\n",null]}