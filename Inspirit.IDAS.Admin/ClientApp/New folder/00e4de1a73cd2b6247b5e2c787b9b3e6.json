{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\table-module.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\renderer\\table-module.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import { detach, closest, Browser } from '@syncfusion/ej2-base';\r\nimport { isNullOrUndefined, EventHandler, addClass, removeClass } from '@syncfusion/ej2-base';\r\nimport { Dialog, Popup } from '@syncfusion/ej2-popups';\r\nimport { Button } from '@syncfusion/ej2-buttons';\r\nimport * as events from '../base/constant';\r\nimport { RenderType } from '../base/enum';\r\nimport { NumericTextBox } from '@syncfusion/ej2-inputs';\r\nimport * as classes from '../base/classes';\r\nimport { dispatchEvent, parseHtml } from '../base/util';\r\n/**\r\n * `Table` module is used to handle table actions.\r\n */\r\nvar Table = /*@__PURE__*/ (function () {\r\n    function Table(parent, serviceLocator) {\r\n        this.pageX = null;\r\n        this.pageY = null;\r\n        this.moveEle = null;\r\n        this.parent = parent;\r\n        this.rteID = parent.element.id;\r\n        this.l10n = serviceLocator.getService('rteLocale');\r\n        this.rendererFactory = serviceLocator.getService('rendererFactory');\r\n        this.addEventListener();\r\n    }\r\n    Table.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.on(events.createTable, (Browser.isDevice || this.parent.inlineMode.enable) ? this.insertTableDialog : this.renderDlgContent, this);\r\n        this.parent.on(events.initialEnd, this.afterRender, this);\r\n        this.parent.on(events.docClick, this.docClick, this);\r\n        this.parent.on(events.editAreaClick, this.editAreaClickHandler, this);\r\n        this.parent.on(events.tableToolbarAction, this.onToolbarAction, this);\r\n        this.parent.on(events.dropDownSelect, this.dropdownSelect, this);\r\n        this.parent.on(events.keyDown, this.keyDown, this);\r\n    };\r\n    Table.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.createTable, (Browser.isDevice || this.parent.inlineMode.enable) ?\r\n            this.insertTableDialog : this.renderDlgContent);\r\n        this.parent.off(events.initialEnd, this.afterRender);\r\n        this.parent.off(events.docClick, this.docClick);\r\n        this.parent.off(events.editAreaClick, this.editAreaClickHandler);\r\n        this.parent.on(events.tableToolbarAction, this.onToolbarAction, this);\r\n        this.parent.on(events.dropDownSelect, this.dropdownSelect, this);\r\n        this.parent.off(events.mouseDown, this.cellSelect);\r\n        this.parent.off(events.tableColorPickerChanged, this.setBGColor);\r\n        this.parent.off(events.keyDown, this.keyDown);\r\n    };\r\n    Table.prototype.afterRender = function () {\r\n        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\r\n        this.parent.on(events.tableColorPickerChanged, this.setBGColor, this);\r\n        this.parent.on(events.mouseDown, this.cellSelect, this);\r\n        if (this.parent.tableSettings.resize) {\r\n            EventHandler.add(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);\r\n        }\r\n        if (!Browser.isDevice && this.parent.tableSettings.resize) {\r\n            EventHandler.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this);\r\n        }\r\n    };\r\n    Table.prototype.dropdownSelect = function (e) {\r\n        var item = e.item;\r\n        if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || item.command !== 'Table') {\r\n            return;\r\n        }\r\n        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\r\n        var args = {\r\n            args: e,\r\n            selection: this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument()),\r\n            selectParent: this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)\r\n        };\r\n        switch (item.subCommand) {\r\n            case 'InsertRowBefore':\r\n            case 'InsertRowAfter':\r\n                this.addRow(args.selection, e);\r\n                break;\r\n            case 'InsertColumnLeft':\r\n            case 'InsertColumnRight':\r\n                this.addColumn(args.selection, e);\r\n                break;\r\n            case 'DeleteColumn':\r\n            case 'DeleteRow':\r\n                this.removeRowColumn(args.selection, e);\r\n                break;\r\n            case 'AlignTop':\r\n            case 'AlignMiddle':\r\n            case 'AlignBottom':\r\n                this.verticalAlign(args, e);\r\n                break;\r\n            case 'Dashed':\r\n            case 'Alternate':\r\n                this.tableStyles(args, item.subCommand);\r\n                break;\r\n        }\r\n    };\r\n    Table.prototype.keyDown = function (e) {\r\n        var event = e.args;\r\n        var proxy = this;\r\n        if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && this.contentModule) {\r\n            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\r\n            var selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());\r\n            var ele = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)[0];\r\n            ele = (ele && ele.tagName !== 'TD' && ele.tagName !== 'TH') ? ele.parentElement : ele;\r\n            if ((event.keyCode === 8 || event.keyCode === 46)) {\r\n                if (ele && ele.tagName === 'TBODY') {\r\n                    event.preventDefault();\r\n                    proxy.removeTable(selection, event, true);\r\n                }\r\n                else if (ele && ele.querySelectorAll('table').length > 0) {\r\n                    this.removeResizeEle();\r\n                }\r\n            }\r\n            ele = (ele && ele.tagName !== 'TD' && ele.tagName !== 'TH') ? closest(ele, 'td') : ele;\r\n            if (ele && (ele.tagName === 'TD' || ele.tagName === 'TH')) {\r\n                switch (event.keyCode) {\r\n                    case 9:\r\n                    case 37:\r\n                    case 39:\r\n                        proxy.tabSelection(event, selection, ele);\r\n                        break;\r\n                    case 40:\r\n                    case 38:\r\n                        proxy.tableArrowNavigation(event, selection, ele);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Table.prototype.onToolbarAction = function (args) {\r\n        var item = args.args.item;\r\n        switch (item.subCommand) {\r\n            case 'TableHeader':\r\n                this.tableHeader(args.selection, args.args);\r\n                break;\r\n            case 'TableRemove':\r\n                this.removeTable(args.selection, args.args);\r\n                break;\r\n            case 'TableEditProperties':\r\n                this.editTable(args);\r\n                break;\r\n        }\r\n    };\r\n    Table.prototype.verticalAlign = function (args, e) {\r\n        var tdEle = (args.selection.range.startContainer.nodeName === 'TD' ||\r\n            args.selection.range.startContainer.nodeName === 'TH') ?\r\n            args.selection.range.startContainer : args.selection.range.startContainer.parentElement;\r\n        if (tdEle.nodeName !== 'TD' && tdEle.nodeName !== 'TH') {\r\n            return;\r\n        }\r\n        this.parent.formatter.process(this.parent, e, e, { tableCell: tdEle, subCommand: e.item.subCommand });\r\n    };\r\n    Table.prototype.tableStyles = function (args, command) {\r\n        var table = closest(args.selectParent[0], 'table');\r\n        if (command === 'Dashed') {\r\n            (this.parent.element.classList.contains(classes.CLS_TB_DASH_BOR)) ?\r\n                this.parent.element.classList.remove(classes.CLS_TB_DASH_BOR) : this.parent.element.classList.add(classes.CLS_TB_DASH_BOR);\r\n            (table.classList.contains(classes.CLS_TB_DASH_BOR)) ? table.classList.remove(classes.CLS_TB_DASH_BOR) :\r\n                table.classList.add(classes.CLS_TB_DASH_BOR);\r\n        }\r\n        if (command === 'Alternate') {\r\n            (this.parent.element.classList.contains(classes.CLS_TB_ALT_BOR)) ?\r\n                this.parent.element.classList.remove(classes.CLS_TB_DASH_BOR) : this.parent.element.classList.add(classes.CLS_TB_ALT_BOR);\r\n            (table.classList.contains(classes.CLS_TB_ALT_BOR)) ? table.classList.remove(classes.CLS_TB_ALT_BOR) :\r\n                table.classList.add(classes.CLS_TB_ALT_BOR);\r\n        }\r\n        this.parent.formatter.saveData();\r\n    };\r\n    Table.prototype.insideList = function (range) {\r\n        var blockNodes = this.parent.formatter.editorManager.domNode.blockNodes();\r\n        var nodes = [];\r\n        for (var i = 0; i < blockNodes.length; i++) {\r\n            if (blockNodes[i].parentNode.tagName === 'LI') {\r\n                nodes.push(blockNodes[i].parentNode);\r\n            }\r\n            else if (blockNodes[i].tagName === 'LI' && blockNodes[i].childNodes[0].tagName !== 'P' &&\r\n                (blockNodes[i].childNodes[0].tagName !== 'OL' &&\r\n                    blockNodes[i].childNodes[0].tagName !== 'UL')) {\r\n                nodes.push(blockNodes[i]);\r\n            }\r\n        }\r\n        if (nodes.length > 1 || nodes.length && ((range.startOffset === 0 && range.endOffset === 0))) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    Table.prototype.tabSelection = function (event, selection, ele) {\r\n        var insideList = this.insideList(selection.range);\r\n        if ((event.keyCode === 37 || event.keyCode === 39) && selection.range.startContainer.nodeType === 3 ||\r\n            insideList) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        ele.classList.remove(classes.CLS_TABLE_SEL);\r\n        if (!event.shiftKey && event.keyCode !== 37) {\r\n            var nextElement = (!isNullOrUndefined(ele.nextSibling)) ? ele.nextSibling :\r\n                (!isNullOrUndefined(closest(ele, 'tr').nextSibling) ? closest(ele, 'tr').nextSibling.childNodes[0] :\r\n                    (!isNullOrUndefined(closest(ele, 'table').nextSibling)) ?\r\n                        (closest(ele, 'table').nextSibling.nodeName.toLowerCase() === 'td') ?\r\n                            closest(ele, 'table').nextSibling : ele : ele);\r\n            if (ele === nextElement && ele.nodeName === 'TH') {\r\n                nextElement = closest(ele, 'table').rows[1].cells[0];\r\n            }\r\n            if (event.keyCode === 39 && ele === nextElement) {\r\n                nextElement = closest(ele, 'table').nextSibling;\r\n            }\r\n            if (nextElement) {\r\n                (nextElement.textContent.trim() !== '' && closest(nextElement, 'td')) ?\r\n                    selection.setSelectionNode(this.contentModule.getDocument(), nextElement) :\r\n                    selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0);\r\n            }\r\n            if (ele === nextElement && event.keyCode !== 39 && nextElement) {\r\n                this.addRow(selection, event, true);\r\n                nextElement = nextElement.parentElement.nextSibling.firstChild;\r\n                (nextElement.textContent.trim() !== '' && closest(nextElement, 'td')) ?\r\n                    selection.setSelectionNode(this.contentModule.getDocument(), nextElement) :\r\n                    selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0);\r\n            }\r\n        }\r\n        else {\r\n            var prevElement = (!isNullOrUndefined(ele.previousSibling)) ? ele.previousSibling :\r\n                (!isNullOrUndefined(closest(ele, 'tr').previousSibling) ?\r\n                    closest(ele, 'tr').previousSibling.childNodes[closest(ele, 'tr').previousSibling.childNodes.length - 1] :\r\n                    (!isNullOrUndefined(closest(ele, 'table').previousSibling)) ?\r\n                        (closest(ele, 'table').previousSibling.nodeName.toLowerCase() === 'td') ? closest(ele, 'table').previousSibling :\r\n                            ele : ele);\r\n            if (ele === prevElement && ele.cellIndex === 0 &&\r\n                closest(ele, 'table').tHead) {\r\n                var clsTble = closest(ele, 'table');\r\n                prevElement = clsTble.rows[0].cells[clsTble.rows[0].cells.length - 1];\r\n            }\r\n            if (event.keyCode === 37 && ele === prevElement) {\r\n                prevElement = closest(ele, 'table').previousSibling;\r\n            }\r\n            if (prevElement) {\r\n                (prevElement.textContent.trim() !== '' && closest(prevElement, 'td')) ?\r\n                    selection.setSelectionNode(this.contentModule.getDocument(), prevElement) :\r\n                    selection.setSelectionText(this.contentModule.getDocument(), prevElement, prevElement, 0, 0);\r\n            }\r\n        }\r\n    };\r\n    Table.prototype.tableArrowNavigation = function (event, selection, ele) {\r\n        var selText = selection.range.startContainer;\r\n        if ((event.keyCode === 40 && selText.nodeType === 3 && (selText.nextSibling && selText.nextSibling.nodeName === 'BR' ||\r\n            selText.parentNode && selText.parentNode.nodeName !== 'TD')) ||\r\n            (event.keyCode === 38 && selText.nodeType === 3 && (selText.previousSibling && selText.previousSibling.nodeName === 'BR' ||\r\n                selText.parentNode && selText.parentNode.nodeName !== 'TD'))) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        ele.classList.remove(classes.CLS_TABLE_SEL);\r\n        if (event.keyCode === 40) {\r\n            ele = (!isNullOrUndefined(closest(ele, 'tr').nextSibling)) ?\r\n                closest(ele, 'tr').nextSibling.children[ele.cellIndex] :\r\n                (closest(ele, 'table').tHead && ele.nodeName === 'TH') ?\r\n                    closest(ele, 'table').rows[1].cells[ele.cellIndex] :\r\n                    (!isNullOrUndefined(closest(ele, 'table').nextSibling)) ? closest(ele, 'table').nextSibling :\r\n                        ele;\r\n        }\r\n        else {\r\n            ele = (!isNullOrUndefined(closest(ele, 'tr').previousSibling)) ?\r\n                closest(ele, 'tr').previousSibling.children[ele.cellIndex] :\r\n                (closest(ele, 'table').tHead && ele.nodeName !== 'TH') ?\r\n                    closest(ele, 'table').tHead.rows[0].cells[ele.cellIndex] :\r\n                    (!isNullOrUndefined(closest(ele, 'table').previousSibling)) ? closest(ele, 'table').previousSibling :\r\n                        ele;\r\n        }\r\n        if (ele) {\r\n            selection.setSelectionText(this.contentModule.getDocument(), ele, ele, 0, 0);\r\n        }\r\n    };\r\n    Table.prototype.setBGColor = function (args) {\r\n        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());\r\n        var selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());\r\n        var selectedCell = selection.range.startContainer;\r\n        selectedCell = (selectedCell.nodeType === 3) ? closest(selectedCell.parentNode, 'td,th') : closest(selectedCell, 'td, th');\r\n        if (selectedCell && (selectedCell.nodeName === 'TD' || selectedCell.nodeName === 'TH')) {\r\n            var items = closest(selectedCell, 'table').querySelectorAll('.' + classes.CLS_TABLE_SEL);\r\n            for (var i = 0; i < items.length; i++) {\r\n                items[i].style.backgroundColor = args.item.value;\r\n            }\r\n            this.parent.formatter.saveData();\r\n        }\r\n    };\r\n    Table.prototype.hideTableQuickToolbar = function () {\r\n        if (this.quickToolObj && this.quickToolObj.tableQTBar && document.body.contains(this.quickToolObj.tableQTBar.element)) {\r\n            this.quickToolObj.tableQTBar.hidePopup();\r\n        }\r\n    };\r\n    Table.prototype.tableHeader = function (selection, e) {\r\n        this.parent.formatter.process(this.parent, e, e.originalEvent, { selection: selection, subCommand: e.item.subCommand });\r\n    };\r\n    Table.prototype.editAreaClickHandler = function (e) {\r\n        var args = e.args;\r\n        if (args.which === 2 || args.which === 3) {\r\n            return;\r\n        }\r\n        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar) {\r\n            this.quickToolObj = this.parent.quickToolbarModule;\r\n            var target = args.target;\r\n            this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\r\n            var isPopupOpen = this.quickToolObj.tableQTBar.element.classList.contains('e-rte-pop');\r\n            if (isPopupOpen) {\r\n                return;\r\n            }\r\n            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());\r\n            var closestTable = closest(target, 'table');\r\n            if (target && target.nodeName !== 'A' && target.nodeName !== 'IMG' && (target.nodeName === 'TD' || target.nodeName === 'TH' ||\r\n                target.nodeName === 'TABLE' || (closestTable && this.parent.contentModule.getEditPanel().contains(closestTable)))\r\n                && !(range.startContainer.nodeType === 3 && !range.collapsed)) {\r\n                var range_1 = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());\r\n                this.parent.formatter.editorManager.nodeSelection.save(range_1, this.contentModule.getDocument());\r\n                this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());\r\n                var pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset +\r\n                    this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;\r\n                this.quickToolObj.tableQTBar.showPopup(args.pageX, pageY, target);\r\n                this.parent.formatter.editorManager.nodeSelection.restore();\r\n            }\r\n            else {\r\n                this.hideTableQuickToolbar();\r\n            }\r\n        }\r\n    };\r\n    Table.prototype.tableCellSelect = function (e) {\r\n        var target = e.target;\r\n        var row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement);\r\n        var col = Array.prototype.slice.call(target.parentElement.children).indexOf(target);\r\n        var list = this.dlgDiv.querySelectorAll('.e-rte-tablecell');\r\n        Array.prototype.forEach.call(list, function (item) {\r\n            var parentIndex = Array.prototype.slice.call(item.parentElement.parentElement.children).indexOf(item.parentElement);\r\n            var cellIndex = Array.prototype.slice.call(item.parentElement.children).indexOf(item);\r\n            removeClass([item], 'e-active');\r\n            if (parentIndex <= row && cellIndex <= col) {\r\n                addClass([item], 'e-active');\r\n            }\r\n        });\r\n        this.tblHeader.innerHTML = (col + 1) + 'x' + (row + 1);\r\n    };\r\n    Table.prototype.tableCellLeave = function (e) {\r\n        removeClass(this.dlgDiv.querySelectorAll('.e-rte-tablecell'), 'e-active');\r\n        addClass([this.dlgDiv.querySelector('.e-rte-tablecell')], 'e-active');\r\n        this.tblHeader.innerHTML = 1 + 'x' + 1;\r\n    };\r\n    Table.prototype.tableCellClick = function (e) {\r\n        var target = e.target;\r\n        var row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement) + 1;\r\n        var col = Array.prototype.slice.call(target.parentElement.children).indexOf(target) + 1;\r\n        this.self.tableInsert(row, col, e, this);\r\n    };\r\n    Table.prototype.tableInsert = function (row, col, e, selectionObj) {\r\n        var proxy = (selectionObj.self) ? selectionObj.self : this;\r\n        if (proxy.parent.editorMode === 'HTML' && isNullOrUndefined(closest(selectionObj.selection.range.startContainer.parentNode, '#' + proxy.contentModule.getPanel().id))) {\r\n            proxy.contentModule.getEditPanel().focus();\r\n            var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());\r\n            selectionObj.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());\r\n        }\r\n        var value = {\r\n            row: row, columns: col, width: {\r\n                minWidth: proxy.parent.tableSettings.minWidth,\r\n                maxWidth: proxy.parent.tableSettings.maxWidth,\r\n                width: proxy.parent.tableSettings.width,\r\n            },\r\n            selection: selectionObj.selection\r\n        };\r\n        if (proxy.popupObj) {\r\n            proxy.popupObj.hide();\r\n        }\r\n        if (proxy.editdlgObj) {\r\n            proxy.editdlgObj.hide();\r\n        }\r\n        proxy.parent.formatter.process(proxy.parent, selectionObj.args, selectionObj.args.originalEvent, value);\r\n        proxy.contentModule.getEditPanel().focus();\r\n        proxy.parent.on(events.mouseDown, proxy.cellSelect, proxy);\r\n    };\r\n    Table.prototype.cellSelect = function (e) {\r\n        var target = e.args.target;\r\n        var tdNode = closest(target, 'td,th');\r\n        target = (target.nodeName !== 'TD' && tdNode && this.parent.contentModule.getEditPanel().contains(tdNode)) ?\r\n            tdNode : target;\r\n        removeClass(this.contentModule.getEditPanel().querySelectorAll('table td, table th'), classes.CLS_TABLE_SEL);\r\n        if (target && (target.tagName === 'TD' || target.tagName === 'TH')) {\r\n            target.removeAttribute('class');\r\n            addClass([target], classes.CLS_TABLE_SEL);\r\n            this.curTable = (this.curTable) ? this.curTable : closest(target, 'table');\r\n            this.removeResizeEle();\r\n            if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {\r\n                detach(this.helper);\r\n            }\r\n        }\r\n    };\r\n    Table.prototype.resizeHelper = function (e) {\r\n        var target = e.target || e.targetTouches[0].target;\r\n        var closestTable = closest(target, 'table');\r\n        if (target.nodeName === 'TABLE' || target.nodeName === 'TD' || target.nodeName === 'TH') {\r\n            this.curTable = (closestTable && this.parent.contentModule.getEditPanel().contains(closestTable))\r\n                && (target.nodeName === 'TD' || target.nodeName === 'TH') ?\r\n                closestTable : target;\r\n            this.removeResizeEle();\r\n            this.tableResizeEleCreation(this.curTable, e);\r\n        }\r\n    };\r\n    Table.prototype.tableResizeEleCreation = function (table, e) {\r\n        this.parent.preventDefaultResize(e);\r\n        var columns = Array.prototype.slice.call(table.rows[0].cells, 1);\r\n        var rows = [];\r\n        for (var i = 0; i < table.rows.length; i++) {\r\n            rows.push(Array.prototype.slice.call(table.rows[i].cells, 0, 1)[0]);\r\n        }\r\n        var height = parseInt(getComputedStyle(table).height, 10);\r\n        var width = parseInt(getComputedStyle(table).width, 10);\r\n        var pos = this.calcPos(table);\r\n        for (var i = 0; columns.length > i; i++) {\r\n            var colReEle = this.parent.createElement('span', {\r\n                className: classes.CLS_TB_COL_RES, attrs: {\r\n                    'data-col': (i + 1).toString(), 'unselectable': 'on', 'contenteditable': 'false'\r\n                }\r\n            });\r\n            colReEle.style.cssText = 'height: ' + height + 'px; width: 4px; top: ' + pos.top +\r\n                'px; left:' + (pos.left + this.calcPos(columns[i]).left) + 'px;';\r\n            this.contentModule.getEditPanel().appendChild(colReEle);\r\n        }\r\n        for (var i = 0; rows.length > i; i++) {\r\n            var rowReEle = this.parent.createElement('span', {\r\n                className: classes.CLS_TB_ROW_RES, attrs: {\r\n                    'data-row': (i).toString(), 'unselectable': 'on', 'contenteditable': 'false'\r\n                }\r\n            });\r\n            rowReEle.style.cssText = 'width: ' + width + 'px; height: 4px; top: ' +\r\n                (this.calcPos(rows[i]).top + pos.top + rows[i].offsetHeight - 2) +\r\n                'px; left:' + (this.calcPos(rows[i]).left + pos.left) + 'px;';\r\n            this.contentModule.getEditPanel().appendChild(rowReEle);\r\n        }\r\n        var tableReBox = this.parent.createElement('span', {\r\n            className: classes.CLS_TB_BOX_RES, attrs: {\r\n                'data-col': columns.length.toString(), 'unselectable': 'on', 'contenteditable': 'false'\r\n            }\r\n        });\r\n        tableReBox.style.cssText = 'top: ' + (pos.top + height - 4) +\r\n            'px; left:' + (pos.left + width - 4) + 'px;';\r\n        if (Browser.isDevice) {\r\n            tableReBox.classList.add('e-rmob');\r\n        }\r\n        this.contentModule.getEditPanel().appendChild(tableReBox);\r\n    };\r\n    Table.prototype.removeResizeEle = function () {\r\n        var item = this.contentModule.getEditPanel().querySelectorAll('.e-column-resize, .e-row-resize, .e-table-box');\r\n        if (item.length > 0) {\r\n            for (var i = 0; i < item.length; i++) {\r\n                detach(item[i]);\r\n            }\r\n        }\r\n    };\r\n    Table.prototype.calcPos = function (elem) {\r\n        var parentOffset = {\r\n            top: 0,\r\n            left: 0\r\n        };\r\n        var offset = elem.getBoundingClientRect();\r\n        var doc = elem.ownerDocument;\r\n        var offsetParent = elem.offsetParent || doc.documentElement;\r\n        while (offsetParent &&\r\n            (offsetParent === doc.body || offsetParent === doc.documentElement) &&\r\n            offsetParent.style.position === 'static') {\r\n            offsetParent = offsetParent.parentNode;\r\n        }\r\n        if (offsetParent.nodeName === 'TD' && elem.nodeName === 'TABLE') {\r\n            offsetParent = closest(offsetParent, '.e-control');\r\n        }\r\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\r\n            parentOffset = offsetParent.getBoundingClientRect();\r\n        }\r\n        return {\r\n            top: offset.top - parentOffset.top,\r\n            left: offset.left - parentOffset.left\r\n        };\r\n    };\r\n    Table.prototype.getPointX = function (e) {\r\n        if (e.touches && e.touches.length) {\r\n            return e.touches[0].pageX;\r\n        }\r\n        else {\r\n            return e.pageX;\r\n        }\r\n    };\r\n    Table.prototype.getPointY = function (e) {\r\n        if (e.touches && e.touches.length) {\r\n            return e.touches[0].pageY;\r\n        }\r\n        else {\r\n            return e.pageY;\r\n        }\r\n    };\r\n    Table.prototype.resizeStart = function (e) {\r\n        if (Browser.isDevice) {\r\n            this.resizeHelper(e);\r\n        }\r\n        var target = e.target;\r\n        if (target.classList.contains(classes.CLS_TB_COL_RES) ||\r\n            target.classList.contains(classes.CLS_TB_ROW_RES) ||\r\n            target.classList.contains(classes.CLS_TB_BOX_RES)) {\r\n            e.preventDefault();\r\n            this.parent.preventDefaultResize(e);\r\n            removeClass(this.curTable.querySelectorAll('td,th'), classes.CLS_TABLE_SEL);\r\n            this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());\r\n            this.pageX = this.getPointX(e);\r\n            this.pageY = this.getPointY(e);\r\n            this.resizeBtnInit();\r\n            this.hideTableQuickToolbar();\r\n            if (target.classList.contains(classes.CLS_TB_COL_RES)) {\r\n                this.resizeBtnStat.column = true;\r\n                this.columnEle = this.curTable.rows[0].cells[parseInt(target.getAttribute('data-col'), 10)];\r\n                this.colIndex = this.columnEle.cellIndex;\r\n                this.moveEle = e.target;\r\n                this.appendHelper();\r\n            }\r\n            if (target.classList.contains(classes.CLS_TB_ROW_RES)) {\r\n                this.rowEle = this.curTable.rows[parseInt(target.getAttribute('data-row'), 10)];\r\n                this.resizeBtnStat.row = true;\r\n                this.appendHelper();\r\n            }\r\n            if (target.classList.contains(classes.CLS_TB_BOX_RES)) {\r\n                this.resizeBtnStat.tableBox = true;\r\n            }\r\n            if (Browser.isDevice && this.helper && !this.helper.classList.contains('e-reicon')) {\r\n                this.helper.classList.add('e-reicon');\r\n                EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this);\r\n                EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this);\r\n            }\r\n            else {\r\n                var args = { event: e, requestType: 'Table' };\r\n                this.parent.trigger(events.resizeStart, args);\r\n                if (args.cancel) {\r\n                    this.cancelResizeAction();\r\n                    return;\r\n                }\r\n            }\r\n            EventHandler.add(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing, this);\r\n            EventHandler.add(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);\r\n        }\r\n    };\r\n    Table.prototype.removeHelper = function (e) {\r\n        var cls = e.target.classList;\r\n        if (!(cls.contains('e-reicon')) && this.helper) {\r\n            EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);\r\n            EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);\r\n            if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {\r\n                detach(this.helper);\r\n            }\r\n            this.pageX = null;\r\n            this.helper = null;\r\n        }\r\n    };\r\n    Table.prototype.appendHelper = function () {\r\n        this.helper = this.parent.createElement('div', {\r\n            className: 'e-table-rhelper'\r\n        });\r\n        if (Browser.isDevice) {\r\n            this.helper.classList.add('e-reicon');\r\n        }\r\n        this.contentModule.getEditPanel().appendChild(this.helper);\r\n        this.setHelperHeight();\r\n    };\r\n    Table.prototype.setHelperHeight = function () {\r\n        var pos = this.calcPos(this.curTable);\r\n        if (this.resizeBtnStat.column) {\r\n            this.helper.classList.add('e-column-helper');\r\n            this.helper.style.cssText = 'height: ' + getComputedStyle(this.curTable).height + '; top: ' +\r\n                pos.top + 'px; left:' + (pos.left + this.calcPos(this.columnEle).left - 1) + 'px;';\r\n        }\r\n        else {\r\n            this.helper.classList.add('e-row-helper');\r\n            this.helper.style.cssText = 'width: ' + getComputedStyle(this.curTable).width + '; top: ' +\r\n                (this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight) +\r\n                'px; left:' + (this.calcPos(this.rowEle).left + pos.left) + 'px;';\r\n        }\r\n    };\r\n    Table.prototype.updateHelper = function () {\r\n        var pos = this.calcPos(this.curTable);\r\n        if (this.resizeBtnStat.column) {\r\n            var left = pos.left + this.calcPos(this.columnEle).left - 1;\r\n            this.helper.style.left = left + 'px';\r\n        }\r\n        else {\r\n            var top_1 = this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight;\r\n            this.helper.style.top = top_1 + 'px';\r\n        }\r\n    };\r\n    Table.prototype.resizing = function (e) {\r\n        var pageX = this.getPointX(e);\r\n        var pageY = this.getPointY(e);\r\n        var mouseX = (this.parent.enableRtl) ? -(pageX - this.pageX) : (pageX - this.pageX);\r\n        var mouseY = (this.parent.enableRtl) ? -(pageY - this.pageY) : (pageY - this.pageY);\r\n        this.pageX = pageX;\r\n        this.pageY = pageY;\r\n        var args = { event: e, requestType: 'table' };\r\n        this.parent.trigger(events.onResize, args);\r\n        if (args.cancel) {\r\n            this.cancelResizeAction();\r\n            return;\r\n        }\r\n        var tableReBox = this.contentModule.getEditPanel().querySelector('.e-table-box');\r\n        var tableWidth = parseInt(getComputedStyle(this.curTable).width, 10);\r\n        var tableHeight = parseInt(getComputedStyle(this.curTable).height, 10);\r\n        if (this.resizeBtnStat.column) {\r\n            var cellColl = this.curTable.rows[0].cells;\r\n            var width = parseFloat(getComputedStyle(this.columnEle).width);\r\n            var actualwid = width - mouseX;\r\n            var totalwid = parseFloat(getComputedStyle(this.columnEle).width) +\r\n                parseFloat(getComputedStyle(cellColl[this.colIndex - 1]).width);\r\n            for (var i = 0; i < this.curTable.rows.length; i++) {\r\n                if ((totalwid - actualwid) > 20 && actualwid > 20) {\r\n                    this.curTable.rows[i].cells[this.colIndex - 1].style.width = totalwid - actualwid + 'px';\r\n                    this.curTable.rows[i].cells[this.colIndex].style.width = actualwid + 'px';\r\n                }\r\n            }\r\n            this.updateHelper();\r\n        }\r\n        else if (this.resizeBtnStat.row) {\r\n            this.parent.preventDefaultResize(e);\r\n            var height = parseFloat(getComputedStyle(this.rowEle).height) + mouseY;\r\n            if (height > 20) {\r\n                this.rowEle.style.height = height + 'px';\r\n            }\r\n            this.curTable.style.height = '';\r\n            tableReBox.style.cssText = 'top: ' + (this.calcPos(this.curTable).top + tableHeight - 4) +\r\n                'px; left:' + (this.calcPos(this.curTable).left + tableWidth - 4) + 'px;';\r\n            this.updateHelper();\r\n        }\r\n        else if (this.resizeBtnStat.tableBox) {\r\n            if (!Browser.isDevice) {\r\n                EventHandler.remove(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper);\r\n            }\r\n            this.curTable.style.width = tableWidth + mouseX + 'px';\r\n            this.curTable.style.height = tableHeight + mouseY + 'px';\r\n            tableReBox.classList.add('e-rbox-select');\r\n            tableReBox.style.cssText = 'top: ' + (this.calcPos(this.curTable).top + tableHeight - 4) +\r\n                'px; left:' + (this.calcPos(this.curTable).left + tableWidth - 4) + 'px;';\r\n        }\r\n    };\r\n    Table.prototype.cancelResizeAction = function () {\r\n        EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);\r\n        EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);\r\n        this.removeResizeEle();\r\n    };\r\n    Table.prototype.resizeEnd = function (e) {\r\n        this.resizeBtnInit();\r\n        EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);\r\n        EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);\r\n        if (this.contentModule.getEditPanel().querySelector('.e-table-box') &&\r\n            this.contentModule.getEditPanel().contains(this.contentModule.getEditPanel().querySelector('.e-table-box'))) {\r\n            if (!Browser.isDevice) {\r\n                EventHandler.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this);\r\n            }\r\n            this.removeResizeEle();\r\n            if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {\r\n                detach(this.helper);\r\n                this.helper = null;\r\n            }\r\n            this.pageX = null;\r\n            this.pageY = null;\r\n            this.moveEle = null;\r\n        }\r\n        var args = { event: e, requestType: 'table' };\r\n        this.parent.trigger(events.resizeStop, args);\r\n        this.parent.formatter.saveData();\r\n    };\r\n    Table.prototype.resizeBtnInit = function () {\r\n        return this.resizeBtnStat = { column: false, row: false, tableBox: false };\r\n    };\r\n    Table.prototype.addRow = function (selectCell, e, tabkey) {\r\n        var cmd;\r\n        if (tabkey) {\r\n            cmd = {\r\n                item: { command: 'Table', subCommand: 'InsertRowAfter' }\r\n            };\r\n        }\r\n        var value = {\r\n            selection: selectCell,\r\n            subCommand: (tabkey) ? cmd.item.subCommand : e.item.subCommand\r\n        };\r\n        this.parent.formatter.process(this.parent, (tabkey) ? cmd : e, e, value);\r\n    };\r\n    Table.prototype.addColumn = function (selectCell, e) {\r\n        this.parent.formatter.process(this.parent, e, e, { selection: selectCell, width: this.parent.tableSettings.width, subCommand: e.item.subCommand });\r\n    };\r\n    Table.prototype.removeRowColumn = function (selectCell, e) {\r\n        this.parent.formatter.process(this.parent, e, e, { selection: selectCell, subCommand: e.item.subCommand });\r\n        this.hideTableQuickToolbar();\r\n    };\r\n    Table.prototype.removeTable = function (selection, args, delKey) {\r\n        var cmd;\r\n        if (delKey) {\r\n            cmd = { item: { command: 'Table', subCommand: 'TableRemove' } };\r\n        }\r\n        var value = {\r\n            selection: selection,\r\n            subCommand: (delKey) ? cmd.item.subCommand : args.item.subCommand\r\n        };\r\n        this.parent.formatter.process(this.parent, (delKey) ? cmd : args, args.originalEvent, value);\r\n        this.contentModule.getEditPanel().focus();\r\n        this.removeResizeEle();\r\n        this.hideTableQuickToolbar();\r\n    };\r\n    Table.prototype.renderDlgContent = function (args) {\r\n        var _this = this;\r\n        if (this.popupObj) {\r\n            this.popupObj.hide();\r\n            return;\r\n        }\r\n        this.hideTableQuickToolbar();\r\n        var header = '1X1';\r\n        var insertbtn = this.l10n.getConstant('inserttablebtn');\r\n        this.dlgDiv = this.parent.createElement('div', { className: 'e-rte-table-popup', id: this.rteID + '_table' });\r\n        this.tblHeader = this.parent.createElement('div', { className: 'e-rte-popup-header' });\r\n        this.tblHeader.innerHTML = header;\r\n        this.dlgDiv.appendChild(this.tblHeader);\r\n        var tableDiv = this.parent.createElement('div', { className: 'e-rte-table-span' });\r\n        this.drawTable(tableDiv, args);\r\n        this.dlgDiv.appendChild(tableDiv);\r\n        this.dlgDiv.appendChild(this.parent.createElement('span', { className: 'e-span-border' }));\r\n        var btnEle = this.parent.createElement('button', {\r\n            className: 'e-insert-table-btn', id: this.rteID + '_insertTable',\r\n            attrs: { type: 'button' }\r\n        });\r\n        this.dlgDiv.appendChild(btnEle);\r\n        var button = new Button({\r\n            iconCss: 'e-icons e-create-table', content: insertbtn, cssClass: 'e-flat',\r\n            enableRtl: this.parent.enableRtl, locale: this.parent.locale\r\n        });\r\n        button.appendTo(btnEle);\r\n        EventHandler.add(btnEle, 'click', this.insertTableDialog, { self: this, args: args.args, selection: args.selection });\r\n        this.parent.getToolbar().appendChild(this.dlgDiv);\r\n        var target = args.args.originalEvent.target;\r\n        target = target.classList.contains('e-toolbar-item') ? target.firstChild : target.parentElement;\r\n        this.popupObj = new Popup(this.dlgDiv, {\r\n            targetType: 'relative',\r\n            relateTo: target,\r\n            collision: { X: 'fit', Y: 'none' },\r\n            offsetY: 8,\r\n            viewPortElement: this.parent.element,\r\n            position: { X: 'left', Y: 'bottom' },\r\n            enableRtl: this.parent.enableRtl,\r\n            zIndex: 10001,\r\n            close: function (event) {\r\n                _this.parent.isBlur = false;\r\n                _this.popupObj.destroy();\r\n                detach(_this.popupObj.element);\r\n                _this.popupObj = null;\r\n            }\r\n        });\r\n        addClass([this.popupObj.element], 'e-popup-open');\r\n        this.popupObj.refreshPosition(target);\r\n    };\r\n    Table.prototype.docClick = function (e) {\r\n        var target = e.args.target;\r\n        if (target && target.classList && ((this.popupObj && !closest(target, '#' + this.popupObj.element.id) ||\r\n            (this.editdlgObj && !closest(target, '#' + this.editdlgObj.element.id)))) && !target.classList.contains('e-create-table') &&\r\n            target.offsetParent && !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown')) {\r\n            if (this.popupObj) {\r\n                this.popupObj.hide();\r\n            }\r\n            if (this.editdlgObj) {\r\n                this.editdlgObj.hide();\r\n            }\r\n            this.parent.isBlur = true;\r\n            dispatchEvent(this.parent.element, 'focusout');\r\n        }\r\n        var closestEle = closest(target, 'td');\r\n        var isExist = closestEle && this.parent.contentModule.getEditPanel().contains(closestEle) ? true : false;\r\n        if (target && target.tagName !== 'TD' && target.tagName !== 'TH' && !isExist &&\r\n            closest(target, '.e-rte-quick-popup') === null && target.offsetParent &&\r\n            !target.offsetParent.classList.contains('e-quick-dropdown') &&\r\n            !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown') && !closest(target, '.e-rte-dropdown-popup')) {\r\n            removeClass(this.parent.element.querySelectorAll('table td'), classes.CLS_TABLE_SEL);\r\n            this.hideTableQuickToolbar();\r\n        }\r\n        if (target && target.classList && !target.classList.contains(classes.CLS_TB_COL_RES) &&\r\n            !target.classList.contains(classes.CLS_TB_ROW_RES) && !target.classList.contains(classes.CLS_TB_BOX_RES)) {\r\n            this.removeResizeEle();\r\n        }\r\n    };\r\n    Table.prototype.drawTable = function (tableDiv, args) {\r\n        var rowDiv;\r\n        var tableCell;\r\n        for (var row = 0; row < 3; row++) {\r\n            rowDiv = this.parent.createElement('div', { className: 'e-rte-table-row', attrs: { 'data-column': '' + row } });\r\n            for (var col = 0; col < 10; col++) {\r\n                var display = (row > 2) ? 'none' : 'inline-block';\r\n                tableCell = this.parent.createElement('div', { className: 'e-rte-tablecell e-default', attrs: { 'data-cell': '' + col } });\r\n                rowDiv.appendChild(tableCell);\r\n                tableCell.style.display = display;\r\n                if (col === 0 && row === 0) {\r\n                    addClass([tableCell], 'e-active');\r\n                }\r\n                EventHandler.add(tableCell, 'mousemove', this.tableCellSelect, this);\r\n                EventHandler.add(rowDiv, 'mouseleave', this.tableCellLeave, this);\r\n                EventHandler.add(tableCell, 'mouseup', this.tableCellClick, { self: this, args: args.args, selection: args.selection });\r\n            }\r\n            tableDiv.appendChild(rowDiv);\r\n        }\r\n    };\r\n    Table.prototype.editTable = function (args) {\r\n        var _this = this;\r\n        this.createDialog(args);\r\n        var editContent = this.tableDlgContent(args);\r\n        var update = this.l10n.getConstant('dialogUpdate');\r\n        var cancel = this.l10n.getConstant('dialogCancel');\r\n        var editHeader = this.l10n.getConstant('tableEditHeader');\r\n        this.editdlgObj.setProperties({\r\n            height: 'initial', width: '290px', content: editContent, header: editHeader,\r\n            buttons: [{\r\n                    click: this.applyProperties.bind(this, args),\r\n                    buttonModel: { content: update, cssClass: 'e-flat e-size-update', isPrimary: true }\r\n                },\r\n                {\r\n                    click: function (e) { _this.cancelDialog(e); },\r\n                    buttonModel: { cssClass: 'e-flat e-cancel', content: cancel }\r\n                }]\r\n        });\r\n        this.editdlgObj.element.style.maxHeight = 'none';\r\n        this.editdlgObj.content.querySelector('input').focus();\r\n    };\r\n    Table.prototype.insertTableDialog = function (args) {\r\n        var proxy = (this.self) ? this.self : this;\r\n        if (proxy.popupObj) {\r\n            proxy.popupObj.hide();\r\n        }\r\n        proxy.createDialog(args);\r\n        var dlgContent = proxy.tableCellDlgContent();\r\n        var insert = proxy.l10n.getConstant('dialogInsert');\r\n        var cancel = proxy.l10n.getConstant('dialogCancel');\r\n        proxy.editdlgObj.setProperties({\r\n            height: 'initial', width: '290px', content: dlgContent,\r\n            buttons: [{\r\n                    click: proxy.customTable.bind(this, args),\r\n                    buttonModel: { content: insert, cssClass: 'e-flat e-insert-table', isPrimary: true }\r\n                },\r\n                {\r\n                    click: function (e) { proxy.cancelDialog(e); },\r\n                    buttonModel: { cssClass: 'e-flat e-cancel', content: cancel }\r\n                }]\r\n        });\r\n        proxy.editdlgObj.element.style.maxHeight = 'none';\r\n        proxy.editdlgObj.content.querySelector('input').focus();\r\n    };\r\n    Table.prototype.tableCellDlgContent = function () {\r\n        var tableColumn = this.l10n.getConstant('columns');\r\n        var tableRow = this.l10n.getConstant('rows');\r\n        var tableWrap = this.parent.createElement('div', { className: 'e-cell-wrap' });\r\n        var content = '<div class=\"e-rte-field\"><input type=\"text\" '\r\n            + ' data-role =\"none\" id=\"tableColumn\" class=\"e-table-column\"/></div>'\r\n            + '<div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"tableRow\" class=\"e-table-row\" /></div>';\r\n        var contentElem = parseHtml(content);\r\n        tableWrap.appendChild(contentElem);\r\n        this.columnTextBox = new NumericTextBox({\r\n            format: 'n0',\r\n            min: 1,\r\n            value: 3,\r\n            placeholder: tableColumn,\r\n            floatLabelType: 'Auto',\r\n            max: 50,\r\n            enableRtl: this.parent.enableRtl, locale: this.parent.locale\r\n        });\r\n        this.columnTextBox.appendTo(tableWrap.querySelector('#tableColumn'));\r\n        this.rowTextBox = new NumericTextBox({\r\n            format: 'n0',\r\n            min: 1,\r\n            value: 3,\r\n            placeholder: tableRow,\r\n            floatLabelType: 'Auto',\r\n            max: 50,\r\n            enableRtl: this.parent.enableRtl, locale: this.parent.locale\r\n        });\r\n        this.rowTextBox.appendTo(tableWrap.querySelector('#tableRow'));\r\n        return tableWrap;\r\n    };\r\n    Table.prototype.createDialog = function (args) {\r\n        var _this = this;\r\n        if (this.editdlgObj) {\r\n            this.editdlgObj.hide({ returnValue: true });\r\n            return;\r\n        }\r\n        var tableDialog = this.parent.createElement('div', { className: 'e-rte-edit-table', id: this.rteID + '_tabledialog' });\r\n        this.parent.element.appendChild(tableDialog);\r\n        var insert = this.l10n.getConstant('dialogInsert');\r\n        var cancel = this.l10n.getConstant('dialogCancel');\r\n        var header = this.l10n.getConstant('tabledialogHeader');\r\n        this.editdlgObj = new Dialog({\r\n            header: header,\r\n            cssClass: classes.CLS_RTE_ELEMENTS,\r\n            enableRtl: this.parent.enableRtl,\r\n            locale: this.parent.locale,\r\n            showCloseIcon: true, closeOnEscape: true, width: (Browser.isDevice) ? '290px' : '340px', height: 'initial',\r\n            position: { X: 'center', Y: (Browser.isDevice) ? 'center' : 'top' },\r\n            isModal: Browser.isDevice,\r\n            buttons: [{\r\n                    buttonModel: { content: insert, cssClass: 'e-flat e-insert-table', isPrimary: true }\r\n                },\r\n                {\r\n                    click: function (e) { _this.cancelDialog(e); },\r\n                    buttonModel: { cssClass: 'e-flat e-cancel', content: cancel }\r\n                }],\r\n            target: (Browser.isDevice) ? document.body : this.parent.element,\r\n            animationSettings: { effect: 'None' },\r\n            close: function (event) {\r\n                _this.parent.isBlur = false;\r\n                _this.editdlgObj.destroy();\r\n                detach(_this.editdlgObj.element);\r\n                _this.editdlgObj = null;\r\n            },\r\n        });\r\n        this.editdlgObj.appendTo(tableDialog);\r\n        if (this.quickToolObj && this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {\r\n            this.quickToolObj.inlineQTBar.hidePopup();\r\n        }\r\n    };\r\n    Table.prototype.customTable = function (args, e) {\r\n        var proxy = (this.self) ? this.self : this;\r\n        if (proxy.rowTextBox.value && proxy.columnTextBox.value) {\r\n            var argument = ((Browser.isDevice || proxy.parent.inlineMode.enable) ? args : this);\r\n            proxy.tableInsert(proxy.rowTextBox.value, proxy.columnTextBox.value, e, argument);\r\n        }\r\n    };\r\n    Table.prototype.cancelDialog = function (e) {\r\n        this.parent.isBlur = false;\r\n        this.editdlgObj.hide({ returnValue: true });\r\n    };\r\n    Table.prototype.applyProperties = function (args, e) {\r\n        var dialogEle = this.editdlgObj.element;\r\n        var table = closest(args.selectNode[0], 'table');\r\n        table.style.width = dialogEle.querySelector('.e-table-width').value + 'px';\r\n        table.cellPadding = dialogEle.querySelector('.e-cell-padding').value;\r\n        table.cellSpacing = dialogEle.querySelector('.e-cell-spacing').value;\r\n        this.parent.formatter.saveData();\r\n        this.editdlgObj.hide({ returnValue: true });\r\n    };\r\n    Table.prototype.tableDlgContent = function (e) {\r\n        var selectNode = e.selectParent[0];\r\n        var tableWidth = this.l10n.getConstant('tableWidth');\r\n        var cellPadding = this.l10n.getConstant('cellpadding');\r\n        var cellSpacing = this.l10n.getConstant('cellspacing');\r\n        var tableWrap = this.parent.createElement('div', { className: 'e-table-sizewrap' });\r\n        var widthVal = closest(selectNode, 'table').getClientRects()[0].width;\r\n        var content = '<div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"tableWidth\" class=\"e-table-width\" '\r\n            + ' /></div>' + '<div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"cellPadding\" class=\"e-cell-padding\" />'\r\n            + ' </div><div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"cellSpacing\" class=\"e-cell-spacing\" /></div>';\r\n        var contentElem = parseHtml(content);\r\n        tableWrap.appendChild(contentElem);\r\n        var widthNum = new NumericTextBox({\r\n            format: 'n0',\r\n            min: 0,\r\n            value: widthVal,\r\n            placeholder: tableWidth,\r\n            floatLabelType: 'Auto',\r\n            enableRtl: this.parent.enableRtl, locale: this.parent.locale\r\n        });\r\n        widthNum.appendTo(tableWrap.querySelector('#tableWidth'));\r\n        var padding = new NumericTextBox({\r\n            format: 'n0',\r\n            min: 0,\r\n            value: 0,\r\n            placeholder: cellPadding,\r\n            floatLabelType: 'Auto',\r\n            enableRtl: this.parent.enableRtl, locale: this.parent.locale\r\n        });\r\n        padding.appendTo(tableWrap.querySelector('#cellPadding'));\r\n        var spacing = new NumericTextBox({\r\n            format: 'n0',\r\n            min: 0,\r\n            value: 0,\r\n            placeholder: cellSpacing,\r\n            floatLabelType: 'Auto',\r\n            enableRtl: this.parent.enableRtl, locale: this.parent.locale\r\n        });\r\n        spacing.appendTo(tableWrap.querySelector('#cellSpacing'));\r\n        return tableWrap;\r\n    };\r\n    /**\r\n     * Destroys the ToolBar.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    Table.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n    };\r\n    /**\r\n     * For internal use only - Get the module name.\r\n     */\r\n    Table.prototype.getModuleName = function () {\r\n        return 'table';\r\n    };\r\n    return Table;\r\n}());\r\nexport { Table };\r\n",null]}