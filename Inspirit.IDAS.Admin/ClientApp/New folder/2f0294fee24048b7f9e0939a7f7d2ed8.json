{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\base\\markdown-parser.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\base\\markdown-parser.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import { Observer } from '@syncfusion/ej2-base';\r\nimport * as CONSTANT from './constant';\r\nimport { MDLists } from './../plugin/lists';\r\nimport { MDFormats } from './../plugin/formats';\r\nimport { MDSelectionFormats } from './../plugin/md-selection-formats';\r\nimport { MarkdownSelection } from './../plugin/markdown-selection';\r\nimport { extend } from '@syncfusion/ej2-base';\r\nimport { markdownFormatTags, markdownListsTags, markdownSelectionTags } from './../../common/config';\r\nimport { UndoRedoCommands } from './../plugin/undo';\r\nimport { MDLink } from './../plugin/link';\r\nimport { MDTable } from './../plugin/table';\r\nimport * as EVENTS from './../../common/constant';\r\nimport { ClearFormat } from './../plugin/clearformat';\r\n/**\r\n * MarkdownParser internal component\r\n * @hidden\r\n */\r\nvar MarkdownParser = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the component\r\n     * @hidden\r\n     */\r\n    function MarkdownParser(options) {\r\n        this.initialize();\r\n        extend(this, this, options, true);\r\n        this.observer = new Observer(this);\r\n        this.markdownSelection = new MarkdownSelection();\r\n        this.listObj = new MDLists({ parent: this, syntax: this.listTags });\r\n        this.formatObj = new MDFormats({ parent: this, syntax: this.formatTags });\r\n        this.undoRedoManager = new UndoRedoCommands(this, options.options);\r\n        this.mdSelectionFormats = new MDSelectionFormats({ parent: this, syntax: this.selectionTags });\r\n        this.linkObj = new MDLink(this);\r\n        this.tableObj = new MDTable(this);\r\n        this.clearObj = new ClearFormat(this);\r\n        this.wireEvents();\r\n    }\r\n    MarkdownParser.prototype.initialize = function () {\r\n        this.formatTags = markdownFormatTags;\r\n        this.listTags = markdownListsTags;\r\n        this.selectionTags = markdownSelectionTags;\r\n    };\r\n    MarkdownParser.prototype.wireEvents = function () {\r\n        this.observer.on(EVENTS.KEY_DOWN, this.editorKeyDown, this);\r\n        this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\r\n        this.observer.on(EVENTS.MODEL_CHANGED, this.onPropertyChanged, this);\r\n    };\r\n    MarkdownParser.prototype.onPropertyChanged = function (props) {\r\n        this.observer.notify(EVENTS.MODEL_CHANGED_PLUGIN, props);\r\n    };\r\n    MarkdownParser.prototype.editorKeyDown = function (e) {\r\n        this.observer.notify(EVENTS.KEY_DOWN_HANDLER, e);\r\n    };\r\n    MarkdownParser.prototype.editorKeyUp = function (e) {\r\n        this.observer.notify(EVENTS.KEY_UP_HANDLER, e);\r\n    };\r\n    MarkdownParser.prototype.execCommand = function (command, value, event, callBack, text, exeValue) {\r\n        switch (command.toLocaleLowerCase()) {\r\n            case 'lists':\r\n                this.observer.notify(CONSTANT.LISTS_COMMAND, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'formats':\r\n                this.observer.notify(EVENTS.FORMAT_TYPE, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'actions':\r\n                this.observer.notify(EVENTS.ACTION, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'style':\r\n            case 'effects':\r\n            case 'casing':\r\n                this.observer.notify(CONSTANT.selectionCommand, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n            case 'links':\r\n            case 'images':\r\n                this.observer.notify(CONSTANT.LINK_COMMAND, { subCommand: value, event: event, callBack: callBack, item: exeValue });\r\n                break;\r\n            case 'table':\r\n                switch (value.toString().toLocaleLowerCase()) {\r\n                    case 'createtable':\r\n                        this.observer.notify(CONSTANT.MD_TABLE, { subCommand: value, item: exeValue, event: event, callBack: callBack });\r\n                        break;\r\n                }\r\n                break;\r\n            case 'clear':\r\n                this.observer.notify(CONSTANT.CLEAR_COMMAND, { subCommand: value, event: event, callBack: callBack });\r\n                break;\r\n        }\r\n    };\r\n    return MarkdownParser;\r\n}());\r\nexport { MarkdownParser };\r\n",null]}