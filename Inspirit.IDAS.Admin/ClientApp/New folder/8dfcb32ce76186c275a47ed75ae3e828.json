{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\md-selection-formats.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\md-selection-formats.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport * as CONSTANT from './../base/constant';\r\nimport { extend } from '@syncfusion/ej2-base';\r\nimport * as EVENTS from './../../common/constant';\r\n/**\r\n * SelectionCommands internal component\r\n * @hidden\r\n */\r\nvar MDSelectionFormats = /*@__PURE__*/ (function () {\r\n    function MDSelectionFormats(parent) {\r\n        extend(this, this, parent, true);\r\n        this.selection = this.parent.markdownSelection;\r\n        this.addEventListener();\r\n    }\r\n    MDSelectionFormats.prototype.addEventListener = function () {\r\n        this.parent.observer.on(CONSTANT.selectionCommand, this.applyCommands, this);\r\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.keyDownHandler, this);\r\n    };\r\n    MDSelectionFormats.prototype.keyDownHandler = function (e) {\r\n        switch (e.event.action) {\r\n            case 'bold':\r\n                this.applyCommands({ subCommand: 'Bold', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'italic':\r\n                this.applyCommands({ subCommand: 'Italic', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'strikethrough':\r\n                this.applyCommands({ subCommand: 'StrikeThrough', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'uppercase':\r\n                this.applyCommands({ subCommand: 'UpperCase', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'lowercase':\r\n                this.applyCommands({ subCommand: 'LowerCase', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'superscript':\r\n                this.applyCommands({ subCommand: 'SuperScript', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n            case 'subscript':\r\n                this.applyCommands({ subCommand: 'SubScript', callBack: e.callBack });\r\n                e.event.preventDefault();\r\n                break;\r\n        }\r\n    };\r\n    MDSelectionFormats.prototype.isBold = function (text, cmd) {\r\n        return text.search('\\\\' + cmd + '\\\\' + cmd + '') !== -1;\r\n    };\r\n    MDSelectionFormats.prototype.isItalic = function (text, cmd) {\r\n        return text.search('\\\\' + cmd) !== -1;\r\n    };\r\n    MDSelectionFormats.prototype.isMatch = function (text, cmd) {\r\n        var matchText = [''];\r\n        switch (cmd) {\r\n            case this.syntax.Italic:\r\n                matchText = text.match(this.singleCharRegx(cmd));\r\n                break;\r\n            case this.syntax.InlineCode:\r\n                matchText = text.match(this.singleCharRegx(cmd));\r\n                break;\r\n            case this.syntax.StrikeThrough:\r\n                matchText = text.match(this.singleCharRegx(cmd));\r\n                break;\r\n        }\r\n        return matchText;\r\n    };\r\n    MDSelectionFormats.prototype.multiCharRegx = function (cmd) {\r\n        return new RegExp('(\\\\' + cmd + '\\\\' + cmd + ')', 'g');\r\n    };\r\n    MDSelectionFormats.prototype.singleCharRegx = function (cmd) {\r\n        return new RegExp('(\\\\' + cmd + ')', 'g');\r\n    };\r\n    MDSelectionFormats.prototype.isAppliedCommand = function (cmd) {\r\n        var selectCmd = '';\r\n        var isFormat = false;\r\n        var textArea = this.parent.element;\r\n        var start = textArea.selectionStart;\r\n        var splitAt = function (index) { return function (x) { return [x.slice(0, index), x.slice(index)]; }; };\r\n        var splitText = splitAt(start)(textArea.value);\r\n        var cmdB = this.syntax.Bold.substr(0, 1);\r\n        var cmdI = this.syntax.Italic;\r\n        var beforeText = textArea.value.substr(splitText[0].length - 1, 1);\r\n        var afterText = splitText[1].substr(0, 1);\r\n        if ((beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i)) &&\r\n            beforeText === beforeText.toUpperCase() && afterText === afterText.toUpperCase() && cmd === 'UpperCase') {\r\n            return true;\r\n        }\r\n        if (!(this.isBold(splitText[0], cmdB)) && !(this.isItalic(splitText[0], cmdI)) && !(this.isBold(splitText[1], cmdB)) &&\r\n            !(this.isItalic(splitText[1], cmdI))) {\r\n            if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) &&\r\n                !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough))) &&\r\n                (this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 &&\r\n                    this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1) && cmd === 'StrikeThrough') {\r\n                isFormat = true;\r\n            }\r\n            if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) &&\r\n                !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode))) &&\r\n                (this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 &&\r\n                    this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1) && cmd === 'InlineCode') {\r\n                isFormat = true;\r\n            }\r\n            if ((!isNullOrUndefined(splitText[0].match(/\\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sub>/g))) &&\r\n                (splitText[0].match(/\\<sub>/g).length % 2 === 1 &&\r\n                    splitText[1].match(/\\<\\/sub>/g).length % 2 === 1) && cmd === 'SubScript') {\r\n                isFormat = true;\r\n            }\r\n            if ((!isNullOrUndefined(splitText[0].match(/\\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sup>/g))) &&\r\n                (splitText[0].match(/\\<sup>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sup>/g).length % 2 === 1) &&\r\n                cmd === 'SuperScript') {\r\n                isFormat = true;\r\n            }\r\n        }\r\n        if ((this.isBold(splitText[0], cmdB) && this.isBold(splitText[1], cmdB)) &&\r\n            (splitText[0].match(this.multiCharRegx(cmdB)).length % 2 === 1 &&\r\n                splitText[1].match(this.multiCharRegx(cmdB)).length % 2 === 1) && cmd === 'Bold') {\r\n            isFormat = true;\r\n        }\r\n        splitText[0] = this.isBold(splitText[0], cmdB) ? splitText[0].replace(this.multiCharRegx(cmdB), '$%@') : splitText[0];\r\n        splitText[1] = this.isBold(splitText[1], cmdB) ? splitText[1].replace(this.multiCharRegx(cmdB), '$%@') : splitText[1];\r\n        if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.Italic)) &&\r\n            !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.Italic))) &&\r\n            (this.isMatch(splitText[0], this.syntax.Italic).length % 2 === 1 &&\r\n                this.isMatch(splitText[1], this.syntax.Italic).length % 2 === 1) && cmd === 'Italic') {\r\n            isFormat = true;\r\n        }\r\n        if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) &&\r\n            !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough))) &&\r\n            (this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 &&\r\n                this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1) && cmd === 'StrikeThrough') {\r\n            isFormat = true;\r\n        }\r\n        if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) &&\r\n            !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode))) &&\r\n            (this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 &&\r\n                this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1) && cmd === 'InlineCode') {\r\n            isFormat = true;\r\n        }\r\n        if ((!isNullOrUndefined(splitText[0].match(/\\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sub>/g))) &&\r\n            (splitText[0].match(/\\<sub>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sub>/g).length % 2 === 1) && cmd === 'SubScript') {\r\n            isFormat = true;\r\n        }\r\n        if ((!isNullOrUndefined(splitText[0].match(/\\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sup>/g))) &&\r\n            (splitText[0].match(/\\<sup>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sup>/g).length % 2 === 1) && cmd === 'SuperScript') {\r\n            isFormat = true;\r\n        }\r\n        return isFormat;\r\n    };\r\n    MDSelectionFormats.prototype.applyCommands = function (e) {\r\n        this.currentAction = e.subCommand;\r\n        var textArea = this.parent.element;\r\n        this.selection.save(textArea.selectionStart, textArea.selectionEnd);\r\n        var start = textArea.selectionStart;\r\n        var end = textArea.selectionEnd;\r\n        var addedLength = 0;\r\n        var selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);\r\n        if (this.isAppliedCommand(e.subCommand) && selection.text !== '') {\r\n            var startCmd = this.syntax[e.subCommand];\r\n            var endCmd = e.subCommand === 'SubScript' ? '</sub>' :\r\n                e.subCommand === 'SuperScript' ? '</sup>' : this.syntax[e.subCommand];\r\n            var startLength = (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') ? 0 : startCmd.length;\r\n            var startNo = textArea.value.substr(0, selection.start).lastIndexOf(startCmd);\r\n            var endNo = textArea.value.substr(selection.end, selection.end).indexOf(endCmd);\r\n            endNo = endNo + selection.end;\r\n            var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), startCmd, '', startNo, selection.start);\r\n            var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), endCmd, '', 0, endNo);\r\n            textArea.value = repStartText + selection.text + repEndText;\r\n            this.restore(textArea, start - startLength, end - startLength, e);\r\n            return;\r\n        }\r\n        if (selection.text !== '' && !this.isApplied(selection, e.subCommand)) {\r\n            addedLength = (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') ? 0 :\r\n                this.syntax[e.subCommand].length;\r\n            var repStart = textArea.value.substr(selection.start - this.syntax[e.subCommand].length, this.syntax[e.subCommand].length);\r\n            var repEnd = void 0;\r\n            if ((repStart === e.subCommand) || ((selection.start - this.syntax[e.subCommand].length ===\r\n                textArea.value.indexOf(this.syntax[e.subCommand])) && (selection.end === textArea.value.lastIndexOf(this.syntax[e.subCommand]) || selection.end === textArea.value.lastIndexOf('</' + this.syntax[e.subCommand].substring(1, 5))))) {\r\n                if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\r\n                    repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length + 1);\r\n                }\r\n                else {\r\n                    repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length);\r\n                }\r\n                var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), repStart, '', selection.start - this.syntax[e.subCommand].length, selection.start);\r\n                var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), repEnd, '', 0, repEnd.length);\r\n                textArea.value = repStartText + selection.text + repEndText;\r\n                this.restore(textArea, start - addedLength, end - addedLength, e);\r\n            }\r\n            else {\r\n                if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\r\n                    selection.text = this.syntax[e.subCommand] + selection.text\r\n                        + '</' + this.syntax[e.subCommand].substring(1, 5);\r\n                }\r\n                else if (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') {\r\n                    selection.text = (e.subCommand === 'UpperCase') ? selection.text.toUpperCase()\r\n                        : selection.text.toLowerCase();\r\n                }\r\n                else {\r\n                    selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];\r\n                }\r\n                textArea.value = textArea.value.substr(0, selection.start) + selection.text +\r\n                    textArea.value.substr(selection.end, textArea.value.length);\r\n                this.restore(textArea, start + addedLength, end + addedLength, e);\r\n            }\r\n        }\r\n        else if (e.subCommand !== 'UpperCase' && e.subCommand !== 'LowerCase') {\r\n            if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\r\n                selection.text = this.textReplace(selection.text, e.subCommand);\r\n                selection.text = this.syntax[e.subCommand] + selection.text\r\n                    + '</' + this.syntax[e.subCommand].substring(1, 5);\r\n            }\r\n            else {\r\n                selection.text = this.textReplace(selection.text, e.subCommand);\r\n                selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];\r\n            }\r\n            textArea.value = textArea.value.substr(0, selection.start)\r\n                + selection.text + textArea.value.substr(selection.end, textArea.value.length);\r\n            addedLength = this.syntax[e.subCommand].length;\r\n            if (selection.start === selection.end) {\r\n                this.restore(textArea, start + addedLength, end + addedLength, e);\r\n            }\r\n            else {\r\n                this.restore(textArea, start + addedLength, end - addedLength, e);\r\n            }\r\n        }\r\n        else {\r\n            this.restore(textArea, start, end, e);\r\n        }\r\n        this.parent.undoRedoManager.saveData();\r\n    };\r\n    MDSelectionFormats.prototype.replaceAt = function (input, search, replace, start, end) {\r\n        return input.slice(0, start)\r\n            + input.slice(start, end).replace(search, replace)\r\n            + input.slice(end);\r\n    };\r\n    MDSelectionFormats.prototype.restore = function (textArea, start, end, event) {\r\n        this.selection.save(start, end);\r\n        this.selection.restore(textArea);\r\n        if (event && event.callBack) {\r\n            event.callBack({\r\n                requestType: this.currentAction,\r\n                selectedText: this.selection.getSelectedText(textArea),\r\n                editorMode: 'Markdown',\r\n                event: event.event\r\n            });\r\n        }\r\n    };\r\n    MDSelectionFormats.prototype.textReplace = function (text, command) {\r\n        var regx = this.singleCharRegx(this.syntax[command]);\r\n        switch (command) {\r\n            case 'Bold':\r\n                regx = this.multiCharRegx(this.syntax[command].substr(0, 1));\r\n                text = text.replace(regx, '');\r\n                break;\r\n            case 'Italic':\r\n                if (!this.isBold(text, this.syntax[command].substr(0, 1))) {\r\n                    text = text.replace(regx, '');\r\n                }\r\n                else {\r\n                    var regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));\r\n                    var repText = text;\r\n                    repText = repText.replace(regxB, '$%@').replace(regx, '');\r\n                    var regxTemp = new RegExp('\\\\$%@', 'g');\r\n                    text = repText.replace(regxTemp, this.syntax[command].substr(0, 1) + this.syntax[command].substr(0, 1));\r\n                }\r\n                break;\r\n            case 'StrikeThrough':\r\n                text = text.replace(regx, '');\r\n                break;\r\n            case 'InlineCode':\r\n                text = text.replace(regx, '');\r\n                break;\r\n            case 'SubScript':\r\n                text = text.replace(/<sub>/g, '').replace(/<\\/sub>/g, '');\r\n                break;\r\n            case 'SuperScript':\r\n                text = text.replace(/<sup>/g, '').replace(/<\\/sup>/g, '');\r\n                break;\r\n        }\r\n        return text;\r\n    };\r\n    MDSelectionFormats.prototype.isApplied = function (line, command) {\r\n        var regx = this.singleCharRegx(this.syntax[command]);\r\n        switch (command) {\r\n            case 'SubScript':\r\n            case 'SuperScript':\r\n                regx = this.singleCharRegx(this.syntax[command]);\r\n                return regx.test(line.text);\r\n            case 'Bold':\r\n            case 'StrikeThrough':\r\n                regx = this.multiCharRegx(this.syntax[command].substr(0, 1));\r\n                return regx.test(line.text);\r\n            case 'UpperCase':\r\n            case 'LowerCase':\r\n                regx = new RegExp('^[' + this.syntax[command] + ']*$', 'g');\r\n                return regx.test(line.text);\r\n            case 'Italic':\r\n                var regTest = void 0;\r\n                var regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));\r\n                if (regxB.test(line.text)) {\r\n                    var repText = line.text;\r\n                    repText = repText.replace(regxB, '$%#');\r\n                    regTest = regx.test(repText);\r\n                }\r\n                else {\r\n                    regTest = regx.test(line.text);\r\n                }\r\n                return regTest;\r\n            case 'InlineCode':\r\n                return regx.test(line.text);\r\n        }\r\n    };\r\n    return MDSelectionFormats;\r\n}());\r\nexport { MDSelectionFormats };\r\n",null]}