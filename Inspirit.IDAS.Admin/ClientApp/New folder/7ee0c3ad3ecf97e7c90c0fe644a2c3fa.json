{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\full-screen.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\full-screen.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { Browser, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { getScrollableParent } from '@syncfusion/ej2-popups';\r\nimport * as events from '../base/constant';\r\nimport * as classes from '../base/classes';\r\nimport { addClass, removeClass } from '@syncfusion/ej2-base';\r\n/**\r\n * `FullScreen` module is used to maximize and minimize screen\r\n */\r\nvar FullScreen = /*@__PURE__*/ (function () {\r\n    function FullScreen(parent) {\r\n        this.parent = parent;\r\n        this.addEventListener();\r\n    }\r\n    FullScreen.prototype.showFullScreen = function (event) {\r\n        this.scrollableParent = getScrollableParent(this.parent.element);\r\n        if (!this.parent.element.classList.contains(classes.CLS_FULL_SCREEN)) {\r\n            this.parent.trigger(events.actionBegin, { requestType: 'Maximize', targetItem: 'Maximize', args: event });\r\n            if (this.parent.toolbarSettings.enableFloating && this.parent.toolbarSettings.enable) {\r\n                this.parent.getToolbarElement().style.width = '100%';\r\n                this.parent.getToolbarElement().style.top = '0px';\r\n            }\r\n            this.parent.element.classList.add(classes.CLS_FULL_SCREEN);\r\n            this.toggleParentOverflow(true);\r\n            this.parent.setContentHeight();\r\n            if (this.parent.toolbarModule) {\r\n                if (!this.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {\r\n                    this.parent.getBaseToolbarObject().toolbarObj.removeItems(0);\r\n                }\r\n                if (Browser.isDevice) {\r\n                    this.parent.toolbarModule.removeFixedTBarClass();\r\n                }\r\n                this.parent.toolbarModule.updateItem({\r\n                    targetItem: 'Maximize',\r\n                    updateItem: 'Minimize',\r\n                    baseToolbar: this.parent.getBaseToolbarObject()\r\n                });\r\n            }\r\n            this.parent.trigger(events.actionComplete, { requestType: 'Maximize', targetItem: 'Maximize', args: event });\r\n        }\r\n    };\r\n    FullScreen.prototype.hideFullScreen = function (event) {\r\n        if (this.parent.element.classList.contains(classes.CLS_FULL_SCREEN)) {\r\n            this.parent.element.classList.remove(classes.CLS_FULL_SCREEN);\r\n            var elem = document.querySelectorAll('.e-overflow');\r\n            for (var i = 0; i < elem.length; i++) {\r\n                removeClass([elem[i]], ['e-rte-overflow']);\r\n            }\r\n            this.parent.trigger(events.actionBegin, { requestType: 'Minimize', targetItem: 'Minimize', args: event });\r\n            this.parent.setContentHeight();\r\n            if (this.parent.toolbarModule) {\r\n                if (!this.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {\r\n                    this.parent.getBaseToolbarObject().toolbarObj.removeItems(0);\r\n                }\r\n                this.parent.toolbarModule.updateItem({\r\n                    targetItem: 'Minimize',\r\n                    updateItem: 'Maximize',\r\n                    baseToolbar: this.parent.getBaseToolbarObject()\r\n                });\r\n                if (Browser.isDevice && this.parent.inlineMode.enable) {\r\n                    this.parent.toolbarModule.addFixedTBarClass();\r\n                }\r\n            }\r\n            this.parent.trigger(events.actionComplete, { requestType: 'Minimize', targetItem: 'Minimize', args: event });\r\n        }\r\n    };\r\n    FullScreen.prototype.toggleParentOverflow = function (isAdd) {\r\n        if (isNullOrUndefined(this.scrollableParent)) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < this.scrollableParent.length; i++) {\r\n            if (this.scrollableParent[i].nodeName === '#document') {\r\n                var elem = document.querySelector('body');\r\n                addClass([elem], ['e-rte-overflow']);\r\n            }\r\n            else {\r\n                var elem = this.scrollableParent[i];\r\n                addClass([elem], ['e-rte-overflow']);\r\n            }\r\n        }\r\n    };\r\n    FullScreen.prototype.onKeyDown = function (event) {\r\n        var originalEvent = event.args;\r\n        switch (originalEvent.action) {\r\n            case 'full-screen':\r\n                this.showFullScreen(event.args);\r\n                originalEvent.preventDefault();\r\n                break;\r\n            case 'escape':\r\n                this.hideFullScreen(event.args);\r\n                originalEvent.preventDefault();\r\n                break;\r\n        }\r\n    };\r\n    FullScreen.prototype.addEventListener = function () {\r\n        this.parent.on(events.keyDown, this.onKeyDown, this);\r\n        this.parent.on(events.destroy, this.destroy, this);\r\n    };\r\n    FullScreen.prototype.removeEventListener = function () {\r\n        this.parent.on(events.keyDown, this.onKeyDown, this);\r\n        this.parent.off(events.destroy, this.removeEventListener);\r\n    };\r\n    FullScreen.prototype.destroy = function () {\r\n        if (this.parent.element.classList.contains(classes.CLS_FULL_SCREEN)) {\r\n            this.toggleParentOverflow(false);\r\n        }\r\n        this.removeEventListener();\r\n    };\r\n    return FullScreen;\r\n}());\r\nexport { FullScreen };\r\n",null]}