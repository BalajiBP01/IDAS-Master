{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\base-quick-toolbar.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\rich-text-editor\\actions\\base-quick-toolbar.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { detach, getUniqueID, append, closest, selectAll, select, isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';\r\nimport { addClass, removeClass, Browser, isNullOrUndefined, setStyleAttribute } from '@syncfusion/ej2-base';\r\nimport { isCollide } from '@syncfusion/ej2-popups';\r\nimport * as events from '../base/constant';\r\nimport * as classes from '../base/classes';\r\nimport { RenderType } from '../base/enum';\r\nimport { setToolbarStatus, updateUndoRedoStatus } from '../base/util';\r\nimport { BaseToolbar } from './base-toolbar';\r\nimport { DropDownButtons } from './dropdown-buttons';\r\nimport { ColorPickerInput } from './color-picker';\r\n/**\r\n * `Quick toolbar` module is used to handle Quick toolbar actions.\r\n */\r\nvar BaseQuickToolbar = /*@__PURE__*/ (function () {\r\n    function BaseQuickToolbar(parent, locator) {\r\n        this.parent = parent;\r\n        this.locator = locator;\r\n        this.isDOMElement = false;\r\n        this.renderFactory = this.locator.getService('rendererFactory');\r\n        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\r\n        this.popupRenderer = this.renderFactory.getRenderer(RenderType.Popup);\r\n        this.dropDownButtons = new DropDownButtons(this.parent, this.locator);\r\n        this.colorPickerObj = new ColorPickerInput(this.parent, this.locator);\r\n    }\r\n    BaseQuickToolbar.prototype.appendPopupContent = function () {\r\n        this.toolbarElement = this.parent.createElement('div', { className: classes.CLS_QUICK_TB });\r\n        this.element.appendChild(this.toolbarElement);\r\n    };\r\n    BaseQuickToolbar.prototype.render = function (args) {\r\n        var className;\r\n        if (args.popupType === 'Image') {\r\n            className = classes.CLS_IMAGE_POP;\r\n        }\r\n        else if (args.popupType === 'Inline') {\r\n            className = classes.CLS_INLINE_POP;\r\n        }\r\n        else {\r\n            className = '';\r\n        }\r\n        var popupId = getUniqueID(args.popupType + '_Quick_Popup');\r\n        this.stringItems = args.toolbarItems;\r\n        this.element = this.parent.createElement('div', { id: popupId, className: className + ' ' + classes.CLS_RTE_ELEMENTS });\r\n        this.element.setAttribute('aria-owns', this.parent.getID());\r\n        this.appendPopupContent();\r\n        this.createToolbar(args.toolbarItems, args.mode);\r\n        this.popupRenderer.renderPopup(this);\r\n        this.addEventListener();\r\n    };\r\n    BaseQuickToolbar.prototype.createToolbar = function (items, mode) {\r\n        this.quickTBarObj = new BaseToolbar(this.parent, this.locator);\r\n        this.quickTBarObj.render({\r\n            container: 'quick',\r\n            target: this.toolbarElement,\r\n            items: items,\r\n            mode: mode\r\n        });\r\n        this.quickTBarObj.toolbarObj.refresh();\r\n    };\r\n    BaseQuickToolbar.prototype.setPosition = function (e) {\r\n        var x;\r\n        var y;\r\n        var imgWrapper = closest(e.target, '.e-img-caption');\r\n        var target = !isNOU(imgWrapper) ? imgWrapper : e.target;\r\n        addClass([this.toolbarElement], [classes.CLS_RM_WHITE_SPACE]);\r\n        var targetOffsetTop = target.offsetTop;\r\n        var parentOffsetTop = window.pageYOffset + e.parentData.top;\r\n        if ((targetOffsetTop - e.editTop) > e.popHeight) {\r\n            y = parentOffsetTop + e.tBarElementHeight + (targetOffsetTop - e.editTop) - e.popHeight - 5;\r\n        }\r\n        else if (((e.editTop + e.editHeight) - (targetOffsetTop + target.offsetHeight)) > e.popHeight) {\r\n            y = parentOffsetTop + e.tBarElementHeight + (targetOffsetTop - e.editTop) + target.offsetHeight + 5;\r\n        }\r\n        else {\r\n            y = e.y;\r\n        }\r\n        if (target.offsetWidth > e.popWidth) {\r\n            x = (target.offsetWidth / 2) - (e.popWidth / 2) + e.parentData.left + target.offsetLeft;\r\n        }\r\n        else {\r\n            x = e.parentData.left + target.offsetLeft;\r\n        }\r\n        this.popupObj.position.X = ((x + e.popWidth) > e.parentData.right) ? e.parentData.right - e.popWidth : x;\r\n        this.popupObj.position.Y = y;\r\n        this.popupObj.dataBind();\r\n        removeClass([this.toolbarElement], [classes.CLS_RM_WHITE_SPACE]);\r\n    };\r\n    BaseQuickToolbar.prototype.checkCollision = function (e, viewPort, type) {\r\n        var x;\r\n        var y;\r\n        var parentTop = e.parentData.top;\r\n        var contentTop = e.windowY + parentTop + e.tBarElementHeight;\r\n        var collision = [];\r\n        if (viewPort === 'document') {\r\n            collision = isCollide(e.popup);\r\n        }\r\n        else {\r\n            collision = isCollide(e.popup, e.parentElement);\r\n        }\r\n        for (var i = 0; i < collision.length; i++) {\r\n            switch (collision[i]) {\r\n                case 'top':\r\n                    if (viewPort === 'document') {\r\n                        y = e.windowY;\r\n                    }\r\n                    else {\r\n                        y = (window.pageYOffset + parentTop) + e.tBarElementHeight;\r\n                    }\r\n                    break;\r\n                case 'bottom':\r\n                    var posY = void 0;\r\n                    if (viewPort === 'document') {\r\n                        if (type === 'inline') {\r\n                            posY = (e.y - e.popHeight - 10);\r\n                        }\r\n                        else {\r\n                            if ((e.windowHeight - (parentTop + e.tBarElementHeight)) > e.popHeight) {\r\n                                if ((contentTop - e.windowHeight) > e.popHeight) {\r\n                                    posY = (contentTop + (e.windowHeight - parentTop)) - e.popHeight;\r\n                                }\r\n                                else {\r\n                                    posY = contentTop;\r\n                                }\r\n                            }\r\n                            else {\r\n                                posY = e.windowY + (parentTop + e.tBarElementHeight);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (e.target.tagName !== 'IMG') {\r\n                            posY = (e.parentData.bottom + window.pageYOffset) - e.popHeight - 10;\r\n                        }\r\n                        else {\r\n                            posY = (e.parentData.bottom + window.pageYOffset) - e.popHeight - 5;\r\n                        }\r\n                    }\r\n                    y = posY;\r\n                    break;\r\n                case 'right':\r\n                    if (type === 'inline') {\r\n                        x = e.windowWidth - (e.popWidth + e.bodyRightSpace + 10);\r\n                    }\r\n                    else {\r\n                        x = e.x - (e.popWidth + e.parentData.left);\r\n                    }\r\n                    break;\r\n                case 'left':\r\n                    if (type === 'inline') {\r\n                        x = 0;\r\n                    }\r\n                    else {\r\n                        x = e.parentData.left;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        this.popupObj.position.X = (x) ? x : this.popupObj.position.X;\r\n        this.popupObj.position.Y = (y) ? y : this.popupObj.position.Y;\r\n        this.popupObj.dataBind();\r\n    };\r\n    BaseQuickToolbar.prototype.showPopup = function (x, y, target) {\r\n        var editPanelTop;\r\n        var editPanelHeight;\r\n        var bodyStyle = window.getComputedStyle(document.body);\r\n        var bodyRight = parseFloat(bodyStyle.marginRight.split('px')[0]) + parseFloat(bodyStyle.paddingRight.split('px')[0]);\r\n        var windowHeight = window.innerHeight;\r\n        var windowWidth = window.innerWidth;\r\n        var parent = this.parent.element;\r\n        var toolbarAvail = !isNullOrUndefined(this.parent.getToolbar());\r\n        var tbHeight = toolbarAvail && this.parent.toolbarModule.getToolbarHeight();\r\n        var expTBHeight = toolbarAvail && this.parent.toolbarModule.getExpandTBarPopHeight();\r\n        var tBarHeight = (toolbarAvail) ? (tbHeight + expTBHeight) : 0;\r\n        addClass([this.element], [classes.CLS_HIDE]);\r\n        if (Browser.isDevice) {\r\n            addClass([this.parent.getToolbar()], [classes.CLS_HIDE]);\r\n        }\r\n        if (this.parent.iframeSettings.enable) {\r\n            var cntEle = this.contentRenderer.getPanel().contentWindow;\r\n            editPanelTop = cntEle.pageYOffset;\r\n            editPanelHeight = cntEle.innerHeight;\r\n        }\r\n        else {\r\n            var cntEle = closest(target, '.' + classes.CLS_RTE_CONTENT);\r\n            editPanelTop = (cntEle) ? cntEle.scrollTop : 0;\r\n            editPanelHeight = (cntEle) ? cntEle.offsetHeight : 0;\r\n        }\r\n        if (!this.parent.inlineMode.enable && !closest(target, 'table')) {\r\n            this.parent.disableToolbarItem(this.parent.toolbarSettings.items);\r\n            this.parent.enableToolbarItem(['Undo', 'Redo']);\r\n        }\r\n        append([this.element], document.body);\r\n        this.popupObj.position.X = x + 20;\r\n        this.popupObj.position.Y = y + ((this.parent.iframeSettings.enable) ? 35 : 20);\r\n        this.popupObj.dataBind();\r\n        this.popupObj.show();\r\n        this.dropDownButtons.renderDropDowns({\r\n            container: this.toolbarElement,\r\n            containerType: 'quick',\r\n            items: this.stringItems\r\n        });\r\n        this.colorPickerObj.renderColorPickerInput({\r\n            container: this.toolbarElement,\r\n            containerType: 'quick',\r\n            items: this.stringItems\r\n        });\r\n        var showPopupData = {\r\n            x: x, y: y,\r\n            target: target,\r\n            editTop: editPanelTop,\r\n            editHeight: editPanelHeight,\r\n            popup: this.popupObj.element,\r\n            popHeight: this.popupObj.element.offsetHeight,\r\n            popWidth: this.popupObj.element.offsetWidth,\r\n            parentElement: parent,\r\n            bodyRightSpace: bodyRight,\r\n            windowY: window.pageYOffset,\r\n            windowHeight: windowHeight,\r\n            windowWidth: windowWidth,\r\n            parentData: parent.getBoundingClientRect(),\r\n            tBarElementHeight: tBarHeight\r\n        };\r\n        if (target.tagName === 'IMG') {\r\n            this.setPosition(showPopupData);\r\n        }\r\n        if (!this.parent.inlineMode.enable) {\r\n            this.checkCollision(showPopupData, 'parent', '');\r\n        }\r\n        this.checkCollision(showPopupData, 'document', ((this.parent.inlineMode.enable) ? 'inline' : ''));\r\n        this.popupObj.hide();\r\n        removeClass([this.element], [classes.CLS_HIDE]);\r\n        this.popupObj.show({ name: 'ZoomIn', duration: 400 });\r\n        setStyleAttribute(this.element, {\r\n            maxWidth: this.parent.element.offsetWidth + 'px'\r\n        });\r\n        addClass([this.element], [classes.CLS_POP]);\r\n        this.isDOMElement = true;\r\n    };\r\n    BaseQuickToolbar.prototype.hidePopup = function () {\r\n        var viewSourcePanel = this.parent.sourceCodeModule.getViewPanel();\r\n        if (Browser.isDevice) {\r\n            removeClass([this.parent.getToolbar()], [classes.CLS_HIDE]);\r\n        }\r\n        if (!isNullOrUndefined(this.parent.getToolbar()) && !this.parent.inlineMode.enable) {\r\n            if (isNullOrUndefined(viewSourcePanel) || viewSourcePanel.style.display === 'none') {\r\n                this.parent.enableToolbarItem(this.parent.toolbarSettings.items);\r\n            }\r\n        }\r\n        this.removeEleFromDOM();\r\n        this.isDOMElement = false;\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    BaseQuickToolbar.prototype.addQTBarItem = function (item, index) {\r\n        this.quickTBarObj.toolbarObj.addItems(this.quickTBarObj.getItems(item, 'toolbar'), index);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    BaseQuickToolbar.prototype.removeQTBarItem = function (index) {\r\n        this.quickTBarObj.toolbarObj.removeItems(index);\r\n    };\r\n    BaseQuickToolbar.prototype.removeEleFromDOM = function () {\r\n        var element = this.popupObj.element;\r\n        if (this.isDOMElement) {\r\n            this.dropDownButtons.destroyDropDowns();\r\n            this.colorPickerObj.destroyColorPicker();\r\n            removeClass([this.element], [classes.CLS_POP]);\r\n            detach(element);\r\n        }\r\n    };\r\n    BaseQuickToolbar.prototype.updateStatus = function (args) {\r\n        var options = {\r\n            args: args,\r\n            dropDownModule: this.dropDownButtons,\r\n            parent: this.parent,\r\n            tbElements: selectAll('.' + classes.CLS_TB_ITEM, this.element),\r\n            tbItems: this.quickTBarObj.toolbarObj.items\r\n        };\r\n        setToolbarStatus(options, true);\r\n        if (!select('.e-rte-srctextarea', this.parent.element)) {\r\n            updateUndoRedoStatus(this.parent.getBaseToolbarObject(), this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());\r\n        }\r\n    };\r\n    /**\r\n     * Destroys the Quick toolbar.\r\n     * @method destroy\r\n     * @return {void}\r\n     */\r\n    BaseQuickToolbar.prototype.destroy = function () {\r\n        if (this.popupObj && !this.popupObj.isDestroyed) {\r\n            this.popupObj.destroy();\r\n            this.removeEleFromDOM();\r\n        }\r\n        this.removeEventListener();\r\n    };\r\n    BaseQuickToolbar.prototype.addEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.on(events.destroy, this.destroy, this);\r\n        if (this.parent.inlineMode.enable) {\r\n            this.parent.on(events.toolbarUpdated, this.updateStatus, this);\r\n        }\r\n    };\r\n    BaseQuickToolbar.prototype.removeEventListener = function () {\r\n        if (this.parent.isDestroyed) {\r\n            return;\r\n        }\r\n        this.parent.off(events.destroy, this.destroy);\r\n        if (this.parent.inlineMode.enable) {\r\n            this.parent.off(events.toolbarUpdated, this.updateStatus);\r\n        }\r\n    };\r\n    return BaseQuickToolbar;\r\n}());\r\nexport { BaseQuickToolbar };\r\n",null]}