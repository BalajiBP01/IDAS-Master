{"remainingRequest":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\link.js","dependencies":[{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\markdown-parser\\plugin\\link.js","mtime":499162500000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\Projects\\IDAS_TFS\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import * as CONSTANT from './../base/constant';\r\n/**\r\n * Link internal component\r\n * @hidden\r\n */\r\nvar MDLink = /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for creating the Formats plugin\r\n     * @hidden\r\n     */\r\n    function MDLink(parent) {\r\n        this.parent = parent;\r\n        this.selection = this.parent.markdownSelection;\r\n        this.addEventListener();\r\n    }\r\n    MDLink.prototype.addEventListener = function () {\r\n        this.parent.observer.on(CONSTANT.LINK_COMMAND, this.createLink, this);\r\n    };\r\n    MDLink.prototype.createLink = function (e) {\r\n        var textArea = this.parent.element;\r\n        textArea.focus();\r\n        var start = textArea.selectionStart;\r\n        var end = textArea.selectionEnd;\r\n        var text = (e.subCommand === 'Image') ? this.selection.getSelectedText(textArea) : e.item.text;\r\n        var startOffset = (e.subCommand === 'Image') ? (start + 2) : (start + 1);\r\n        var endOffset = (e.subCommand === 'Image') ? (end + 2) : (end + 1);\r\n        text = (e.subCommand === 'Image') ? '![' + text + '](' + e.item.url + ')' : '[' + text + '](' + e.item.url + ')';\r\n        textArea.value = textArea.value.substr(0, start)\r\n            + text + textArea.value.substr(end, textArea.value.length);\r\n        this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);\r\n        this.restore(textArea, startOffset, endOffset, e);\r\n    };\r\n    MDLink.prototype.restore = function (textArea, start, end, event) {\r\n        this.selection.save(start, end);\r\n        this.selection.restore(textArea);\r\n        if (event && event.callBack) {\r\n            event.callBack({\r\n                requestType: event.subCommand,\r\n                selectedText: this.selection.getSelectedText(textArea),\r\n                editorMode: 'Markdown',\r\n                event: event.event\r\n            });\r\n        }\r\n    };\r\n    return MDLink;\r\n}());\r\nexport { MDLink };\r\n",null]}