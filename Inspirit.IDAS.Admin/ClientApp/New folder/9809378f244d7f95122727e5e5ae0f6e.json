{"remainingRequest":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\isformatted.js","dependencies":[{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@syncfusion\\ej2-richtexteditor\\src\\editor-manager\\plugin\\isformatted.js","mtime":499175100000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510942300000},{"path":"H:\\IDAS Admin\\SW Code Backup\\Inspirit.IDAS_new_v3_23-10-2019\\Inspirit.IDAS\\Inspirit.IDAS.Admin\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518061566000}],"contextDependencies":[],"result":["/**\r\n * Is formatted or not.\r\n * @hidden\r\n */\r\nvar IsFormatted = /*@__PURE__*/ (function () {\r\n    function IsFormatted() {\r\n    }\r\n    IsFormatted.prototype.getFormattedNode = function (node, format, endNode) {\r\n        var parentNode = this.getFormatParent(node, format, endNode);\r\n        if (parentNode !== null && parentNode !== endNode) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    };\r\n    IsFormatted.prototype.getFormatParent = function (node, format, endNode) {\r\n        do {\r\n            node = node.parentNode;\r\n        } while (node && (node !== endNode) && !this.isFormattedNode(node, format));\r\n        return node;\r\n    };\r\n    IsFormatted.prototype.isFormattedNode = function (node, format) {\r\n        switch (format) {\r\n            case 'bold':\r\n                return IsFormatted.isBold(node);\r\n            case 'italic':\r\n                return IsFormatted.isItalic(node);\r\n            case 'underline':\r\n                return IsFormatted.isUnderline(node);\r\n            case 'strikethrough':\r\n                return IsFormatted.isStrikethrough(node);\r\n            case 'superscript':\r\n                return IsFormatted.isSuperscript(node);\r\n            case 'subscript':\r\n                return IsFormatted.isSubscript(node);\r\n            case 'fontcolor':\r\n                return this.isFontColor(node);\r\n            case 'fontname':\r\n                return this.isFontName(node);\r\n            case 'fontsize':\r\n                return this.isFontSize(node);\r\n            case 'backgroundcolor':\r\n                return this.isBackgroundColor(node);\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    IsFormatted.isBold = function (node) {\r\n        var validTags = ['strong', 'b'];\r\n        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\r\n            return true;\r\n        }\r\n        else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&\r\n            node.style && node.style.fontWeight === 'bold') {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.isItalic = function (node) {\r\n        var validTags = ['em', 'i'];\r\n        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\r\n            return true;\r\n        }\r\n        else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&\r\n            node.style && node.style.fontStyle === 'italic') {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.isUnderline = function (node) {\r\n        var validTags = ['u'];\r\n        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\r\n            return true;\r\n        }\r\n        else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&\r\n            node.style && node.style.textDecoration === 'underline') {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.isStrikethrough = function (node) {\r\n        var validTags = ['del', 'strike'];\r\n        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\r\n            return true;\r\n        }\r\n        else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&\r\n            node.style && node.style.textDecoration === 'line-through') {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.isSuperscript = function (node) {\r\n        var validTags = ['sup'];\r\n        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.isSubscript = function (node) {\r\n        var validTags = ['sub'];\r\n        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.prototype.isFontColor = function (node) {\r\n        var color = node.style && node.style.color;\r\n        if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&\r\n            color !== null && color !== '' && color !== undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.prototype.isBackgroundColor = function (node) {\r\n        var backColor = node.style && node.style.backgroundColor;\r\n        if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&\r\n            backColor !== null && backColor !== '' && backColor !== undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.prototype.isFontSize = function (node) {\r\n        var size = node.style && node.style.fontSize;\r\n        if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&\r\n            size !== null && size !== '' && size !== undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    IsFormatted.prototype.isFontName = function (node) {\r\n        var name = node.style && node.style.fontFamily;\r\n        if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&\r\n            name !== null && name !== '' && name !== undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    // Get Formatted Node\r\n    IsFormatted.inlineTags = [\r\n        'a',\r\n        'abbr',\r\n        'acronym',\r\n        'b',\r\n        'bdo',\r\n        'big',\r\n        'cite',\r\n        'code',\r\n        'dfn',\r\n        'em',\r\n        'i',\r\n        'kbd',\r\n        'label',\r\n        'q',\r\n        'samp',\r\n        'small',\r\n        'span',\r\n        'strong',\r\n        'sub',\r\n        'sup',\r\n        'tt',\r\n        'u',\r\n        'var'\r\n    ];\r\n    return IsFormatted;\r\n}());\r\nexport { IsFormatted };\r\n",null]}